
AlarmsAppProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d458  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  0800d5e8  0800d5e8  0001d5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd38  0800dd38  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd38  0800dd38  0001dd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd40  0800dd40  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd40  0800dd40  0001dd40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd44  0800dd44  0001dd44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800dd48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000260c  200000fc  0800de44  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002708  0800de44  00022708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002902d  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005551  00000000  00000000  00049159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002180  00000000  00000000  0004e6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f68  00000000  00000000  00050830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dde6  00000000  00000000  00052798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000277e7  00000000  00000000  0008057e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011528f  00000000  00000000  000a7d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bcff4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a68  00000000  00000000  001bd044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000fc 	.word	0x200000fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d5d0 	.word	0x0800d5d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000100 	.word	0x20000100
 80001cc:	0800d5d0 	.word	0x0800d5d0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2iz>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d215      	bcs.n	8000a72 <__aeabi_d2iz+0x36>
 8000a46:	d511      	bpl.n	8000a6c <__aeabi_d2iz+0x30>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d912      	bls.n	8000a78 <__aeabi_d2iz+0x3c>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d105      	bne.n	8000a84 <__aeabi_d2iz+0x48>
 8000a78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	bf08      	it	eq
 8000a7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b974 	b.w	8000d8c <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	468e      	mov	lr, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14d      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4694      	mov	ip, r2
 8000ace:	d969      	bls.n	8000ba4 <__udivmoddi4+0xe8>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b152      	cbz	r2, 8000aec <__udivmoddi4+0x30>
 8000ad6:	fa01 f302 	lsl.w	r3, r1, r2
 8000ada:	f1c2 0120 	rsb	r1, r2, #32
 8000ade:	fa20 f101 	lsr.w	r1, r0, r1
 8000ae2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aea:	4094      	lsls	r4, r2
 8000aec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af0:	0c21      	lsrs	r1, r4, #16
 8000af2:	fbbe f6f8 	udiv	r6, lr, r8
 8000af6:	fa1f f78c 	uxth.w	r7, ip
 8000afa:	fb08 e316 	mls	r3, r8, r6, lr
 8000afe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b02:	fb06 f107 	mul.w	r1, r6, r7
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b12:	f080 811f 	bcs.w	8000d54 <__udivmoddi4+0x298>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 811c 	bls.w	8000d54 <__udivmoddi4+0x298>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a5b      	subs	r3, r3, r1
 8000b22:	b2a4      	uxth	r4, r4
 8000b24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b28:	fb08 3310 	mls	r3, r8, r0, r3
 8000b2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b30:	fb00 f707 	mul.w	r7, r0, r7
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	d90a      	bls.n	8000b4e <__udivmoddi4+0x92>
 8000b38:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b40:	f080 810a 	bcs.w	8000d58 <__udivmoddi4+0x29c>
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	f240 8107 	bls.w	8000d58 <__udivmoddi4+0x29c>
 8000b4a:	4464      	add	r4, ip
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b52:	1be4      	subs	r4, r4, r7
 8000b54:	2600      	movs	r6, #0
 8000b56:	b11d      	cbz	r5, 8000b60 <__udivmoddi4+0xa4>
 8000b58:	40d4      	lsrs	r4, r2
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b60:	4631      	mov	r1, r6
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d909      	bls.n	8000b7e <__udivmoddi4+0xc2>
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	f000 80ef 	beq.w	8000d4e <__udivmoddi4+0x292>
 8000b70:	2600      	movs	r6, #0
 8000b72:	e9c5 0100 	strd	r0, r1, [r5]
 8000b76:	4630      	mov	r0, r6
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	fab3 f683 	clz	r6, r3
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d14a      	bne.n	8000c1c <__udivmoddi4+0x160>
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xd4>
 8000b8a:	4282      	cmp	r2, r0
 8000b8c:	f200 80f9 	bhi.w	8000d82 <__udivmoddi4+0x2c6>
 8000b90:	1a84      	subs	r4, r0, r2
 8000b92:	eb61 0303 	sbc.w	r3, r1, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	469e      	mov	lr, r3
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d0e0      	beq.n	8000b60 <__udivmoddi4+0xa4>
 8000b9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ba2:	e7dd      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000ba4:	b902      	cbnz	r2, 8000ba8 <__udivmoddi4+0xec>
 8000ba6:	deff      	udf	#255	; 0xff
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	f040 8092 	bne.w	8000cd6 <__udivmoddi4+0x21a>
 8000bb2:	eba1 010c 	sub.w	r1, r1, ip
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f fe8c 	uxth.w	lr, ip
 8000bbe:	2601      	movs	r6, #1
 8000bc0:	0c20      	lsrs	r0, r4, #16
 8000bc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bce:	fb0e f003 	mul.w	r0, lr, r3
 8000bd2:	4288      	cmp	r0, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x12c>
 8000bd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x12a>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f200 80cb 	bhi.w	8000d7c <__udivmoddi4+0x2c0>
 8000be6:	4643      	mov	r3, r8
 8000be8:	1a09      	subs	r1, r1, r0
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d908      	bls.n	8000c12 <__udivmoddi4+0x156>
 8000c00:	eb1c 0404 	adds.w	r4, ip, r4
 8000c04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c08:	d202      	bcs.n	8000c10 <__udivmoddi4+0x154>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f200 80bb 	bhi.w	8000d86 <__udivmoddi4+0x2ca>
 8000c10:	4608      	mov	r0, r1
 8000c12:	eba4 040e 	sub.w	r4, r4, lr
 8000c16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c1a:	e79c      	b.n	8000b56 <__udivmoddi4+0x9a>
 8000c1c:	f1c6 0720 	rsb	r7, r6, #32
 8000c20:	40b3      	lsls	r3, r6
 8000c22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c32:	431c      	orrs	r4, r3
 8000c34:	40f9      	lsrs	r1, r7
 8000c36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c42:	0c20      	lsrs	r0, r4, #16
 8000c44:	fa1f fe8c 	uxth.w	lr, ip
 8000c48:	fb09 1118 	mls	r1, r9, r8, r1
 8000c4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c50:	fb08 f00e 	mul.w	r0, r8, lr
 8000c54:	4288      	cmp	r0, r1
 8000c56:	fa02 f206 	lsl.w	r2, r2, r6
 8000c5a:	d90b      	bls.n	8000c74 <__udivmoddi4+0x1b8>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c64:	f080 8088 	bcs.w	8000d78 <__udivmoddi4+0x2bc>
 8000c68:	4288      	cmp	r0, r1
 8000c6a:	f240 8085 	bls.w	8000d78 <__udivmoddi4+0x2bc>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	4461      	add	r1, ip
 8000c74:	1a09      	subs	r1, r1, r0
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c88:	458e      	cmp	lr, r1
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x1e2>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c94:	d26c      	bcs.n	8000d70 <__udivmoddi4+0x2b4>
 8000c96:	458e      	cmp	lr, r1
 8000c98:	d96a      	bls.n	8000d70 <__udivmoddi4+0x2b4>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	4461      	add	r1, ip
 8000c9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ca2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ca6:	eba1 010e 	sub.w	r1, r1, lr
 8000caa:	42a1      	cmp	r1, r4
 8000cac:	46c8      	mov	r8, r9
 8000cae:	46a6      	mov	lr, r4
 8000cb0:	d356      	bcc.n	8000d60 <__udivmoddi4+0x2a4>
 8000cb2:	d053      	beq.n	8000d5c <__udivmoddi4+0x2a0>
 8000cb4:	b15d      	cbz	r5, 8000cce <__udivmoddi4+0x212>
 8000cb6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cba:	eb61 010e 	sbc.w	r1, r1, lr
 8000cbe:	fa01 f707 	lsl.w	r7, r1, r7
 8000cc2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cc6:	40f1      	lsrs	r1, r6
 8000cc8:	431f      	orrs	r7, r3
 8000cca:	e9c5 7100 	strd	r7, r1, [r5]
 8000cce:	2600      	movs	r6, #0
 8000cd0:	4631      	mov	r1, r6
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	f1c2 0320 	rsb	r3, r2, #32
 8000cda:	40d8      	lsrs	r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ce4:	4091      	lsls	r1, r2
 8000ce6:	4301      	orrs	r1, r0
 8000ce8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cec:	fa1f fe8c 	uxth.w	lr, ip
 8000cf0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cf4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cf8:	0c0b      	lsrs	r3, r1, #16
 8000cfa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cfe:	fb00 f60e 	mul.w	r6, r0, lr
 8000d02:	429e      	cmp	r6, r3
 8000d04:	fa04 f402 	lsl.w	r4, r4, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x260>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d12:	d22f      	bcs.n	8000d74 <__udivmoddi4+0x2b8>
 8000d14:	429e      	cmp	r6, r3
 8000d16:	d92d      	bls.n	8000d74 <__udivmoddi4+0x2b8>
 8000d18:	3802      	subs	r0, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	b289      	uxth	r1, r1
 8000d20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d24:	fb07 3316 	mls	r3, r7, r6, r3
 8000d28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x28a>
 8000d34:	eb1c 0101 	adds.w	r1, ip, r1
 8000d38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d3c:	d216      	bcs.n	8000d6c <__udivmoddi4+0x2b0>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d914      	bls.n	8000d6c <__udivmoddi4+0x2b0>
 8000d42:	3e02      	subs	r6, #2
 8000d44:	4461      	add	r1, ip
 8000d46:	1ac9      	subs	r1, r1, r3
 8000d48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d4c:	e738      	b.n	8000bc0 <__udivmoddi4+0x104>
 8000d4e:	462e      	mov	r6, r5
 8000d50:	4628      	mov	r0, r5
 8000d52:	e705      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000d54:	4606      	mov	r6, r0
 8000d56:	e6e3      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d58:	4618      	mov	r0, r3
 8000d5a:	e6f8      	b.n	8000b4e <__udivmoddi4+0x92>
 8000d5c:	454b      	cmp	r3, r9
 8000d5e:	d2a9      	bcs.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d60:	ebb9 0802 	subs.w	r8, r9, r2
 8000d64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7a3      	b.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d6c:	4646      	mov	r6, r8
 8000d6e:	e7ea      	b.n	8000d46 <__udivmoddi4+0x28a>
 8000d70:	4620      	mov	r0, r4
 8000d72:	e794      	b.n	8000c9e <__udivmoddi4+0x1e2>
 8000d74:	4640      	mov	r0, r8
 8000d76:	e7d1      	b.n	8000d1c <__udivmoddi4+0x260>
 8000d78:	46d0      	mov	r8, sl
 8000d7a:	e77b      	b.n	8000c74 <__udivmoddi4+0x1b8>
 8000d7c:	3b02      	subs	r3, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	e732      	b.n	8000be8 <__udivmoddi4+0x12c>
 8000d82:	4630      	mov	r0, r6
 8000d84:	e709      	b.n	8000b9a <__udivmoddi4+0xde>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	e742      	b.n	8000c12 <__udivmoddi4+0x156>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <turnOffAlarm>:
Alarm alarmsArr[MAX_ALARMS];
static uint8_t countAlarms = 0;


void turnOffAlarm()
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	buzzerOff(&buzzer);
 8000d94:	4810      	ldr	r0, [pc, #64]	; (8000dd8 <turnOffAlarm+0x48>)
 8000d96:	f000 fc07 	bl	80015a8 <buzzerOff>
	stopLed(&blueLed);
 8000d9a:	4810      	ldr	r0, [pc, #64]	; (8000ddc <turnOffAlarm+0x4c>)
 8000d9c:	f001 f8c8 	bl	8001f30 <stopLed>
	alarmsArr[alarmStatus].alarmActive = OFF;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <turnOffAlarm+0x50>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	490f      	ldr	r1, [pc, #60]	; (8000de4 <turnOffAlarm+0x54>)
 8000da6:	4613      	mov	r3, r2
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	4413      	add	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	440b      	add	r3, r1
 8000db0:	331e      	adds	r3, #30
 8000db2:	22ff      	movs	r2, #255	; 0xff
 8000db4:	701a      	strb	r2, [r3, #0]
	alarmsArr[alarmStatus].alarmStartTime = 0;
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <turnOffAlarm+0x50>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	490a      	ldr	r1, [pc, #40]	; (8000de4 <turnOffAlarm+0x54>)
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	4413      	add	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	3320      	adds	r3, #32
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
	alarmStatus = OFF;
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <turnOffAlarm+0x50>)
 8000dce:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd2:	601a      	str	r2, [r3, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000148 	.word	0x20000148
 8000ddc:	20000138 	.word	0x20000138
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000160 	.word	0x20000160

08000de8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == rightBtn.gpioPin) // the user click on the btn for turn off the alarm
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000df4:	891b      	ldrh	r3, [r3, #8]
 8000df6:	88fa      	ldrh	r2, [r7, #6]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d106      	bne.n	8000e0a <HAL_GPIO_EXTI_Callback+0x22>
	{
		if(alarmStatus != OFF)
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_GPIO_EXTI_Callback+0x30>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e04:	d001      	beq.n	8000e0a <HAL_GPIO_EXTI_Callback+0x22>
		{
			turnOffAlarm();
 8000e06:	f7ff ffc3 	bl	8000d90 <turnOffAlarm>
		}
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000120 	.word	0x20000120
 8000e18:	20000000 	.word	0x20000000

08000e1c <alarmAppMain>:


void alarmAppMain()
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	 buttonInit(&rightBtn, RIGHT_BTN, rightBtn_GPIO_Port, rightBtn_Pin);
 8000e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e24:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4816      	ldr	r0, [pc, #88]	; (8000e84 <alarmAppMain+0x68>)
 8000e2c:	f000 fada 	bl	80013e4 <buttonInit>
	 buttonInit(&leftBtn, LEFT_BTN, leftBtn_GPIO_Port, leftBtn_Pin);
 8000e30:	2308      	movs	r3, #8
 8000e32:	4a15      	ldr	r2, [pc, #84]	; (8000e88 <alarmAppMain+0x6c>)
 8000e34:	2101      	movs	r1, #1
 8000e36:	4815      	ldr	r0, [pc, #84]	; (8000e8c <alarmAppMain+0x70>)
 8000e38:	f000 fad4 	bl	80013e4 <buttonInit>
	 //ledInit(&blueLed,blueLed_GPIO_Port, blueLed_Pin); // before used in pwm
	 ledInitPwm(&blueLed);// for pwm
 8000e3c:	4814      	ldr	r0, [pc, #80]	; (8000e90 <alarmAppMain+0x74>)
 8000e3e:	f000 fff8 	bl	8001e32 <ledInitPwm>
	 rtcInit(&rtc, &hi2c1, 0XD0);
 8000e42:	22d0      	movs	r2, #208	; 0xd0
 8000e44:	4913      	ldr	r1, [pc, #76]	; (8000e94 <alarmAppMain+0x78>)
 8000e46:	4814      	ldr	r0, [pc, #80]	; (8000e98 <alarmAppMain+0x7c>)
 8000e48:	f001 fb6f 	bl	800252a <rtcInit>
	 buzzerInit(&buzzer, &htim3, TIM_CHANNEL_1);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	4913      	ldr	r1, [pc, #76]	; (8000e9c <alarmAppMain+0x80>)
 8000e50:	4813      	ldr	r0, [pc, #76]	; (8000ea0 <alarmAppMain+0x84>)
 8000e52:	f000 fae3 	bl	800141c <buzzerInit>
	 cliInit();
 8000e56:	f000 fe4b 	bl	8001af0 <cliInit>
	 rtcMutex = osMutexNew(NULL);
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f008 f967 	bl	800912e <osMutexNew>
 8000e60:	4603      	mov	r3, r0
 8000e62:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <alarmAppMain+0x88>)
 8000e64:	6013      	str	r3, [r2, #0]
	 HAL_ADC_Start_IT(&hadc2);
 8000e66:	4810      	ldr	r0, [pc, #64]	; (8000ea8 <alarmAppMain+0x8c>)
 8000e68:	f002 fb8a 	bl	8003580 <HAL_ADC_Start_IT>
	 HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e6c:	2012      	movs	r0, #18
 8000e6e:	f003 fc9e 	bl	80047ae <HAL_NVIC_EnableIRQ>
	 HAL_ADC_Start_IT(&hadc2);
 8000e72:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <alarmAppMain+0x8c>)
 8000e74:	f002 fb84 	bl	8003580 <HAL_ADC_Start_IT>
	 readFromFlash();
 8000e78:	f000 f818 	bl	8000eac <readFromFlash>
	 printAlarms();
 8000e7c:	f000 f93a 	bl	80010f4 <printAlarms>
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000120 	.word	0x20000120
 8000e88:	48000400 	.word	0x48000400
 8000e8c:	2000012c 	.word	0x2000012c
 8000e90:	20000138 	.word	0x20000138
 8000e94:	20000494 	.word	0x20000494
 8000e98:	20000118 	.word	0x20000118
 8000e9c:	20000534 	.word	0x20000534
 8000ea0:	20000148 	.word	0x20000148
 8000ea4:	2000015c 	.word	0x2000015c
 8000ea8:	20000430 	.word	0x20000430

08000eac <readFromFlash>:

void readFromFlash()
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
	Alarm* data = (Alarm *)(PAGE_256);
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <readFromFlash+0x4c>)
 8000eb4:	607b      	str	r3, [r7, #4]
	while(data->inUse == ALARM_IN_USED)
 8000eb6:	e016      	b.n	8000ee6 <readFromFlash+0x3a>
	{
		memcpy(&alarmsArr[countAlarms], data, sizeof(Alarm));
 8000eb8:	4b10      	ldr	r3, [pc, #64]	; (8000efc <readFromFlash+0x50>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	4413      	add	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <readFromFlash+0x54>)
 8000ec8:	4413      	add	r3, r2
 8000eca:	2224      	movs	r2, #36	; 0x24
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f00b f9e2 	bl	800c298 <memcpy>
		countAlarms++;
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <readFromFlash+0x50>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <readFromFlash+0x50>)
 8000ede:	701a      	strb	r2, [r3, #0]
		data++;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3324      	adds	r3, #36	; 0x24
 8000ee4:	607b      	str	r3, [r7, #4]
	while(data->inUse == ALARM_IN_USED)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d0e4      	beq.n	8000eb8 <readFromFlash+0xc>
	}
}
 8000eee:	bf00      	nop
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	08080000 	.word	0x08080000
 8000efc:	200002c8 	.word	0x200002c8
 8000f00:	20000160 	.word	0x20000160

08000f04 <writeToFlash>:

void writeToFlash()
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	status = erasePage(BANK_IN_USED, PAGE_256, 1);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4912      	ldr	r1, [pc, #72]	; (8000f58 <writeToFlash+0x54>)
 8000f0e:	2002      	movs	r0, #2
 8000f10:	f000 ff38 	bl	8001d84 <erasePage>
 8000f14:	4603      	mov	r3, r0
 8000f16:	71fb      	strb	r3, [r7, #7]
	if(status != HAL_OK)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <writeToFlash+0x22>
	{
		printf("error in erase page in line %d", __LINE__);
 8000f1e:	2163      	movs	r1, #99	; 0x63
 8000f20:	480e      	ldr	r0, [pc, #56]	; (8000f5c <writeToFlash+0x58>)
 8000f22:	f00b f9cf 	bl	800c2c4 <iprintf>
	}

	status = writeToPage(FLASH_TYPEPROGRAM_DOUBLEWORD, PAGE_256, &alarmsArr, (sizeof(Alarm)) * MAX_ALARMS);
 8000f26:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000f2a:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <writeToFlash+0x5c>)
 8000f2c:	490a      	ldr	r1, [pc, #40]	; (8000f58 <writeToFlash+0x54>)
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f000 ff4f 	bl	8001dd2 <writeToPage>
 8000f34:	4603      	mov	r3, r0
 8000f36:	71fb      	strb	r3, [r7, #7]
	if(status != HAL_OK)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d004      	beq.n	8000f48 <writeToFlash+0x44>
	{
		printf("error in write to page in line %d", __LINE__);
 8000f3e:	2169      	movs	r1, #105	; 0x69
 8000f40:	4808      	ldr	r0, [pc, #32]	; (8000f64 <writeToFlash+0x60>)
 8000f42:	f00b f9bf 	bl	800c2c4 <iprintf>
	}
	else
	{
		printf("saved in flash \r\n");
	}
}
 8000f46:	e002      	b.n	8000f4e <writeToFlash+0x4a>
		printf("saved in flash \r\n");
 8000f48:	4807      	ldr	r0, [pc, #28]	; (8000f68 <writeToFlash+0x64>)
 8000f4a:	f00b fa41 	bl	800c3d0 <puts>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	08080000 	.word	0x08080000
 8000f5c:	0800d5e8 	.word	0x0800d5e8
 8000f60:	20000160 	.word	0x20000160
 8000f64:	0800d608 	.word	0x0800d608
 8000f68:	0800d62c 	.word	0x0800d62c

08000f6c <addAlarm>:

void addAlarm(Alarm* alarm)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	if(countAlarms >= MAX_ALARMS)
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <addAlarm+0x50>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b09      	cmp	r3, #9
 8000f7a:	d903      	bls.n	8000f84 <addAlarm+0x18>
	{
		printf("list is full, please remove any alarm before adding \r\n");
 8000f7c:	4810      	ldr	r0, [pc, #64]	; (8000fc0 <addAlarm+0x54>)
 8000f7e:	f00b fa27 	bl	800c3d0 <puts>
		return;
 8000f82:	e018      	b.n	8000fb6 <addAlarm+0x4a>
	}
	memcpy(&alarmsArr[countAlarms], alarm, sizeof(Alarm));
 8000f84:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <addAlarm+0x50>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	4413      	add	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4a0c      	ldr	r2, [pc, #48]	; (8000fc4 <addAlarm+0x58>)
 8000f94:	4413      	add	r3, r2
 8000f96:	2224      	movs	r2, #36	; 0x24
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f00b f97c 	bl	800c298 <memcpy>
	countAlarms++;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <addAlarm+0x50>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <addAlarm+0x50>)
 8000faa:	701a      	strb	r2, [r3, #0]
	printf("added alarm successfully \r\n");
 8000fac:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <addAlarm+0x5c>)
 8000fae:	f00b fa0f 	bl	800c3d0 <puts>
	writeToFlash();
 8000fb2:	f7ff ffa7 	bl	8000f04 <writeToFlash>
}
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200002c8 	.word	0x200002c8
 8000fc0:	0800d640 	.word	0x0800d640
 8000fc4:	20000160 	.word	0x20000160
 8000fc8:	0800d678 	.word	0x0800d678

08000fcc <deleteAlarm>:

void deleteAlarm(char* name)
{
 8000fcc:	b5b0      	push	{r4, r5, r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	int delete = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < countAlarms; i++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	e040      	b.n	8001060 <deleteAlarm+0x94>
	{
		if(strcmp(alarmsArr[i].alarmName,name) == 0)
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4a28      	ldr	r2, [pc, #160]	; (800108c <deleteAlarm+0xc0>)
 8000fea:	4413      	add	r3, r2
 8000fec:	3301      	adds	r3, #1
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff f8ed 	bl	80001d0 <strcmp>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d12e      	bne.n	800105a <deleteAlarm+0x8e>
		{

			alarmsArr[i] = alarmsArr[countAlarms-1];
 8000ffc:	4b24      	ldr	r3, [pc, #144]	; (8001090 <deleteAlarm+0xc4>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	1e5a      	subs	r2, r3, #1
 8001002:	4822      	ldr	r0, [pc, #136]	; (800108c <deleteAlarm+0xc0>)
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	460b      	mov	r3, r1
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	440b      	add	r3, r1
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4418      	add	r0, r3
 8001010:	491e      	ldr	r1, [pc, #120]	; (800108c <deleteAlarm+0xc0>)
 8001012:	4613      	mov	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	4413      	add	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	4604      	mov	r4, r0
 800101e:	461d      	mov	r5, r3
 8001020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001028:	682b      	ldr	r3, [r5, #0]
 800102a:	6023      	str	r3, [r4, #0]
			memset(&alarmsArr[countAlarms-1], 0, sizeof(Alarm));
 800102c:	4b18      	ldr	r3, [pc, #96]	; (8001090 <deleteAlarm+0xc4>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	1e5a      	subs	r2, r3, #1
 8001032:	4613      	mov	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4a14      	ldr	r2, [pc, #80]	; (800108c <deleteAlarm+0xc0>)
 800103c:	4413      	add	r3, r2
 800103e:	2224      	movs	r2, #36	; 0x24
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f00b f936 	bl	800c2b4 <memset>
			countAlarms--;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <deleteAlarm+0xc4>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	3b01      	subs	r3, #1
 800104e:	b2da      	uxtb	r2, r3
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <deleteAlarm+0xc4>)
 8001052:	701a      	strb	r2, [r3, #0]
			delete = 1;
 8001054:	2301      	movs	r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
			break;
 8001058:	e008      	b.n	800106c <deleteAlarm+0xa0>
	for(int i = 0; i < countAlarms; i++)
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	3301      	adds	r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <deleteAlarm+0xc4>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	4293      	cmp	r3, r2
 800106a:	dbb8      	blt.n	8000fde <deleteAlarm+0x12>
		}
	}
	delete > 0? printf("deleted alarm successfully \r\n"): printf("Name not exists \r\n");
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	dd03      	ble.n	800107a <deleteAlarm+0xae>
 8001072:	4808      	ldr	r0, [pc, #32]	; (8001094 <deleteAlarm+0xc8>)
 8001074:	f00b f926 	bl	800c2c4 <iprintf>
 8001078:	e002      	b.n	8001080 <deleteAlarm+0xb4>
 800107a:	4807      	ldr	r0, [pc, #28]	; (8001098 <deleteAlarm+0xcc>)
 800107c:	f00b f922 	bl	800c2c4 <iprintf>
	writeToFlash();
 8001080:	f7ff ff40 	bl	8000f04 <writeToFlash>
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bdb0      	pop	{r4, r5, r7, pc}
 800108c:	20000160 	.word	0x20000160
 8001090:	200002c8 	.word	0x200002c8
 8001094:	0800d694 	.word	0x0800d694
 8001098:	0800d6b4 	.word	0x0800d6b4

0800109c <clearList>:

void clearList()
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
	int numAlarms = countAlarms-1;
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <clearList+0x50>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	603b      	str	r3, [r7, #0]
	for(int i = numAlarms; i >= 0; i--)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	e014      	b.n	80010da <clearList+0x3e>
	{
		memset(&alarmsArr[i], 0, sizeof(Alarm));
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	4413      	add	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4a0d      	ldr	r2, [pc, #52]	; (80010f0 <clearList+0x54>)
 80010bc:	4413      	add	r3, r2
 80010be:	2224      	movs	r2, #36	; 0x24
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f00b f8f6 	bl	800c2b4 <memset>
		countAlarms--;
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <clearList+0x50>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <clearList+0x50>)
 80010d2:	701a      	strb	r2, [r3, #0]
	for(int i = numAlarms; i >= 0; i--)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	dae7      	bge.n	80010b0 <clearList+0x14>
		//printf("countAlarms == %u\r\n", countAlarms);
	}
	writeToFlash();
 80010e0:	f7ff ff10 	bl	8000f04 <writeToFlash>

}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200002c8 	.word	0x200002c8
 80010f0:	20000160 	.word	0x20000160

080010f4 <printAlarms>:

void printAlarms()
{
 80010f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af02      	add	r7, sp, #8
	printf("\r\n--------------------LIST--------------------\r\n");
 80010fa:	482f      	ldr	r0, [pc, #188]	; (80011b8 <printAlarms+0xc4>)
 80010fc:	f00b f968 	bl	800c3d0 <puts>
	if(countAlarms == 0)
 8001100:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <printAlarms+0xc8>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d103      	bne.n	8001110 <printAlarms+0x1c>
	{
		printf("Alarms list is empty \r\n");
 8001108:	482d      	ldr	r0, [pc, #180]	; (80011c0 <printAlarms+0xcc>)
 800110a:	f00b f961 	bl	800c3d0 <puts>
		return;
 800110e:	e04f      	b.n	80011b0 <printAlarms+0xbc>
	}
	for(int i = 0; i < countAlarms; i++)
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	e043      	b.n	800119e <printAlarms+0xaa>
	{
		printf("%d.%s: %02d:%02d:%02d ", i+1, alarmsArr[i].alarmName, alarmsArr[i].alarmTime.hours,
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	1c59      	adds	r1, r3, #1
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	4613      	mov	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	4413      	add	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4a27      	ldr	r2, [pc, #156]	; (80011c4 <printAlarms+0xd0>)
 8001126:	4413      	add	r3, r2
 8001128:	1c58      	adds	r0, r3, #1
 800112a:	4c26      	ldr	r4, [pc, #152]	; (80011c4 <printAlarms+0xd0>)
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	4413      	add	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4423      	add	r3, r4
 8001138:	3317      	adds	r3, #23
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461e      	mov	r6, r3
											alarmsArr[i].alarmTime.min, alarmsArr[i].alarmTime.sec);
 800113e:	4c21      	ldr	r4, [pc, #132]	; (80011c4 <printAlarms+0xd0>)
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	4413      	add	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4423      	add	r3, r4
 800114c:	3316      	adds	r3, #22
 800114e:	781b      	ldrb	r3, [r3, #0]
		printf("%d.%s: %02d:%02d:%02d ", i+1, alarmsArr[i].alarmName, alarmsArr[i].alarmTime.hours,
 8001150:	461d      	mov	r5, r3
											alarmsArr[i].alarmTime.min, alarmsArr[i].alarmTime.sec);
 8001152:	4c1c      	ldr	r4, [pc, #112]	; (80011c4 <printAlarms+0xd0>)
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4423      	add	r3, r4
 8001160:	3315      	adds	r3, #21
 8001162:	781b      	ldrb	r3, [r3, #0]
		printf("%d.%s: %02d:%02d:%02d ", i+1, alarmsArr[i].alarmName, alarmsArr[i].alarmTime.hours,
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	9500      	str	r5, [sp, #0]
 8001168:	4633      	mov	r3, r6
 800116a:	4602      	mov	r2, r0
 800116c:	4816      	ldr	r0, [pc, #88]	; (80011c8 <printAlarms+0xd4>)
 800116e:	f00b f8a9 	bl	800c2c4 <iprintf>
		alarmsArr[i].alarmActive == ON ? printf("alarm ON\r\n"): printf("alarm OFF\r\n");
 8001172:	4914      	ldr	r1, [pc, #80]	; (80011c4 <printAlarms+0xd0>)
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	4413      	add	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	440b      	add	r3, r1
 8001180:	331e      	adds	r3, #30
 8001182:	f993 3000 	ldrsb.w	r3, [r3]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d103      	bne.n	8001192 <printAlarms+0x9e>
 800118a:	4810      	ldr	r0, [pc, #64]	; (80011cc <printAlarms+0xd8>)
 800118c:	f00b f89a 	bl	800c2c4 <iprintf>
 8001190:	e002      	b.n	8001198 <printAlarms+0xa4>
 8001192:	480f      	ldr	r0, [pc, #60]	; (80011d0 <printAlarms+0xdc>)
 8001194:	f00b f896 	bl	800c2c4 <iprintf>
	for(int i = 0; i < countAlarms; i++)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3301      	adds	r3, #1
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <printAlarms+0xc8>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4293      	cmp	r3, r2
 80011a8:	dbb5      	blt.n	8001116 <printAlarms+0x22>
	}
	printf("--------------------------------------------\r\n");
 80011aa:	480a      	ldr	r0, [pc, #40]	; (80011d4 <printAlarms+0xe0>)
 80011ac:	f00b f910 	bl	800c3d0 <puts>
}
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011b6:	bf00      	nop
 80011b8:	0800d6c8 	.word	0x0800d6c8
 80011bc:	200002c8 	.word	0x200002c8
 80011c0:	0800d6f8 	.word	0x0800d6f8
 80011c4:	20000160 	.word	0x20000160
 80011c8:	0800d710 	.word	0x0800d710
 80011cc:	0800d728 	.word	0x0800d728
 80011d0:	0800d734 	.word	0x0800d734
 80011d4:	0800d740 	.word	0x0800d740

080011d8 <nameAlreadyExists>:

int nameAlreadyExists(char *alarmName)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	int ret = -1;
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
 80011e4:	60fb      	str	r3, [r7, #12]
	for(int i = 0 ; i < countAlarms; i++){
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	e014      	b.n	8001216 <nameAlreadyExists+0x3e>
		if(strcmp(alarmsArr[i].alarmName,alarmName) == 0){
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	4613      	mov	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	4413      	add	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4a0d      	ldr	r2, [pc, #52]	; (800122c <nameAlreadyExists+0x54>)
 80011f8:	4413      	add	r3, r2
 80011fa:	3301      	adds	r3, #1
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7fe ffe6 	bl	80001d0 <strcmp>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <nameAlreadyExists+0x38>
			ret = i;
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	60fb      	str	r3, [r7, #12]
			break;
 800120e:	e008      	b.n	8001222 <nameAlreadyExists+0x4a>
	for(int i = 0 ; i < countAlarms; i++){
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	3301      	adds	r3, #1
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <nameAlreadyExists+0x58>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4293      	cmp	r3, r2
 8001220:	dbe4      	blt.n	80011ec <nameAlreadyExists+0x14>
		}
	}
	return ret;
 8001222:	68fb      	ldr	r3, [r7, #12]

}
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000160 	.word	0x20000160
 8001230:	200002c8 	.word	0x200002c8

08001234 <isTimeToAlarm>:

static int isTimeToAlarm(DateTime* alarmTime, DateTime* realTime)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
	if(alarmTime->year == realTime->year && alarmTime->month == realTime->month && alarmTime->day == realTime->day)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	799a      	ldrb	r2, [r3, #6]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	799b      	ldrb	r3, [r3, #6]
 8001246:	429a      	cmp	r2, r3
 8001248:	d119      	bne.n	800127e <isTimeToAlarm+0x4a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	795a      	ldrb	r2, [r3, #5]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	795b      	ldrb	r3, [r3, #5]
 8001252:	429a      	cmp	r2, r3
 8001254:	d113      	bne.n	800127e <isTimeToAlarm+0x4a>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	791a      	ldrb	r2, [r3, #4]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	791b      	ldrb	r3, [r3, #4]
 800125e:	429a      	cmp	r2, r3
 8001260:	d10d      	bne.n	800127e <isTimeToAlarm+0x4a>
	{
		if(alarmTime->hours == realTime->hours && alarmTime->min == realTime->min)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	789a      	ldrb	r2, [r3, #2]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	789b      	ldrb	r3, [r3, #2]
 800126a:	429a      	cmp	r2, r3
 800126c:	d107      	bne.n	800127e <isTimeToAlarm+0x4a>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	785a      	ldrb	r2, [r3, #1]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	785b      	ldrb	r3, [r3, #1]
 8001276:	429a      	cmp	r2, r3
 8001278:	d101      	bne.n	800127e <isTimeToAlarm+0x4a>
		{
			return 1;
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <isTimeToAlarm+0x4c>
		}
	}
	return 0;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <alarmTask>:

void alarmTask(void *argument)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	DateTime currTime;
	while(1)
	{
		osMutexAcquire(rtcMutex, osWaitForever);
 8001294:	4b4b      	ldr	r3, [pc, #300]	; (80013c4 <alarmTask+0x138>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	4618      	mov	r0, r3
 800129e:	f007 ffcc 	bl	800923a <osMutexAcquire>
		rtcGetTime(&rtc, &currTime);
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	4619      	mov	r1, r3
 80012a8:	4847      	ldr	r0, [pc, #284]	; (80013c8 <alarmTask+0x13c>)
 80012aa:	f001 f99b 	bl	80025e4 <rtcGetTime>
		osMutexRelease(rtcMutex);
 80012ae:	4b45      	ldr	r3, [pc, #276]	; (80013c4 <alarmTask+0x138>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f008 f80c 	bl	80092d0 <osMutexRelease>
		if(alarmStatus == OFF) // there is no alarm in the background
 80012b8:	4b44      	ldr	r3, [pc, #272]	; (80013cc <alarmTask+0x140>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c0:	d159      	bne.n	8001376 <alarmTask+0xea>
		{
			for(int i = 0; i < countAlarms; i++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	e04f      	b.n	8001368 <alarmTask+0xdc>
			{
				if(isTimeToAlarm(&alarmsArr[i].alarmTime, &currTime))
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	4613      	mov	r3, r2
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	4413      	add	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	3310      	adds	r3, #16
 80012d4:	4a3e      	ldr	r2, [pc, #248]	; (80013d0 <alarmTask+0x144>)
 80012d6:	4413      	add	r3, r2
 80012d8:	3305      	adds	r3, #5
 80012da:	f107 0208 	add.w	r2, r7, #8
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ffa7 	bl	8001234 <isTimeToAlarm>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d03a      	beq.n	8001362 <alarmTask+0xd6>
				{
					if(alarmsArr[i].alarmActive == ON) // start the alarm only if this alarm on
 80012ec:	4938      	ldr	r1, [pc, #224]	; (80013d0 <alarmTask+0x144>)
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	4613      	mov	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	4413      	add	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	440b      	add	r3, r1
 80012fa:	331e      	adds	r3, #30
 80012fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d12e      	bne.n	8001362 <alarmTask+0xd6>
					{
						printf("\r\nalarm %s on\r\n", alarmsArr[i].alarmName);
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	4613      	mov	r3, r2
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	4413      	add	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4a30      	ldr	r2, [pc, #192]	; (80013d0 <alarmTask+0x144>)
 8001310:	4413      	add	r3, r2
 8001312:	3301      	adds	r3, #1
 8001314:	4619      	mov	r1, r3
 8001316:	482f      	ldr	r0, [pc, #188]	; (80013d4 <alarmTask+0x148>)
 8001318:	f00a ffd4 	bl	800c2c4 <iprintf>
						buzzerOn(&buzzer);
 800131c:	482e      	ldr	r0, [pc, #184]	; (80013d8 <alarmTask+0x14c>)
 800131e:	f000 f92b 	bl	8001578 <buzzerOn>
						startLed(&blueLed);
 8001322:	482e      	ldr	r0, [pc, #184]	; (80013dc <alarmTask+0x150>)
 8001324:	f000 fdf0 	bl	8001f08 <startLed>
						alarmStatus = i; // save the alarm index
 8001328:	4a28      	ldr	r2, [pc, #160]	; (80013cc <alarmTask+0x140>)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	6013      	str	r3, [r2, #0]
						osMutexAcquire(rtcMutex, osWaitForever);
 800132e:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <alarmTask+0x138>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f04f 31ff 	mov.w	r1, #4294967295
 8001336:	4618      	mov	r0, r3
 8001338:	f007 ff7f 	bl	800923a <osMutexAcquire>
						alarmsArr[i].alarmStartTime = rtcGetSeconds(&rtc);
 800133c:	4822      	ldr	r0, [pc, #136]	; (80013c8 <alarmTask+0x13c>)
 800133e:	f001 f9a5 	bl	800268c <rtcGetSeconds>
 8001342:	4603      	mov	r3, r0
 8001344:	4618      	mov	r0, r3
 8001346:	4922      	ldr	r1, [pc, #136]	; (80013d0 <alarmTask+0x144>)
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	4613      	mov	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	4413      	add	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	440b      	add	r3, r1
 8001354:	3320      	adds	r3, #32
 8001356:	6018      	str	r0, [r3, #0]
						osMutexRelease(rtcMutex);
 8001358:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <alarmTask+0x138>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f007 ffb7 	bl	80092d0 <osMutexRelease>
			for(int i = 0; i < countAlarms; i++)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3301      	adds	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <alarmTask+0x154>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	4293      	cmp	r3, r2
 8001372:	dba9      	blt.n	80012c8 <alarmTask+0x3c>
 8001374:	e020      	b.n	80013b8 <alarmTask+0x12c>
			}
		}
		else // alarm is on
		{
			int currSec;
			osMutexAcquire(rtcMutex, osWaitForever);
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <alarmTask+0x138>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f04f 31ff 	mov.w	r1, #4294967295
 800137e:	4618      	mov	r0, r3
 8001380:	f007 ff5b 	bl	800923a <osMutexAcquire>
			currSec = rtcGetSeconds(&rtc);
 8001384:	4810      	ldr	r0, [pc, #64]	; (80013c8 <alarmTask+0x13c>)
 8001386:	f001 f981 	bl	800268c <rtcGetSeconds>
 800138a:	4603      	mov	r3, r0
 800138c:	613b      	str	r3, [r7, #16]
			osMutexRelease(rtcMutex);
 800138e:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <alarmTask+0x138>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f007 ff9c 	bl	80092d0 <osMutexRelease>
			if(currSec - alarmsArr[alarmStatus].alarmStartTime >= MAX_ALARM_TIME )
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <alarmTask+0x140>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	490c      	ldr	r1, [pc, #48]	; (80013d0 <alarmTask+0x144>)
 800139e:	4613      	mov	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	3320      	adds	r3, #32
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b1d      	cmp	r3, #29
 80013b2:	dd01      	ble.n	80013b8 <alarmTask+0x12c>
			{
				turnOffAlarm();
 80013b4:	f7ff fcec 	bl	8000d90 <turnOffAlarm>
			}

		}
		osDelay(1000);
 80013b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013bc:	f007 fe9c 	bl	80090f8 <osDelay>
		osMutexAcquire(rtcMutex, osWaitForever);
 80013c0:	e768      	b.n	8001294 <alarmTask+0x8>
 80013c2:	bf00      	nop
 80013c4:	2000015c 	.word	0x2000015c
 80013c8:	20000118 	.word	0x20000118
 80013cc:	20000000 	.word	0x20000000
 80013d0:	20000160 	.word	0x20000160
 80013d4:	0800d770 	.word	0x0800d770
 80013d8:	20000148 	.word	0x20000148
 80013dc:	20000138 	.word	0x20000138
 80013e0:	200002c8 	.word	0x200002c8

080013e4 <buttonInit>:
#include "Button.h"
#include "main.h"


void buttonInit(Button* button, ButtonName name, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	461a      	mov	r2, r3
 80013f0:	460b      	mov	r3, r1
 80013f2:	72fb      	strb	r3, [r7, #11]
 80013f4:	4613      	mov	r3, r2
 80013f6:	813b      	strh	r3, [r7, #8]
	button->name = name;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	7afa      	ldrb	r2, [r7, #11]
 80013fc:	701a      	strb	r2, [r3, #0]
	button->btnState = UNPRESSED;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2200      	movs	r2, #0
 8001402:	705a      	strb	r2, [r3, #1]
	button->gpioPort = gpioPort;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	605a      	str	r2, [r3, #4]
	button->gpioPin = gpioPin;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	893a      	ldrh	r2, [r7, #8]
 800140e:	811a      	strh	r2, [r3, #8]

}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <buzzerInit>:
								Mi, Mi, Mi, Mi, Mi, Fa, Sol,
								Sol, Mi, Mi, Fa, Re, Re, DO, Mi, Sol, Sol, DO};


void buzzerInit(Buzzer * buzzer, TIM_HandleTypeDef* timer, int channel)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
	buzzer->status = BUZZER_OFF;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
	buzzer->nextNote = NONE;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
	buzzer->pwmTimer = timer;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	605a      	str	r2, [r3, #4]
	buzzer->channel = channel;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	609a      	str	r2, [r3, #8]
	buzzer->delay = 500;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001446:	611a      	str	r2, [r3, #16]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <buzzerTask>:


void buzzerTask (void* argu)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	Buzzer* buzz = (Buzzer*)argu;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		while(buzz->status == BUZZER_OFF)
 8001460:	e001      	b.n	8001466 <buzzerTask+0x12>
		{
			osThreadYield();
 8001462:	f007 fe29 	bl	80090b8 <osThreadYield>
		while(buzz->status == BUZZER_OFF)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d0f9      	beq.n	8001462 <buzzerTask+0xe>
		}
		int freq = music[buzz->nextNote]/2;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	4a3f      	ldr	r2, [pc, #252]	; (8001570 <buzzerTask+0x11c>)
 8001474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001478:	085b      	lsrs	r3, r3, #1
 800147a:	b29b      	uxth	r3, r3
 800147c:	60bb      	str	r3, [r7, #8]
		__HAL_TIM_SET_COUNTER(buzz->pwmTimer,0);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2200      	movs	r2, #0
 8001486:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(buzz->pwmTimer, freq);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	62da      	str	r2, [r3, #44]	; 0x2c
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(buzz->pwmTimer, buzz->channel, (freq/2));
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d109      	bne.n	80014b6 <buzzerTask+0x62>
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	0fda      	lsrs	r2, r3, #31
 80014a6:	4413      	add	r3, r2
 80014a8:	105b      	asrs	r3, r3, #1
 80014aa:	461a      	mov	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	635a      	str	r2, [r3, #52]	; 0x34
 80014b4:	e045      	b.n	8001542 <buzzerTask+0xee>
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d10a      	bne.n	80014d4 <buzzerTask+0x80>
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	0fda      	lsrs	r2, r3, #31
 80014c2:	4413      	add	r3, r2
 80014c4:	105b      	asrs	r3, r3, #1
 80014c6:	4619      	mov	r1, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	460b      	mov	r3, r1
 80014d0:	6393      	str	r3, [r2, #56]	; 0x38
 80014d2:	e036      	b.n	8001542 <buzzerTask+0xee>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d10a      	bne.n	80014f2 <buzzerTask+0x9e>
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	0fda      	lsrs	r2, r3, #31
 80014e0:	4413      	add	r3, r2
 80014e2:	105b      	asrs	r3, r3, #1
 80014e4:	4619      	mov	r1, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	460b      	mov	r3, r1
 80014ee:	63d3      	str	r3, [r2, #60]	; 0x3c
 80014f0:	e027      	b.n	8001542 <buzzerTask+0xee>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b0c      	cmp	r3, #12
 80014f8:	d10a      	bne.n	8001510 <buzzerTask+0xbc>
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	0fda      	lsrs	r2, r3, #31
 80014fe:	4413      	add	r3, r2
 8001500:	105b      	asrs	r3, r3, #1
 8001502:	4619      	mov	r1, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	460b      	mov	r3, r1
 800150c:	6413      	str	r3, [r2, #64]	; 0x40
 800150e:	e018      	b.n	8001542 <buzzerTask+0xee>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b10      	cmp	r3, #16
 8001516:	d10a      	bne.n	800152e <buzzerTask+0xda>
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	0fda      	lsrs	r2, r3, #31
 800151c:	4413      	add	r3, r2
 800151e:	105b      	asrs	r3, r3, #1
 8001520:	4619      	mov	r1, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	460b      	mov	r3, r1
 800152a:	6593      	str	r3, [r2, #88]	; 0x58
 800152c:	e009      	b.n	8001542 <buzzerTask+0xee>
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	0fda      	lsrs	r2, r3, #31
 8001532:	4413      	add	r3, r2
 8001534:	105b      	asrs	r3, r3, #1
 8001536:	4619      	mov	r1, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	460b      	mov	r3, r1
 8001540:	65d3      	str	r3, [r2, #92]	; 0x5c
		buzz->nextNote = (buzz->nextNote+1) % MUSIC_SIZE;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	1c59      	adds	r1, r3, #1
 8001548:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <buzzerTask+0x120>)
 800154a:	fb83 2301 	smull	r2, r3, r3, r1
 800154e:	111a      	asrs	r2, r3, #4
 8001550:	17cb      	asrs	r3, r1, #31
 8001552:	1ad2      	subs	r2, r2, r3
 8001554:	4613      	mov	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	1a9b      	subs	r3, r3, r2
 800155a:	00da      	lsls	r2, r3, #3
 800155c:	1ad2      	subs	r2, r2, r3
 800155e:	1a8a      	subs	r2, r1, r2
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	60da      	str	r2, [r3, #12]
		osDelay(buzz->delay);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	4618      	mov	r0, r3
 800156a:	f007 fdc5 	bl	80090f8 <osDelay>
	{
 800156e:	e777      	b.n	8001460 <buzzerTask+0xc>
 8001570:	20000004 	.word	0x20000004
 8001574:	5397829d 	.word	0x5397829d

08001578 <buzzerOn>:


}

void buzzerOn(Buzzer * buzzer)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	buzzer->status = BUZZER_ON;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(buzzer->pwmTimer);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	4618      	mov	r0, r3
 800158c:	f005 feb4 	bl	80072f8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(buzzer->pwmTimer, buzzer->channel);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4619      	mov	r1, r3
 800159a:	4610      	mov	r0, r2
 800159c:	f005 ff92 	bl	80074c4 <HAL_TIM_PWM_Start>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <buzzerOff>:

void buzzerOff(Buzzer* buzzer)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	buzzer->status = BUZZER_OFF;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop(buzzer->pwmTimer);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f005 ff04 	bl	80073c8 <HAL_TIM_Base_Stop>
	HAL_TIM_PWM_Stop(buzzer->pwmTimer, buzzer->channel);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	4619      	mov	r1, r3
 80015ca:	4610      	mov	r0, r2
 80015cc:	f006 f880 	bl	80076d0 <HAL_TIM_PWM_Stop>
	buzzer->nextNote = NONE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <setDateTime>:
#include <stdlib.h>

extern Rtc rtc;
extern osMutexId_t rtcMutex;

static int setDateTime(DateTime *dateTime, char *param) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
	// if string is empty
	if (*param == '\0')
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <setDateTime+0x16>
	{
		return 1;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e092      	b.n	800171c <setDateTime+0x13c>
	}
	if(strlen(param) != 17)
 80015f6:	6838      	ldr	r0, [r7, #0]
 80015f8:	f7fe fdf4 	bl	80001e4 <strlen>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b11      	cmp	r3, #17
 8001600:	d009      	beq.n	8001616 <setDateTime+0x36>
	{
		printf("date string length = %d\r\n",strlen(param));
 8001602:	6838      	ldr	r0, [r7, #0]
 8001604:	f7fe fdee 	bl	80001e4 <strlen>
 8001608:	4603      	mov	r3, r0
 800160a:	4619      	mov	r1, r3
 800160c:	4845      	ldr	r0, [pc, #276]	; (8001724 <setDateTime+0x144>)
 800160e:	f00a fe59 	bl	800c2c4 <iprintf>
		return 1;
 8001612:	2301      	movs	r3, #1
 8001614:	e082      	b.n	800171c <setDateTime+0x13c>
	}
	int ret = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
	const char s[4] = ". :";
 800161a:	4b43      	ldr	r3, [pc, #268]	; (8001728 <setDateTime+0x148>)
 800161c:	60fb      	str	r3, [r7, #12]
	char *token;

	/* get the first token */
	token = strtok(param, s);
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	4619      	mov	r1, r3
 8001624:	6838      	ldr	r0, [r7, #0]
 8001626:	f00a fef1 	bl	800c40c <strtok>
 800162a:	6138      	str	r0, [r7, #16]

	/* walk through other tokens */
	do {
		dateTime->day = atoi(token);
 800162c:	6938      	ldr	r0, [r7, #16]
 800162e:	f00a fe05 	bl	800c23c <atoi>
 8001632:	4603      	mov	r3, r0
 8001634:	b2da      	uxtb	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	711a      	strb	r2, [r3, #4]
		if (dateTime->day < 0 || dateTime->day > 31)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	791b      	ldrb	r3, [r3, #4]
 800163e:	2b1f      	cmp	r3, #31
 8001640:	d902      	bls.n	8001648 <setDateTime+0x68>
		{
			ret = 1;
 8001642:	2301      	movs	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
			break;
 8001646:	e068      	b.n	800171a <setDateTime+0x13a>
		}
		token = strtok(NULL, s);
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	4619      	mov	r1, r3
 800164e:	2000      	movs	r0, #0
 8001650:	f00a fedc 	bl	800c40c <strtok>
 8001654:	6138      	str	r0, [r7, #16]
		dateTime->month = atoi(token);
 8001656:	6938      	ldr	r0, [r7, #16]
 8001658:	f00a fdf0 	bl	800c23c <atoi>
 800165c:	4603      	mov	r3, r0
 800165e:	b2da      	uxtb	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	715a      	strb	r2, [r3, #5]
		if (dateTime->month < 0 || dateTime->month > 12)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	795b      	ldrb	r3, [r3, #5]
 8001668:	2b0c      	cmp	r3, #12
 800166a:	d902      	bls.n	8001672 <setDateTime+0x92>
		{
			ret = 1;
 800166c:	2301      	movs	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
			break;
 8001670:	e053      	b.n	800171a <setDateTime+0x13a>
		}
		token = strtok(NULL, s);
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	4619      	mov	r1, r3
 8001678:	2000      	movs	r0, #0
 800167a:	f00a fec7 	bl	800c40c <strtok>
 800167e:	6138      	str	r0, [r7, #16]
		dateTime->year = atoi(token);
 8001680:	6938      	ldr	r0, [r7, #16]
 8001682:	f00a fddb 	bl	800c23c <atoi>
 8001686:	4603      	mov	r3, r0
 8001688:	b2da      	uxtb	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	719a      	strb	r2, [r3, #6]
		if (dateTime->year < 0 || dateTime->year > 99)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	799b      	ldrb	r3, [r3, #6]
 8001692:	2b63      	cmp	r3, #99	; 0x63
 8001694:	d902      	bls.n	800169c <setDateTime+0xbc>
		{
			ret = 1;
 8001696:	2301      	movs	r3, #1
 8001698:	617b      	str	r3, [r7, #20]
			break;
 800169a:	e03e      	b.n	800171a <setDateTime+0x13a>
		}
		token = strtok(NULL, s);
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	4619      	mov	r1, r3
 80016a2:	2000      	movs	r0, #0
 80016a4:	f00a feb2 	bl	800c40c <strtok>
 80016a8:	6138      	str	r0, [r7, #16]
		dateTime->hours = atoi(token);
 80016aa:	6938      	ldr	r0, [r7, #16]
 80016ac:	f00a fdc6 	bl	800c23c <atoi>
 80016b0:	4603      	mov	r3, r0
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	709a      	strb	r2, [r3, #2]
		if (dateTime->hours < 0 || dateTime->hours > 23)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	789b      	ldrb	r3, [r3, #2]
 80016bc:	2b17      	cmp	r3, #23
 80016be:	d902      	bls.n	80016c6 <setDateTime+0xe6>
		{
			ret = 1;
 80016c0:	2301      	movs	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
			break;
 80016c4:	e029      	b.n	800171a <setDateTime+0x13a>
		}

		token = strtok(NULL, s);
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	4619      	mov	r1, r3
 80016cc:	2000      	movs	r0, #0
 80016ce:	f00a fe9d 	bl	800c40c <strtok>
 80016d2:	6138      	str	r0, [r7, #16]
		dateTime->min = atoi(token);
 80016d4:	6938      	ldr	r0, [r7, #16]
 80016d6:	f00a fdb1 	bl	800c23c <atoi>
 80016da:	4603      	mov	r3, r0
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	705a      	strb	r2, [r3, #1]
		if (dateTime->min < 0 || dateTime->min > 59)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	785b      	ldrb	r3, [r3, #1]
 80016e6:	2b3b      	cmp	r3, #59	; 0x3b
 80016e8:	d902      	bls.n	80016f0 <setDateTime+0x110>
		{
			ret = 1;
 80016ea:	2301      	movs	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
			break;
 80016ee:	e014      	b.n	800171a <setDateTime+0x13a>
		}
		token = strtok(NULL, s);
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	4619      	mov	r1, r3
 80016f6:	2000      	movs	r0, #0
 80016f8:	f00a fe88 	bl	800c40c <strtok>
 80016fc:	6138      	str	r0, [r7, #16]
		dateTime->sec = atoi(token);
 80016fe:	6938      	ldr	r0, [r7, #16]
 8001700:	f00a fd9c 	bl	800c23c <atoi>
 8001704:	4603      	mov	r3, r0
 8001706:	b2da      	uxtb	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	701a      	strb	r2, [r3, #0]
		if (dateTime->sec < 0 || dateTime->sec > 59)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b3b      	cmp	r3, #59	; 0x3b
 8001712:	d902      	bls.n	800171a <setDateTime+0x13a>
		{
			ret = 1;
 8001714:	2301      	movs	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
			break;
 8001718:	bf00      	nop
		}

	} while (0);

	return ret;
 800171a:	697b      	ldr	r3, [r7, #20]

}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	0800d780 	.word	0x0800d780
 8001728:	003a202e 	.word	0x003a202e

0800172c <initDateTime>:

static void initDateTime(void* obj, char* param)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
	Rtc *rtc = (Rtc*)obj;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	61fb      	str	r3, [r7, #28]
	DateTime dateTime;
	HAL_StatusTypeDef status;
	char strHelp[] = "-h";
 800173a:	4a24      	ldr	r2, [pc, #144]	; (80017cc <initDateTime+0xa0>)
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	6812      	ldr	r2, [r2, #0]
 8001742:	4611      	mov	r1, r2
 8001744:	8019      	strh	r1, [r3, #0]
 8001746:	3302      	adds	r3, #2
 8001748:	0c12      	lsrs	r2, r2, #16
 800174a:	701a      	strb	r2, [r3, #0]
	if(strcmp(param,strHelp) == 0)
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	4619      	mov	r1, r3
 8001752:	6838      	ldr	r0, [r7, #0]
 8001754:	f7fe fd3c 	bl	80001d0 <strcmp>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d106      	bne.n	800176c <initDateTime+0x40>
	{
		printf("date format\r\n");
 800175e:	481c      	ldr	r0, [pc, #112]	; (80017d0 <initDateTime+0xa4>)
 8001760:	f00a fe36 	bl	800c3d0 <puts>
		printf("dd.mm.yy HH:MM:SS\r\n");
 8001764:	481b      	ldr	r0, [pc, #108]	; (80017d4 <initDateTime+0xa8>)
 8001766:	f00a fe33 	bl	800c3d0 <puts>
 800176a:	e02c      	b.n	80017c6 <initDateTime+0x9a>
		return;
	}
	if(setDateTime(&dateTime,param) == 0)
 800176c:	f107 0310 	add.w	r3, r7, #16
 8001770:	6839      	ldr	r1, [r7, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff ff34 	bl	80015e0 <setDateTime>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d120      	bne.n	80017c0 <initDateTime+0x94>
	{
		osMutexAcquire(rtcMutex, osWaitForever);
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <initDateTime+0xac>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f04f 31ff 	mov.w	r1, #4294967295
 8001786:	4618      	mov	r0, r3
 8001788:	f007 fd57 	bl	800923a <osMutexAcquire>
		status = rtcSetTime(rtc,&dateTime);
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	4619      	mov	r1, r3
 8001792:	69f8      	ldr	r0, [r7, #28]
 8001794:	f000 ffc8 	bl	8002728 <rtcSetTime>
 8001798:	4603      	mov	r3, r0
 800179a:	76fb      	strb	r3, [r7, #27]
		osMutexRelease(rtcMutex);
 800179c:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <initDateTime+0xac>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f007 fd95 	bl	80092d0 <osMutexRelease>
		if(status == HAL_OK)
 80017a6:	7efb      	ldrb	r3, [r7, #27]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d103      	bne.n	80017b4 <initDateTime+0x88>
		{
			printf("date time set Successfully\r\n");
 80017ac:	480b      	ldr	r0, [pc, #44]	; (80017dc <initDateTime+0xb0>)
 80017ae:	f00a fe0f 	bl	800c3d0 <puts>
 80017b2:	e008      	b.n	80017c6 <initDateTime+0x9a>
		}
		else
		{
			printf("Error set date time status code = %d\r\n",status);
 80017b4:	7efb      	ldrb	r3, [r7, #27]
 80017b6:	4619      	mov	r1, r3
 80017b8:	4809      	ldr	r0, [pc, #36]	; (80017e0 <initDateTime+0xb4>)
 80017ba:	f00a fd83 	bl	800c2c4 <iprintf>
 80017be:	e002      	b.n	80017c6 <initDateTime+0x9a>
		}
	}
	else
	{
		printf("Invalid date time, Try again \r\n");
 80017c0:	4808      	ldr	r0, [pc, #32]	; (80017e4 <initDateTime+0xb8>)
 80017c2:	f00a fe05 	bl	800c3d0 <puts>
	}
}
 80017c6:	3720      	adds	r7, #32
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	0800d824 	.word	0x0800d824
 80017d0:	0800d79c 	.word	0x0800d79c
 80017d4:	0800d7ac 	.word	0x0800d7ac
 80017d8:	2000015c 	.word	0x2000015c
 80017dc:	0800d7c0 	.word	0x0800d7c0
 80017e0:	0800d7dc 	.word	0x0800d7dc
 80017e4:	0800d804 	.word	0x0800d804

080017e8 <showDateCmd>:

static void showDateCmd(void * obj, char * param)
{
 80017e8:	b5b0      	push	{r4, r5, r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af04      	add	r7, sp, #16
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
	Rtc *rtc = (Rtc*)obj;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	617b      	str	r3, [r7, #20]
	(void)param;
	DateTime dateTime;
	osMutexAcquire(rtcMutex, osWaitForever);
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <showDateCmd+0x60>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f04f 31ff 	mov.w	r1, #4294967295
 80017fe:	4618      	mov	r0, r3
 8001800:	f007 fd1b 	bl	800923a <osMutexAcquire>
	rtcGetTime(rtc, &dateTime);
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	4619      	mov	r1, r3
 800180a:	6978      	ldr	r0, [r7, #20]
 800180c:	f000 feea 	bl	80025e4 <rtcGetTime>
	osMutexRelease(rtcMutex);
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <showDateCmd+0x60>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f007 fd5b 	bl	80092d0 <osMutexRelease>
	printf("%02d:%02d:%02d %02d.%02d.%02d\r\n",
			dateTime.hours, dateTime.min, dateTime.sec,
 800181a:	7bbb      	ldrb	r3, [r7, #14]
	printf("%02d:%02d:%02d %02d.%02d.%02d\r\n",
 800181c:	4618      	mov	r0, r3
			dateTime.hours, dateTime.min, dateTime.sec,
 800181e:	7b7b      	ldrb	r3, [r7, #13]
	printf("%02d:%02d:%02d %02d.%02d.%02d\r\n",
 8001820:	461c      	mov	r4, r3
			dateTime.hours, dateTime.min, dateTime.sec,
 8001822:	7b3b      	ldrb	r3, [r7, #12]
	printf("%02d:%02d:%02d %02d.%02d.%02d\r\n",
 8001824:	461d      	mov	r5, r3
			dateTime.day, dateTime.month, dateTime.year);
 8001826:	7c3b      	ldrb	r3, [r7, #16]
 8001828:	7c7a      	ldrb	r2, [r7, #17]
 800182a:	7cb9      	ldrb	r1, [r7, #18]
	printf("%02d:%02d:%02d %02d.%02d.%02d\r\n",
 800182c:	9102      	str	r1, [sp, #8]
 800182e:	9201      	str	r2, [sp, #4]
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	462b      	mov	r3, r5
 8001834:	4622      	mov	r2, r4
 8001836:	4601      	mov	r1, r0
 8001838:	4804      	ldr	r0, [pc, #16]	; (800184c <showDateCmd+0x64>)
 800183a:	f00a fd43 	bl	800c2c4 <iprintf>

}
 800183e:	bf00      	nop
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bdb0      	pop	{r4, r5, r7, pc}
 8001846:	bf00      	nop
 8001848:	2000015c 	.word	0x2000015c
 800184c:	0800d828 	.word	0x0800d828

08001850 <insertAlarmToArr>:

static int insertAlarmToArr(Alarm* alarm, char* param)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
	int ret = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
	const char s[4] = ". :";
 800185e:	4b5a      	ldr	r3, [pc, #360]	; (80019c8 <insertAlarmToArr+0x178>)
 8001860:	60fb      	str	r3, [r7, #12]
	char *token;

	/* get the first token */
	token = strtok(param, s);
 8001862:	f107 030c 	add.w	r3, r7, #12
 8001866:	4619      	mov	r1, r3
 8001868:	6838      	ldr	r0, [r7, #0]
 800186a:	f00a fdcf 	bl	800c40c <strtok>
 800186e:	6138      	str	r0, [r7, #16]

	/* walk through other tokens */
	do {
		// CHECK LEN!!!!
		if (strlen(token) > ALARM_NAME_LENGTH){
 8001870:	6938      	ldr	r0, [r7, #16]
 8001872:	f7fe fcb7 	bl	80001e4 <strlen>
 8001876:	4603      	mov	r3, r0
 8001878:	2b14      	cmp	r3, #20
 800187a:	d902      	bls.n	8001882 <insertAlarmToArr+0x32>
			ret = 1;
 800187c:	2301      	movs	r3, #1
 800187e:	617b      	str	r3, [r7, #20]
			break;
 8001880:	e09c      	b.n	80019bc <insertAlarmToArr+0x16c>
		}
		if(nameAlreadyExists(token) != -1){
 8001882:	6938      	ldr	r0, [r7, #16]
 8001884:	f7ff fca8 	bl	80011d8 <nameAlreadyExists>
 8001888:	4603      	mov	r3, r0
 800188a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800188e:	d005      	beq.n	800189c <insertAlarmToArr+0x4c>
			printf("Alarm name must be unique!!\r\n");
 8001890:	484e      	ldr	r0, [pc, #312]	; (80019cc <insertAlarmToArr+0x17c>)
 8001892:	f00a fd9d 	bl	800c3d0 <puts>
			ret = 1;
 8001896:	2301      	movs	r3, #1
 8001898:	617b      	str	r3, [r7, #20]
			break;
 800189a:	e08f      	b.n	80019bc <insertAlarmToArr+0x16c>
		}
		strcpy(alarm->alarmName,token);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3301      	adds	r3, #1
 80018a0:	6939      	ldr	r1, [r7, #16]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f00a fda9 	bl	800c3fa <strcpy>
		token = strtok(NULL, s);
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	4619      	mov	r1, r3
 80018ae:	2000      	movs	r0, #0
 80018b0:	f00a fdac 	bl	800c40c <strtok>
 80018b4:	6138      	str	r0, [r7, #16]
		alarm->alarmTime.day = atoi(token);
 80018b6:	6938      	ldr	r0, [r7, #16]
 80018b8:	f00a fcc0 	bl	800c23c <atoi>
 80018bc:	4603      	mov	r3, r0
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	765a      	strb	r2, [r3, #25]
		if (alarm->alarmTime.day < 0 || alarm->alarmTime.day > 32) {
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	7e5b      	ldrb	r3, [r3, #25]
 80018c8:	2b20      	cmp	r3, #32
 80018ca:	d902      	bls.n	80018d2 <insertAlarmToArr+0x82>
			ret = 1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
			break;
 80018d0:	e074      	b.n	80019bc <insertAlarmToArr+0x16c>
		}
		token = strtok(NULL, s);
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	4619      	mov	r1, r3
 80018d8:	2000      	movs	r0, #0
 80018da:	f00a fd97 	bl	800c40c <strtok>
 80018de:	6138      	str	r0, [r7, #16]
		alarm->alarmTime.month = atoi(token);
 80018e0:	6938      	ldr	r0, [r7, #16]
 80018e2:	f00a fcab 	bl	800c23c <atoi>
 80018e6:	4603      	mov	r3, r0
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	769a      	strb	r2, [r3, #26]
		if (alarm->alarmTime.month< 0 || alarm->alarmTime.month > 12) {
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	7e9b      	ldrb	r3, [r3, #26]
 80018f2:	2b0c      	cmp	r3, #12
 80018f4:	d902      	bls.n	80018fc <insertAlarmToArr+0xac>
			ret = 1;
 80018f6:	2301      	movs	r3, #1
 80018f8:	617b      	str	r3, [r7, #20]
			break;
 80018fa:	e05f      	b.n	80019bc <insertAlarmToArr+0x16c>
		}
		token = strtok(NULL, s);
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	4619      	mov	r1, r3
 8001902:	2000      	movs	r0, #0
 8001904:	f00a fd82 	bl	800c40c <strtok>
 8001908:	6138      	str	r0, [r7, #16]
		alarm->alarmTime.year = atoi(token);
 800190a:	6938      	ldr	r0, [r7, #16]
 800190c:	f00a fc96 	bl	800c23c <atoi>
 8001910:	4603      	mov	r3, r0
 8001912:	b2da      	uxtb	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	76da      	strb	r2, [r3, #27]
		if (alarm->alarmTime.year < 0 || alarm->alarmTime.year > 99) {
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7edb      	ldrb	r3, [r3, #27]
 800191c:	2b63      	cmp	r3, #99	; 0x63
 800191e:	d902      	bls.n	8001926 <insertAlarmToArr+0xd6>
			ret = 1;
 8001920:	2301      	movs	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
			break;
 8001924:	e04a      	b.n	80019bc <insertAlarmToArr+0x16c>
		}

		token = strtok(NULL, s);
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	4619      	mov	r1, r3
 800192c:	2000      	movs	r0, #0
 800192e:	f00a fd6d 	bl	800c40c <strtok>
 8001932:	6138      	str	r0, [r7, #16]
		alarm->alarmTime.hours = atoi(token);
 8001934:	6938      	ldr	r0, [r7, #16]
 8001936:	f00a fc81 	bl	800c23c <atoi>
 800193a:	4603      	mov	r3, r0
 800193c:	b2da      	uxtb	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	75da      	strb	r2, [r3, #23]
		if (alarm->alarmTime.hours < 0 || alarm->alarmTime.hours > 23) {
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	7ddb      	ldrb	r3, [r3, #23]
 8001946:	2b17      	cmp	r3, #23
 8001948:	d902      	bls.n	8001950 <insertAlarmToArr+0x100>
			ret = 1;
 800194a:	2301      	movs	r3, #1
 800194c:	617b      	str	r3, [r7, #20]
			break;
 800194e:	e035      	b.n	80019bc <insertAlarmToArr+0x16c>
		}
		token = strtok(NULL, s);
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	4619      	mov	r1, r3
 8001956:	2000      	movs	r0, #0
 8001958:	f00a fd58 	bl	800c40c <strtok>
 800195c:	6138      	str	r0, [r7, #16]
		alarm->alarmTime.min = atoi(token);
 800195e:	6938      	ldr	r0, [r7, #16]
 8001960:	f00a fc6c 	bl	800c23c <atoi>
 8001964:	4603      	mov	r3, r0
 8001966:	b2da      	uxtb	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	759a      	strb	r2, [r3, #22]
		alarm->alarmTime.sec = 0;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	755a      	strb	r2, [r3, #21]
		if (alarm->alarmTime.min < 0 || alarm->alarmTime.min > 59) {
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	7d9b      	ldrb	r3, [r3, #22]
 8001976:	2b3b      	cmp	r3, #59	; 0x3b
 8001978:	d902      	bls.n	8001980 <insertAlarmToArr+0x130>
			ret = 1;
 800197a:	2301      	movs	r3, #1
 800197c:	617b      	str	r3, [r7, #20]
			break;
 800197e:	e01d      	b.n	80019bc <insertAlarmToArr+0x16c>
		}
		token = strtok(NULL, s);
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	4619      	mov	r1, r3
 8001986:	2000      	movs	r0, #0
 8001988:	f00a fd40 	bl	800c40c <strtok>
 800198c:	6138      	str	r0, [r7, #16]
		alarm->melodey = atoi(token);
 800198e:	6938      	ldr	r0, [r7, #16]
 8001990:	f00a fc54 	bl	800c23c <atoi>
 8001994:	4603      	mov	r3, r0
 8001996:	b2da      	uxtb	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	77da      	strb	r2, [r3, #31]
		if (alarm->melodey < 0 || alarm->melodey > 2) {
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7fdb      	ldrb	r3, [r3, #31]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d902      	bls.n	80019aa <insertAlarmToArr+0x15a>
			ret = 1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
			break;
 80019a8:	e008      	b.n	80019bc <insertAlarmToArr+0x16c>
		}
		alarm->alarmActive = ON;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	779a      	strb	r2, [r3, #30]
		alarm->alarmSnooze = OFF;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	22ff      	movs	r2, #255	; 0xff
 80019b4:	775a      	strb	r2, [r3, #29]
		alarm->inUse = 1;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]

	} while (0);


	return ret;
 80019bc:	697b      	ldr	r3, [r7, #20]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	003a202e 	.word	0x003a202e
 80019cc:	0800d848 	.word	0x0800d848

080019d0 <addAlarmCmd>:

static void addAlarmCmd (void * obj, char* param)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08e      	sub	sp, #56	; 0x38
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
	Alarm alarm;
	(void)obj;
	// if string is empty
	if (*param == '\0') {
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d028      	beq.n	8001a34 <addAlarmCmd+0x64>
		return;
	}
	char strHelp[] = "-h";
 80019e2:	4a16      	ldr	r2, [pc, #88]	; (8001a3c <addAlarmCmd+0x6c>)
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	4611      	mov	r1, r2
 80019ec:	8019      	strh	r1, [r3, #0]
 80019ee:	3302      	adds	r3, #2
 80019f0:	0c12      	lsrs	r2, r2, #16
 80019f2:	701a      	strb	r2, [r3, #0]
	if(strcmp(param,strHelp) == 0){
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	4619      	mov	r1, r3
 80019fa:	6838      	ldr	r0, [r7, #0]
 80019fc:	f7fe fbe8 	bl	80001d0 <strcmp>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d106      	bne.n	8001a14 <addAlarmCmd+0x44>
		printf("addAlarm format\r\n");
 8001a06:	480e      	ldr	r0, [pc, #56]	; (8001a40 <addAlarmCmd+0x70>)
 8001a08:	f00a fce2 	bl	800c3d0 <puts>
		printf("[AlarmName] dd.mm.yy HH:MM [melodey 0-2]\r\n");
 8001a0c:	480d      	ldr	r0, [pc, #52]	; (8001a44 <addAlarmCmd+0x74>)
 8001a0e:	f00a fcdf 	bl	800c3d0 <puts>
		return;
 8001a12:	e010      	b.n	8001a36 <addAlarmCmd+0x66>
	}
	int status;
	status = insertAlarmToArr(&alarm, param);
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	6839      	ldr	r1, [r7, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ff18 	bl	8001850 <insertAlarmToArr>
 8001a20:	6378      	str	r0, [r7, #52]	; 0x34
	if(status == 0)
 8001a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d106      	bne.n	8001a36 <addAlarmCmd+0x66>
	{
		addAlarm(&alarm);
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fa9d 	bl	8000f6c <addAlarm>
 8001a32:	e000      	b.n	8001a36 <addAlarmCmd+0x66>
		return;
 8001a34:	bf00      	nop
	}
}
 8001a36:	3738      	adds	r7, #56	; 0x38
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	0800d824 	.word	0x0800d824
 8001a40:	0800d868 	.word	0x0800d868
 8001a44:	0800d87c 	.word	0x0800d87c

08001a48 <listCmd>:

static void listCmd (void * obj, char* param)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
	(void)obj;
	(void)param;
	printAlarms();
 8001a52:	f7ff fb4f 	bl	80010f4 <printAlarms>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <delCmd>:

static void delCmd (void* obj, char* param)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
	(void)obj;
	char strHelp[] = "-h";
 8001a6a:	4a13      	ldr	r2, [pc, #76]	; (8001ab8 <delCmd+0x58>)
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	6812      	ldr	r2, [r2, #0]
 8001a72:	4611      	mov	r1, r2
 8001a74:	8019      	strh	r1, [r3, #0]
 8001a76:	3302      	adds	r3, #2
 8001a78:	0c12      	lsrs	r2, r2, #16
 8001a7a:	701a      	strb	r2, [r3, #0]
	if(strcmp(param,strHelp) == 0){
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	4619      	mov	r1, r3
 8001a82:	6838      	ldr	r0, [r7, #0]
 8001a84:	f7fe fba4 	bl	80001d0 <strcmp>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d103      	bne.n	8001a96 <delCmd+0x36>
		printf("delete [Alarm name]\r\n");
 8001a8e:	480b      	ldr	r0, [pc, #44]	; (8001abc <delCmd+0x5c>)
 8001a90:	f00a fc9e 	bl	800c3d0 <puts>
		return;
 8001a94:	e00c      	b.n	8001ab0 <delCmd+0x50>
	}
	if (strlen(param) > ALARM_NAME_LENGTH){
 8001a96:	6838      	ldr	r0, [r7, #0]
 8001a98:	f7fe fba4 	bl	80001e4 <strlen>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b14      	cmp	r3, #20
 8001aa0:	d903      	bls.n	8001aaa <delCmd+0x4a>
		printf("alarm name to long\r\n");
 8001aa2:	4807      	ldr	r0, [pc, #28]	; (8001ac0 <delCmd+0x60>)
 8001aa4:	f00a fc94 	bl	800c3d0 <puts>
		return;
 8001aa8:	e002      	b.n	8001ab0 <delCmd+0x50>
	}
	deleteAlarm(param);
 8001aaa:	6838      	ldr	r0, [r7, #0]
 8001aac:	f7ff fa8e 	bl	8000fcc <deleteAlarm>
}
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	0800d824 	.word	0x0800d824
 8001abc:	0800d8a8 	.word	0x0800d8a8
 8001ac0:	0800d8c0 	.word	0x0800d8c0

08001ac4 <stopCmd>:

static void stopCmd (void* obj, char* param)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
	(void)obj;
	(void)param;
	turnOffAlarm();
 8001ace:	f7ff f95f 	bl	8000d90 <turnOffAlarm>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <clearAllCmd>:

static void clearAllCmd (void* obj, char* param)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
	(void)obj;
	(void)param;
	clearList();
 8001ae4:	f7ff fada 	bl	800109c <clearList>
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <cliInit>:


void cliInit()
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	registerCommand("date",initDateTime,&rtc);
 8001af4:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <cliInit+0x50>)
 8001af6:	4913      	ldr	r1, [pc, #76]	; (8001b44 <cliInit+0x54>)
 8001af8:	4813      	ldr	r0, [pc, #76]	; (8001b48 <cliInit+0x58>)
 8001afa:	f000 f83f 	bl	8001b7c <registerCommand>
	registerCommand("showDate",showDateCmd,&rtc);
 8001afe:	4a10      	ldr	r2, [pc, #64]	; (8001b40 <cliInit+0x50>)
 8001b00:	4912      	ldr	r1, [pc, #72]	; (8001b4c <cliInit+0x5c>)
 8001b02:	4813      	ldr	r0, [pc, #76]	; (8001b50 <cliInit+0x60>)
 8001b04:	f000 f83a 	bl	8001b7c <registerCommand>
	registerCommand("add",addAlarmCmd,NULL);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	4912      	ldr	r1, [pc, #72]	; (8001b54 <cliInit+0x64>)
 8001b0c:	4812      	ldr	r0, [pc, #72]	; (8001b58 <cliInit+0x68>)
 8001b0e:	f000 f835 	bl	8001b7c <registerCommand>
	registerCommand("list",listCmd,NULL);
 8001b12:	2200      	movs	r2, #0
 8001b14:	4911      	ldr	r1, [pc, #68]	; (8001b5c <cliInit+0x6c>)
 8001b16:	4812      	ldr	r0, [pc, #72]	; (8001b60 <cliInit+0x70>)
 8001b18:	f000 f830 	bl	8001b7c <registerCommand>
	registerCommand("del",delCmd,NULL);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	4911      	ldr	r1, [pc, #68]	; (8001b64 <cliInit+0x74>)
 8001b20:	4811      	ldr	r0, [pc, #68]	; (8001b68 <cliInit+0x78>)
 8001b22:	f000 f82b 	bl	8001b7c <registerCommand>
	registerCommand("stop",stopCmd,NULL);
 8001b26:	2200      	movs	r2, #0
 8001b28:	4910      	ldr	r1, [pc, #64]	; (8001b6c <cliInit+0x7c>)
 8001b2a:	4811      	ldr	r0, [pc, #68]	; (8001b70 <cliInit+0x80>)
 8001b2c:	f000 f826 	bl	8001b7c <registerCommand>
	registerCommand("clearAll",clearAllCmd,NULL);
 8001b30:	2200      	movs	r2, #0
 8001b32:	4910      	ldr	r1, [pc, #64]	; (8001b74 <cliInit+0x84>)
 8001b34:	4810      	ldr	r0, [pc, #64]	; (8001b78 <cliInit+0x88>)
 8001b36:	f000 f821 	bl	8001b7c <registerCommand>
	//registerCommand("edit",editCmd,NULL);
	//registerCommand("melody",melodyCmd,NULL);
	//registerCommand("help", helpCmd, NULL);
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000118 	.word	0x20000118
 8001b44:	0800172d 	.word	0x0800172d
 8001b48:	0800d8d4 	.word	0x0800d8d4
 8001b4c:	080017e9 	.word	0x080017e9
 8001b50:	0800d8dc 	.word	0x0800d8dc
 8001b54:	080019d1 	.word	0x080019d1
 8001b58:	0800d8e8 	.word	0x0800d8e8
 8001b5c:	08001a49 	.word	0x08001a49
 8001b60:	0800d8ec 	.word	0x0800d8ec
 8001b64:	08001a61 	.word	0x08001a61
 8001b68:	0800d8f4 	.word	0x0800d8f4
 8001b6c:	08001ac5 	.word	0x08001ac5
 8001b70:	0800d8f8 	.word	0x0800d8f8
 8001b74:	08001adb 	.word	0x08001adb
 8001b78:	0800d900 	.word	0x0800d900

08001b7c <registerCommand>:
int cmdcount = 0;
static Command commands[MAX_COMMANDS];
static int commandsCount = 0;

void registerCommand(const char * name, HandlerFunc func, void * obj)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
	if (commandsCount >= MAX_COMMANDS) {
 8001b88:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <registerCommand+0x6c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b13      	cmp	r3, #19
 8001b8e:	dd03      	ble.n	8001b98 <registerCommand+0x1c>
		printf("Too many commands, cannot register\r\n");
 8001b90:	4816      	ldr	r0, [pc, #88]	; (8001bec <registerCommand+0x70>)
 8001b92:	f00a fc1d 	bl	800c3d0 <puts>
		return;
 8001b96:	e024      	b.n	8001be2 <registerCommand+0x66>
	}
	commands[commandsCount].name = name;
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <registerCommand+0x6c>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4914      	ldr	r1, [pc, #80]	; (8001bf0 <registerCommand+0x74>)
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	601a      	str	r2, [r3, #0]
	commands[commandsCount].func = func;
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <registerCommand+0x6c>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	490f      	ldr	r1, [pc, #60]	; (8001bf0 <registerCommand+0x74>)
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	440b      	add	r3, r1
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	601a      	str	r2, [r3, #0]
	commands[commandsCount].obj = obj;
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <registerCommand+0x6c>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	490a      	ldr	r1, [pc, #40]	; (8001bf0 <registerCommand+0x74>)
 8001bc8:	4613      	mov	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	3308      	adds	r3, #8
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	601a      	str	r2, [r3, #0]
	commandsCount++;
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <registerCommand+0x6c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	4a02      	ldr	r2, [pc, #8]	; (8001be8 <registerCommand+0x6c>)
 8001be0:	6013      	str	r3, [r2, #0]
}
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000424 	.word	0x20000424
 8001bec:	0800d90c 	.word	0x0800d90c
 8001bf0:	20000334 	.word	0x20000334

08001bf4 <commTask>:
	}
}


void commTask(void *argument)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(commTaskReady(&huart2))
 8001bfc:	4804      	ldr	r0, [pc, #16]	; (8001c10 <commTask+0x1c>)
 8001bfe:	f000 f809 	bl	8001c14 <commTaskReady>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f9      	beq.n	8001bfc <commTask+0x8>
		{
			handleCommand();
 8001c08:	f000 f858 	bl	8001cbc <handleCommand>
		if(commTaskReady(&huart2))
 8001c0c:	e7f6      	b.n	8001bfc <commTask+0x8>
 8001c0e:	bf00      	nop
 8001c10:	20000580 	.word	0x20000580

08001c14 <commTaskReady>:
	}

}

int commTaskReady(UART_HandleTypeDef* huart2)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Status = HAL_UART_Receive(huart2, &ch, 1, 0);
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	2201      	movs	r2, #1
 8001c20:	4922      	ldr	r1, [pc, #136]	; (8001cac <commTaskReady+0x98>)
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f006 fbfe 	bl	8008424 <HAL_UART_Receive>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	73fb      	strb	r3, [r7, #15]
	if (Status == HAL_TIMEOUT)
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d101      	bne.n	8001c36 <commTaskReady+0x22>
	{
		osThreadYield();
 8001c32:	f007 fa41 	bl	80090b8 <osThreadYield>
	}

	if (Status != HAL_OK) {
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <commTaskReady+0x2c>
		return 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	e030      	b.n	8001ca2 <commTaskReady+0x8e>
	}
	if (ch != '\r' && ch != '\n')
 8001c40:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <commTaskReady+0x98>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b0d      	cmp	r3, #13
 8001c46:	d01c      	beq.n	8001c82 <commTaskReady+0x6e>
 8001c48:	4b18      	ldr	r3, [pc, #96]	; (8001cac <commTaskReady+0x98>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b0a      	cmp	r3, #10
 8001c4e:	d018      	beq.n	8001c82 <commTaskReady+0x6e>
	{
		HAL_UART_Transmit(huart2, &ch, 1, 0xFFFF);
 8001c50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c54:	2201      	movs	r2, #1
 8001c56:	4915      	ldr	r1, [pc, #84]	; (8001cac <commTaskReady+0x98>)
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f006 fb4f 	bl	80082fc <HAL_UART_Transmit>

		if (cmdcount >= MAX_BUFFER_LENGTH)
 8001c5e:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <commTaskReady+0x9c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b63      	cmp	r3, #99	; 0x63
 8001c64:	dd02      	ble.n	8001c6c <commTaskReady+0x58>
		{
			cmdcount = 0;
 8001c66:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <commTaskReady+0x9c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8001c6c:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <commTaskReady+0x9c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	490f      	ldr	r1, [pc, #60]	; (8001cb0 <commTaskReady+0x9c>)
 8001c74:	600a      	str	r2, [r1, #0]
 8001c76:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <commTaskReady+0x98>)
 8001c78:	7811      	ldrb	r1, [r2, #0]
 8001c7a:	4a0e      	ldr	r2, [pc, #56]	; (8001cb4 <commTaskReady+0xa0>)
 8001c7c:	54d1      	strb	r1, [r2, r3]
		return 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e00f      	b.n	8001ca2 <commTaskReady+0x8e>
	}
	HAL_UART_Transmit(huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8001c82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c86:	2202      	movs	r2, #2
 8001c88:	490b      	ldr	r1, [pc, #44]	; (8001cb8 <commTaskReady+0xa4>)
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f006 fb36 	bl	80082fc <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8001c90:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <commTaskReady+0x9c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <commTaskReady+0xa0>)
 8001c96:	2100      	movs	r1, #0
 8001c98:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8001c9a:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <commTaskReady+0x9c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
	return 1;
 8001ca0:	2301      	movs	r3, #1
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200002c9 	.word	0x200002c9
 8001cb0:	20000330 	.word	0x20000330
 8001cb4:	200002cc 	.word	0x200002cc
 8001cb8:	0800d950 	.word	0x0800d950

08001cbc <handleCommand>:

void handleCommand()
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
	char * param = NULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]

	// find space to split a command to a command name and parameters
	char * delimPtr = strchr((const char*)cmdbuffer, ' ');
 8001cc6:	2120      	movs	r1, #32
 8001cc8:	482a      	ldr	r0, [pc, #168]	; (8001d74 <handleCommand+0xb8>)
 8001cca:	f00a fb89 	bl	800c3e0 <strchr>
 8001cce:	6078      	str	r0, [r7, #4]
	if (delimPtr != NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d017      	beq.n	8001d06 <handleCommand+0x4a>
	{
		// put null character to split command name and parameters
		*delimPtr = '\0';
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
		param = delimPtr + 1;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	60fb      	str	r3, [r7, #12]

		// find first non space character - it's parameters beginning
		while (*param && *param == ' ')
 8001ce2:	e002      	b.n	8001cea <handleCommand+0x2e>
		{
			param++;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	60fb      	str	r3, [r7, #12]
		while (*param && *param == ' ')
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <handleCommand+0x3e>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b20      	cmp	r3, #32
 8001cf8:	d0f4      	beq.n	8001ce4 <handleCommand+0x28>
		}

		if (*param == '\0')
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <handleCommand+0x4a>
		{
			param = NULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
		}
	}

	for (int i = 0; i < commandsCount; i++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	e027      	b.n	8001d5c <handleCommand+0xa0>
	{
		if (strcmp(commands[i].name, (char *)cmdbuffer) == 0)
 8001d0c:	491a      	ldr	r1, [pc, #104]	; (8001d78 <handleCommand+0xbc>)
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4915      	ldr	r1, [pc, #84]	; (8001d74 <handleCommand+0xb8>)
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fa56 	bl	80001d0 <strcmp>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d115      	bne.n	8001d56 <handleCommand+0x9a>
		{
			commands[i].func(commands[i].obj, param);
 8001d2a:	4913      	ldr	r1, [pc, #76]	; (8001d78 <handleCommand+0xbc>)
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	3304      	adds	r3, #4
 8001d3a:	681c      	ldr	r4, [r3, #0]
 8001d3c:	490e      	ldr	r1, [pc, #56]	; (8001d78 <handleCommand+0xbc>)
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	4613      	mov	r3, r2
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	3308      	adds	r3, #8
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68f9      	ldr	r1, [r7, #12]
 8001d50:	4618      	mov	r0, r3
 8001d52:	47a0      	blx	r4
			return;
 8001d54:	e00a      	b.n	8001d6c <handleCommand+0xb0>
	for (int i = 0; i < commandsCount; i++)
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <handleCommand+0xc0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	dbd2      	blt.n	8001d0c <handleCommand+0x50>
		}
	}

	printf("Invalid command\r\n");
 8001d66:	4806      	ldr	r0, [pc, #24]	; (8001d80 <handleCommand+0xc4>)
 8001d68:	f00a fb32 	bl	800c3d0 <puts>
}
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd90      	pop	{r4, r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200002cc 	.word	0x200002cc
 8001d78:	20000334 	.word	0x20000334
 8001d7c:	20000424 	.word	0x20000424
 8001d80:	0800d954 	.word	0x0800d954

08001d84 <erasePage>:
#include "flash.h"
#include "alarmInfo.h"


HAL_StatusTypeDef erasePage(int bank, int page, int NbPages)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
	HAL_FLASH_Unlock();
 8001d90:	f002 fd94 	bl	80048bc <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef flashErase;
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61bb      	str	r3, [r7, #24]
	flashErase.Banks = bank;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	61fb      	str	r3, [r7, #28]
	flashErase.Page = page;
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	623b      	str	r3, [r7, #32]
	flashErase.NbPages = NbPages;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t pageError;
	HAL_FLASHEx_Erase(&flashErase, &pageError);
 8001da4:	f107 0214 	add.w	r2, r7, #20
 8001da8:	f107 0318 	add.w	r3, r7, #24
 8001dac:	4611      	mov	r1, r2
 8001dae:	4618      	mov	r0, r3
 8001db0:	f002 fe68 	bl	8004a84 <HAL_FLASHEx_Erase>
	if(pageError == 0xFFFFFFFF)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dba:	d103      	bne.n	8001dc4 <erasePage+0x40>
	{
		HAL_FLASH_Lock();
 8001dbc:	f002 fda0 	bl	8004900 <HAL_FLASH_Lock>
		return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	e002      	b.n	8001dca <erasePage+0x46>
	}
	else
	{
		HAL_FLASH_Lock();
 8001dc4:	f002 fd9c 	bl	8004900 <HAL_FLASH_Lock>
		return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
	}
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3728      	adds	r7, #40	; 0x28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <writeToPage>:

HAL_StatusTypeDef writeToPage(uint32_t TypeProgram, uint32_t Address, void* data, int dataSize)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b088      	sub	sp, #32
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	60f8      	str	r0, [r7, #12]
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
 8001dde:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status;
	HAL_FLASH_Unlock();
 8001de0:	f002 fd6c 	bl	80048bc <HAL_FLASH_Unlock>
	int index = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61bb      	str	r3, [r7, #24]
	while (index < dataSize)
 8001de8:	e018      	b.n	8001e1c <writeToPage+0x4a>
	{
		uint64_t Data =*(uint64_t*)(data+index);
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	4413      	add	r3, r2
 8001df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df4:	e9c7 2304 	strd	r2, r3, [r7, #16]
		status = HAL_FLASH_Program(TypeProgram, Address+index, Data);
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	18d1      	adds	r1, r2, r3
 8001dfe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f002 fcee 	bl	80047e4 <HAL_FLASH_Program>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	77fb      	strb	r3, [r7, #31]
		if(status != HAL_OK)
 8001e0c:	7ffb      	ldrb	r3, [r7, #31]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <writeToPage+0x44>
		{
			return status;
 8001e12:	7ffb      	ldrb	r3, [r7, #31]
 8001e14:	e009      	b.n	8001e2a <writeToPage+0x58>
		}
		index += sizeof(uint64_t);
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	3308      	adds	r3, #8
 8001e1a:	61bb      	str	r3, [r7, #24]
	while (index < dataSize)
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	dbe2      	blt.n	8001dea <writeToPage+0x18>
	}
	HAL_FLASH_Lock();
 8001e24:	f002 fd6c 	bl	8004900 <HAL_FLASH_Lock>
	//printf("%d\r\n", status);
	return status;
 8001e28:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3720      	adds	r7, #32
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <ledInitPwm>:
	led->GPIOx = GPIOx;
	led->GPIO_Pin = GPIO_Pin;
	led->delay = DEFUALT_DELAY;
}
void ledInitPwm(Led*led)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
	led->state = STATE_OFF;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
	led->delay = DEFUALT_DELAY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e46:	60da      	str	r2, [r3, #12]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <blinkLed>:


void blinkLed(void* argo)
{
 8001e54:	b5b0      	push	{r4, r5, r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	Led* led = (Led*) argo;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	617b      	str	r3, [r7, #20]
	for(;;)
	{
		while(led->state == STATE_OFF)
 8001e60:	e001      	b.n	8001e66 <blinkLed+0x12>
		{
			osThreadYield();
 8001e62:	f007 f929 	bl	80090b8 <osThreadYield>
		while(led->state == STATE_OFF)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f9      	beq.n	8001e62 <blinkLed+0xe>
		}
		//HAL_GPIO_TogglePin(led->GPIOx, led->GPIO_Pin);
		if(ledStatus == 0 )
 8001e6e:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <blinkLed+0xa0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d130      	bne.n	8001ed8 <blinkLed+0x84>
		{
			ledStatus = 1;
 8001e76:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <blinkLed+0xa0>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
			int period = __HAL_TIM_GET_AUTORELOAD(&htim2);
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <blinkLed+0xa4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	613b      	str	r3, [r7, #16]
			lightSensor = HAL_ADC_GetValue(&hadc2);
 8001e84:	481d      	ldr	r0, [pc, #116]	; (8001efc <blinkLed+0xa8>)
 8001e86:	f001 fcad 	bl	80037e4 <HAL_ADC_GetValue>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <blinkLed+0xac>)
 8001e8e:	6013      	str	r3, [r2, #0]
			int value = lightSensor/LIGHT_SENSOR_RESOLUTION * period;
 8001e90:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <blinkLed+0xac>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb45 	bl	8000524 <__aeabi_ui2d>
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <blinkLed+0xb0>)
 8001ea0:	f7fe fce4 	bl	800086c <__aeabi_ddiv>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4614      	mov	r4, r2
 8001eaa:	461d      	mov	r5, r3
 8001eac:	6938      	ldr	r0, [r7, #16]
 8001eae:	f7fe fb49 	bl	8000544 <__aeabi_i2d>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	4629      	mov	r1, r5
 8001eba:	f7fe fbad 	bl	8000618 <__aeabi_dmul>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f7fe fdb9 	bl	8000a3c <__aeabi_d2iz>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, value);
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <blinkLed+0xa4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ed6:	e006      	b.n	8001ee6 <blinkLed+0x92>

		}
		else // ledStatus == ON
		{
			ledStatus = 0;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <blinkLed+0xa0>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <blinkLed+0xa4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	635a      	str	r2, [r3, #52]	; 0x34
		}
		osDelay(led->delay);
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f007 f904 	bl	80090f8 <osDelay>
		while(led->state == STATE_OFF)
 8001ef0:	e7b9      	b.n	8001e66 <blinkLed+0x12>
 8001ef2:	bf00      	nop
 8001ef4:	20000428 	.word	0x20000428
 8001ef8:	200004e8 	.word	0x200004e8
 8001efc:	20000430 	.word	0x20000430
 8001f00:	2000042c 	.word	0x2000042c
 8001f04:	40900000 	.word	0x40900000

08001f08 <startLed>:
{
	led->delay = newDelay;
}

void startLed(Led* led)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
	led->state = STATE_BLINKING;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim2);
 8001f16:	4805      	ldr	r0, [pc, #20]	; (8001f2c <startLed+0x24>)
 8001f18:	f005 f9ee 	bl	80072f8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4803      	ldr	r0, [pc, #12]	; (8001f2c <startLed+0x24>)
 8001f20:	f005 fad0 	bl	80074c4 <HAL_TIM_PWM_Start>
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	200004e8 	.word	0x200004e8

08001f30 <stopLed>:

void stopLed(Led* led)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	led->state = STATE_OFF;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, 0);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6858      	ldr	r0, [r3, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	891b      	ldrh	r3, [r3, #8]
 8001f46:	2200      	movs	r2, #0
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f003 f889 	bl	8005060 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Stop(&htim2);
 8001f4e:	4805      	ldr	r0, [pc, #20]	; (8001f64 <stopLed+0x34>)
 8001f50:	f005 fa3a 	bl	80073c8 <HAL_TIM_Base_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001f54:	2100      	movs	r1, #0
 8001f56:	4803      	ldr	r0, [pc, #12]	; (8001f64 <stopLed+0x34>)
 8001f58:	f005 fbba 	bl	80076d0 <HAL_TIM_PWM_Stop>
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	200004e8 	.word	0x200004e8

08001f68 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int fd, char* ptr, int len) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	4804      	ldr	r0, [pc, #16]	; (8001f90 <_write+0x28>)
 8001f80:	f006 f9bc 	bl	80082fc <HAL_UART_Transmit>
    return len;
 8001f84:	687b      	ldr	r3, [r7, #4]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000580 	.word	0x20000580

08001f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f98:	f000 ff2a 	bl	8002df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f9c:	f000 f85e 	bl	800205c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fa0:	f000 fa36 	bl	8002410 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001fa4:	f000 fa04 	bl	80023b0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001fa8:	f000 f90e 	bl	80021c8 <MX_I2C1_Init>
  MX_ADC2_Init();
 8001fac:	f000 f8a8 	bl	8002100 <MX_ADC2_Init>
  MX_TIM3_Init();
 8001fb0:	f000 f9a4 	bl	80022fc <MX_TIM3_Init>
  MX_TIM2_Init();
 8001fb4:	f000 f948 	bl	8002248 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  alarmAppMain();
 8001fb8:	f7fe ff30 	bl	8000e1c <alarmAppMain>
  //HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001fbc:	f006 ffa0 	bl	8008f00 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001fc0:	4a15      	ldr	r2, [pc, #84]	; (8002018 <main+0x84>)
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4815      	ldr	r0, [pc, #84]	; (800201c <main+0x88>)
 8001fc6:	f006 ffe5 	bl	8008f94 <osThreadNew>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4a14      	ldr	r2, [pc, #80]	; (8002020 <main+0x8c>)
 8001fce:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(commTask, NULL, &myTask02_attributes);
 8001fd0:	4a14      	ldr	r2, [pc, #80]	; (8002024 <main+0x90>)
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4814      	ldr	r0, [pc, #80]	; (8002028 <main+0x94>)
 8001fd6:	f006 ffdd 	bl	8008f94 <osThreadNew>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4a13      	ldr	r2, [pc, #76]	; (800202c <main+0x98>)
 8001fde:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(blinkLed, (void*) &blueLed, &myTask03_attributes);
 8001fe0:	4a13      	ldr	r2, [pc, #76]	; (8002030 <main+0x9c>)
 8001fe2:	4914      	ldr	r1, [pc, #80]	; (8002034 <main+0xa0>)
 8001fe4:	4814      	ldr	r0, [pc, #80]	; (8002038 <main+0xa4>)
 8001fe6:	f006 ffd5 	bl	8008f94 <osThreadNew>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4a13      	ldr	r2, [pc, #76]	; (800203c <main+0xa8>)
 8001fee:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(buzzerTask, (void*) &buzzer, &myTask04_attributes);
 8001ff0:	4a13      	ldr	r2, [pc, #76]	; (8002040 <main+0xac>)
 8001ff2:	4914      	ldr	r1, [pc, #80]	; (8002044 <main+0xb0>)
 8001ff4:	4814      	ldr	r0, [pc, #80]	; (8002048 <main+0xb4>)
 8001ff6:	f006 ffcd 	bl	8008f94 <osThreadNew>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	4a13      	ldr	r2, [pc, #76]	; (800204c <main+0xb8>)
 8001ffe:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(alarmTask, NULL, &myTask05_attributes);
 8002000:	4a13      	ldr	r2, [pc, #76]	; (8002050 <main+0xbc>)
 8002002:	2100      	movs	r1, #0
 8002004:	4813      	ldr	r0, [pc, #76]	; (8002054 <main+0xc0>)
 8002006:	f006 ffc5 	bl	8008f94 <osThreadNew>
 800200a:	4603      	mov	r3, r0
 800200c:	4a12      	ldr	r2, [pc, #72]	; (8002058 <main+0xc4>)
 800200e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002010:	f006 ff9a 	bl	8008f48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002014:	e7fe      	b.n	8002014 <main+0x80>
 8002016:	bf00      	nop
 8002018:	0800d9bc 	.word	0x0800d9bc
 800201c:	08002511 	.word	0x08002511
 8002020:	20000604 	.word	0x20000604
 8002024:	0800d9e0 	.word	0x0800d9e0
 8002028:	08001bf5 	.word	0x08001bf5
 800202c:	20000608 	.word	0x20000608
 8002030:	0800da04 	.word	0x0800da04
 8002034:	20000138 	.word	0x20000138
 8002038:	08001e55 	.word	0x08001e55
 800203c:	2000060c 	.word	0x2000060c
 8002040:	0800da28 	.word	0x0800da28
 8002044:	20000148 	.word	0x20000148
 8002048:	08001455 	.word	0x08001455
 800204c:	20000610 	.word	0x20000610
 8002050:	0800da4c 	.word	0x0800da4c
 8002054:	0800128d 	.word	0x0800128d
 8002058:	20000614 	.word	0x20000614

0800205c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b096      	sub	sp, #88	; 0x58
 8002060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002062:	f107 0314 	add.w	r3, r7, #20
 8002066:	2244      	movs	r2, #68	; 0x44
 8002068:	2100      	movs	r1, #0
 800206a:	4618      	mov	r0, r3
 800206c:	f00a f922 	bl	800c2b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002070:	463b      	mov	r3, r7
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	60da      	str	r2, [r3, #12]
 800207c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800207e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002082:	f003 fe27 	bl	8005cd4 <HAL_PWREx_ControlVoltageScaling>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800208c:	f000 fa48 	bl	8002520 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002090:	2302      	movs	r3, #2
 8002092:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002094:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002098:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800209a:	2310      	movs	r3, #16
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800209e:	2302      	movs	r3, #2
 80020a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020a2:	2302      	movs	r3, #2
 80020a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80020a6:	2301      	movs	r3, #1
 80020a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80020aa:	230a      	movs	r3, #10
 80020ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80020ae:	2307      	movs	r3, #7
 80020b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80020b2:	2302      	movs	r3, #2
 80020b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80020b6:	2302      	movs	r3, #2
 80020b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4618      	mov	r0, r3
 80020c0:	f003 fe5e 	bl	8005d80 <HAL_RCC_OscConfig>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80020ca:	f000 fa29 	bl	8002520 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020ce:	230f      	movs	r3, #15
 80020d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020d2:	2303      	movs	r3, #3
 80020d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80020e2:	463b      	mov	r3, r7
 80020e4:	2104      	movs	r1, #4
 80020e6:	4618      	mov	r0, r3
 80020e8:	f004 fa26 	bl	8006538 <HAL_RCC_ClockConfig>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80020f2:	f000 fa15 	bl	8002520 <Error_Handler>
  }
}
 80020f6:	bf00      	nop
 80020f8:	3758      	adds	r7, #88	; 0x58
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002106:	463b      	mov	r3, r7
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
 8002114:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002116:	4b29      	ldr	r3, [pc, #164]	; (80021bc <MX_ADC2_Init+0xbc>)
 8002118:	4a29      	ldr	r2, [pc, #164]	; (80021c0 <MX_ADC2_Init+0xc0>)
 800211a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 800211c:	4b27      	ldr	r3, [pc, #156]	; (80021bc <MX_ADC2_Init+0xbc>)
 800211e:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 8002122:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8002124:	4b25      	ldr	r3, [pc, #148]	; (80021bc <MX_ADC2_Init+0xbc>)
 8002126:	2208      	movs	r2, #8
 8002128:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800212a:	4b24      	ldr	r3, [pc, #144]	; (80021bc <MX_ADC2_Init+0xbc>)
 800212c:	2200      	movs	r2, #0
 800212e:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002130:	4b22      	ldr	r3, [pc, #136]	; (80021bc <MX_ADC2_Init+0xbc>)
 8002132:	2200      	movs	r2, #0
 8002134:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002136:	4b21      	ldr	r3, [pc, #132]	; (80021bc <MX_ADC2_Init+0xbc>)
 8002138:	2204      	movs	r2, #4
 800213a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800213c:	4b1f      	ldr	r3, [pc, #124]	; (80021bc <MX_ADC2_Init+0xbc>)
 800213e:	2200      	movs	r2, #0
 8002140:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002142:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <MX_ADC2_Init+0xbc>)
 8002144:	2201      	movs	r2, #1
 8002146:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8002148:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <MX_ADC2_Init+0xbc>)
 800214a:	2201      	movs	r2, #1
 800214c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800214e:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <MX_ADC2_Init+0xbc>)
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002156:	4b19      	ldr	r3, [pc, #100]	; (80021bc <MX_ADC2_Init+0xbc>)
 8002158:	2200      	movs	r2, #0
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800215c:	4b17      	ldr	r3, [pc, #92]	; (80021bc <MX_ADC2_Init+0xbc>)
 800215e:	2200      	movs	r2, #0
 8002160:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002162:	4b16      	ldr	r3, [pc, #88]	; (80021bc <MX_ADC2_Init+0xbc>)
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <MX_ADC2_Init+0xbc>)
 800216c:	2200      	movs	r2, #0
 800216e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <MX_ADC2_Init+0xbc>)
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002178:	4810      	ldr	r0, [pc, #64]	; (80021bc <MX_ADC2_Init+0xbc>)
 800217a:	f001 f8ab 	bl	80032d4 <HAL_ADC_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8002184:	f000 f9cc 	bl	8002520 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002188:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <MX_ADC2_Init+0xc4>)
 800218a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800218c:	2306      	movs	r3, #6
 800218e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002190:	2300      	movs	r3, #0
 8002192:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002194:	237f      	movs	r3, #127	; 0x7f
 8002196:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002198:	2304      	movs	r3, #4
 800219a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80021a0:	463b      	mov	r3, r7
 80021a2:	4619      	mov	r1, r3
 80021a4:	4805      	ldr	r0, [pc, #20]	; (80021bc <MX_ADC2_Init+0xbc>)
 80021a6:	f001 fd63 	bl	8003c70 <HAL_ADC_ConfigChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 80021b0:	f000 f9b6 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80021b4:	bf00      	nop
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000430 	.word	0x20000430
 80021c0:	50040100 	.word	0x50040100
 80021c4:	19200040 	.word	0x19200040

080021c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <MX_I2C1_Init+0x74>)
 80021ce:	4a1c      	ldr	r2, [pc, #112]	; (8002240 <MX_I2C1_Init+0x78>)
 80021d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80021d2:	4b1a      	ldr	r3, [pc, #104]	; (800223c <MX_I2C1_Init+0x74>)
 80021d4:	4a1b      	ldr	r2, [pc, #108]	; (8002244 <MX_I2C1_Init+0x7c>)
 80021d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80021d8:	4b18      	ldr	r3, [pc, #96]	; (800223c <MX_I2C1_Init+0x74>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021de:	4b17      	ldr	r3, [pc, #92]	; (800223c <MX_I2C1_Init+0x74>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021e4:	4b15      	ldr	r3, [pc, #84]	; (800223c <MX_I2C1_Init+0x74>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80021ea:	4b14      	ldr	r3, [pc, #80]	; (800223c <MX_I2C1_Init+0x74>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <MX_I2C1_Init+0x74>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021f6:	4b11      	ldr	r3, [pc, #68]	; (800223c <MX_I2C1_Init+0x74>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <MX_I2C1_Init+0x74>)
 80021fe:	2200      	movs	r2, #0
 8002200:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002202:	480e      	ldr	r0, [pc, #56]	; (800223c <MX_I2C1_Init+0x74>)
 8002204:	f002 ff5c 	bl	80050c0 <HAL_I2C_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800220e:	f000 f987 	bl	8002520 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002212:	2100      	movs	r1, #0
 8002214:	4809      	ldr	r0, [pc, #36]	; (800223c <MX_I2C1_Init+0x74>)
 8002216:	f003 fcb7 	bl	8005b88 <HAL_I2CEx_ConfigAnalogFilter>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002220:	f000 f97e 	bl	8002520 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002224:	2100      	movs	r1, #0
 8002226:	4805      	ldr	r0, [pc, #20]	; (800223c <MX_I2C1_Init+0x74>)
 8002228:	f003 fcf9 	bl	8005c1e <HAL_I2CEx_ConfigDigitalFilter>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002232:	f000 f975 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000494 	.word	0x20000494
 8002240:	40005400 	.word	0x40005400
 8002244:	10909cec 	.word	0x10909cec

08002248 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800224e:	f107 031c 	add.w	r3, r7, #28
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800225a:	463b      	mov	r3, r7
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
 8002268:	615a      	str	r2, [r3, #20]
 800226a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800226c:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <MX_TIM2_Init+0xb0>)
 800226e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002272:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8002274:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <MX_TIM2_Init+0xb0>)
 8002276:	f240 321f 	movw	r2, #799	; 0x31f
 800227a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227c:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <MX_TIM2_Init+0xb0>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002282:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <MX_TIM2_Init+0xb0>)
 8002284:	2264      	movs	r2, #100	; 0x64
 8002286:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <MX_TIM2_Init+0xb0>)
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800228e:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <MX_TIM2_Init+0xb0>)
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002294:	4818      	ldr	r0, [pc, #96]	; (80022f8 <MX_TIM2_Init+0xb0>)
 8002296:	f005 f8be 	bl	8007416 <HAL_TIM_PWM_Init>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80022a0:	f000 f93e 	bl	8002520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a8:	2300      	movs	r3, #0
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022ac:	f107 031c 	add.w	r3, r7, #28
 80022b0:	4619      	mov	r1, r3
 80022b2:	4811      	ldr	r0, [pc, #68]	; (80022f8 <MX_TIM2_Init+0xb0>)
 80022b4:	f005 ff4c 	bl	8008150 <HAL_TIMEx_MasterConfigSynchronization>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80022be:	f000 f92f 	bl	8002520 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022c2:	2360      	movs	r3, #96	; 0x60
 80022c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80022c6:	2332      	movs	r3, #50	; 0x32
 80022c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022d2:	463b      	mov	r3, r7
 80022d4:	2200      	movs	r2, #0
 80022d6:	4619      	mov	r1, r3
 80022d8:	4807      	ldr	r0, [pc, #28]	; (80022f8 <MX_TIM2_Init+0xb0>)
 80022da:	f005 fa8f 	bl	80077fc <HAL_TIM_PWM_ConfigChannel>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80022e4:	f000 f91c 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80022e8:	4803      	ldr	r0, [pc, #12]	; (80022f8 <MX_TIM2_Init+0xb0>)
 80022ea:	f000 fba5 	bl	8002a38 <HAL_TIM_MspPostInit>

}
 80022ee:	bf00      	nop
 80022f0:	3728      	adds	r7, #40	; 0x28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200004e8 	.word	0x200004e8

080022fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08a      	sub	sp, #40	; 0x28
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002302:	f107 031c 	add.w	r3, r7, #28
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	605a      	str	r2, [r3, #4]
 800230c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800230e:	463b      	mov	r3, r7
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
 800231c:	615a      	str	r2, [r3, #20]
 800231e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002320:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <MX_TIM3_Init+0xac>)
 8002322:	4a22      	ldr	r2, [pc, #136]	; (80023ac <MX_TIM3_Init+0xb0>)
 8002324:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <MX_TIM3_Init+0xac>)
 8002328:	f240 321f 	movw	r2, #799	; 0x31f
 800232c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <MX_TIM3_Init+0xac>)
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002334:	4b1c      	ldr	r3, [pc, #112]	; (80023a8 <MX_TIM3_Init+0xac>)
 8002336:	2264      	movs	r2, #100	; 0x64
 8002338:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800233a:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <MX_TIM3_Init+0xac>)
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <MX_TIM3_Init+0xac>)
 8002342:	2200      	movs	r2, #0
 8002344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002346:	4818      	ldr	r0, [pc, #96]	; (80023a8 <MX_TIM3_Init+0xac>)
 8002348:	f005 f865 	bl	8007416 <HAL_TIM_PWM_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002352:	f000 f8e5 	bl	8002520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800235e:	f107 031c 	add.w	r3, r7, #28
 8002362:	4619      	mov	r1, r3
 8002364:	4810      	ldr	r0, [pc, #64]	; (80023a8 <MX_TIM3_Init+0xac>)
 8002366:	f005 fef3 	bl	8008150 <HAL_TIMEx_MasterConfigSynchronization>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002370:	f000 f8d6 	bl	8002520 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002374:	2360      	movs	r3, #96	; 0x60
 8002376:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8002378:	2332      	movs	r3, #50	; 0x32
 800237a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800237c:	2300      	movs	r3, #0
 800237e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002380:	2300      	movs	r3, #0
 8002382:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002384:	463b      	mov	r3, r7
 8002386:	2200      	movs	r2, #0
 8002388:	4619      	mov	r1, r3
 800238a:	4807      	ldr	r0, [pc, #28]	; (80023a8 <MX_TIM3_Init+0xac>)
 800238c:	f005 fa36 	bl	80077fc <HAL_TIM_PWM_ConfigChannel>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002396:	f000 f8c3 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800239a:	4803      	ldr	r0, [pc, #12]	; (80023a8 <MX_TIM3_Init+0xac>)
 800239c:	f000 fb4c 	bl	8002a38 <HAL_TIM_MspPostInit>

}
 80023a0:	bf00      	nop
 80023a2:	3728      	adds	r7, #40	; 0x28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000534 	.word	0x20000534
 80023ac:	40000400 	.word	0x40000400

080023b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023b4:	4b14      	ldr	r3, [pc, #80]	; (8002408 <MX_USART2_UART_Init+0x58>)
 80023b6:	4a15      	ldr	r2, [pc, #84]	; (800240c <MX_USART2_UART_Init+0x5c>)
 80023b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023ba:	4b13      	ldr	r3, [pc, #76]	; (8002408 <MX_USART2_UART_Init+0x58>)
 80023bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <MX_USART2_UART_Init+0x58>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023c8:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <MX_USART2_UART_Init+0x58>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023ce:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <MX_USART2_UART_Init+0x58>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <MX_USART2_UART_Init+0x58>)
 80023d6:	220c      	movs	r2, #12
 80023d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023da:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <MX_USART2_UART_Init+0x58>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e0:	4b09      	ldr	r3, [pc, #36]	; (8002408 <MX_USART2_UART_Init+0x58>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <MX_USART2_UART_Init+0x58>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <MX_USART2_UART_Init+0x58>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023f2:	4805      	ldr	r0, [pc, #20]	; (8002408 <MX_USART2_UART_Init+0x58>)
 80023f4:	f005 ff34 	bl	8008260 <HAL_UART_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80023fe:	f000 f88f 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000580 	.word	0x20000580
 800240c:	40004400 	.word	0x40004400

08002410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	; 0x28
 8002414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002416:	f107 0314 	add.w	r3, r7, #20
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	609a      	str	r2, [r3, #8]
 8002422:	60da      	str	r2, [r3, #12]
 8002424:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002426:	4b37      	ldr	r3, [pc, #220]	; (8002504 <MX_GPIO_Init+0xf4>)
 8002428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242a:	4a36      	ldr	r2, [pc, #216]	; (8002504 <MX_GPIO_Init+0xf4>)
 800242c:	f043 0304 	orr.w	r3, r3, #4
 8002430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002432:	4b34      	ldr	r3, [pc, #208]	; (8002504 <MX_GPIO_Init+0xf4>)
 8002434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800243e:	4b31      	ldr	r3, [pc, #196]	; (8002504 <MX_GPIO_Init+0xf4>)
 8002440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002442:	4a30      	ldr	r2, [pc, #192]	; (8002504 <MX_GPIO_Init+0xf4>)
 8002444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800244a:	4b2e      	ldr	r3, [pc, #184]	; (8002504 <MX_GPIO_Init+0xf4>)
 800244c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002456:	4b2b      	ldr	r3, [pc, #172]	; (8002504 <MX_GPIO_Init+0xf4>)
 8002458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245a:	4a2a      	ldr	r2, [pc, #168]	; (8002504 <MX_GPIO_Init+0xf4>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002462:	4b28      	ldr	r3, [pc, #160]	; (8002504 <MX_GPIO_Init+0xf4>)
 8002464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800246e:	4b25      	ldr	r3, [pc, #148]	; (8002504 <MX_GPIO_Init+0xf4>)
 8002470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002472:	4a24      	ldr	r2, [pc, #144]	; (8002504 <MX_GPIO_Init+0xf4>)
 8002474:	f043 0302 	orr.w	r3, r3, #2
 8002478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800247a:	4b22      	ldr	r3, [pc, #136]	; (8002504 <MX_GPIO_Init+0xf4>)
 800247c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	607b      	str	r3, [r7, #4]
 8002484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800248a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800248c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	4619      	mov	r1, r3
 800249c:	481a      	ldr	r0, [pc, #104]	; (8002508 <MX_GPIO_Init+0xf8>)
 800249e:	f002 fc35 	bl	8004d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : rightBtn_Pin */
  GPIO_InitStruct.Pin = rightBtn_Pin;
 80024a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80024ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(rightBtn_GPIO_Port, &GPIO_InitStruct);
 80024b2:	f107 0314 	add.w	r3, r7, #20
 80024b6:	4619      	mov	r1, r3
 80024b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024bc:	f002 fc26 	bl	8004d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : leftBtn_Pin */
  GPIO_InitStruct.Pin = leftBtn_Pin;
 80024c0:	2308      	movs	r3, #8
 80024c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80024c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(leftBtn_GPIO_Port, &GPIO_InitStruct);
 80024ce:	f107 0314 	add.w	r3, r7, #20
 80024d2:	4619      	mov	r1, r3
 80024d4:	480d      	ldr	r0, [pc, #52]	; (800250c <MX_GPIO_Init+0xfc>)
 80024d6:	f002 fc19 	bl	8004d0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80024da:	2200      	movs	r2, #0
 80024dc:	2105      	movs	r1, #5
 80024de:	2009      	movs	r0, #9
 80024e0:	f002 f949 	bl	8004776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80024e4:	2009      	movs	r0, #9
 80024e6:	f002 f962 	bl	80047ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2105      	movs	r1, #5
 80024ee:	2028      	movs	r0, #40	; 0x28
 80024f0:	f002 f941 	bl	8004776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024f4:	2028      	movs	r0, #40	; 0x28
 80024f6:	f002 f95a 	bl	80047ae <HAL_NVIC_EnableIRQ>

}
 80024fa:	bf00      	nop
 80024fc:	3728      	adds	r7, #40	; 0x28
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000
 8002508:	48000800 	.word	0x48000800
 800250c:	48000400 	.word	0x48000400

08002510 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002518:	2001      	movs	r0, #1
 800251a:	f006 fded 	bl	80090f8 <osDelay>
 800251e:	e7fb      	b.n	8002518 <StartDefaultTask+0x8>

08002520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002524:	b672      	cpsid	i
}
 8002526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002528:	e7fe      	b.n	8002528 <Error_Handler+0x8>

0800252a <rtcInit>:
		334,
		365
};

void rtcInit(Rtc * rtc, I2C_HandleTypeDef * hi2c, uint32_t devAddr)
{
 800252a:	b480      	push	{r7}
 800252c:	b085      	sub	sp, #20
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
	rtc->hi2c = hi2c;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	601a      	str	r2, [r3, #0]
	rtc->devAddr = devAddr;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	b2da      	uxtb	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	711a      	strb	r2, [r3, #4]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <bcdToInt>:
	HAL_I2C_Mem_Read(rtc->hi2c, rtc->devAddr, 0, 1, &sec, 1, 0xFF);
	return (sec & RTC_START_STOP) == 0;
}

static int bcdToInt(uint8_t bcd)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
	return (bcd >> 4) * 10 + (bcd & 0x0F);
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	b2db      	uxtb	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	461a      	mov	r2, r3
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	4413      	add	r3, r2
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <intToBcd>:

static uint8_t intToBcd(int value, int minVal, int maxVal)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
	if (value < minVal || value > maxVal) {
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	429a      	cmp	r2, r3
 8002592:	db03      	blt.n	800259c <intToBcd+0x1c>
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	429a      	cmp	r2, r3
 800259a:	dd01      	ble.n	80025a0 <intToBcd+0x20>
		return 0;
 800259c:	2300      	movs	r3, #0
 800259e:	e018      	b.n	80025d2 <intToBcd+0x52>
	}

	return ((value / 10) << 4) | (value % 10);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <intToBcd+0x60>)
 80025a4:	fb82 1203 	smull	r1, r2, r2, r3
 80025a8:	1092      	asrs	r2, r2, #2
 80025aa:	17db      	asrs	r3, r3, #31
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	b258      	sxtb	r0, r3
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <intToBcd+0x60>)
 80025b6:	fb83 1302 	smull	r1, r3, r3, r2
 80025ba:	1099      	asrs	r1, r3, #2
 80025bc:	17d3      	asrs	r3, r2, #31
 80025be:	1ac9      	subs	r1, r1, r3
 80025c0:	460b      	mov	r3, r1
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	1ad1      	subs	r1, r2, r3
 80025ca:	b24b      	sxtb	r3, r1
 80025cc:	4303      	orrs	r3, r0
 80025ce:	b25b      	sxtb	r3, r3
 80025d0:	b2db      	uxtb	r3, r3
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	66666667 	.word	0x66666667

080025e4 <rtcGetTime>:

void rtcGetTime(Rtc * rtc, DateTime * dateTime)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af04      	add	r7, sp, #16
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
	uint8_t buffer[RTC_DATE_TIME_SIZE];
	HAL_I2C_Mem_Read(rtc->hi2c, rtc->devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	791b      	ldrb	r3, [r3, #4]
 80025f6:	b299      	uxth	r1, r3
 80025f8:	23ff      	movs	r3, #255	; 0xff
 80025fa:	9302      	str	r3, [sp, #8]
 80025fc:	2307      	movs	r3, #7
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	f107 0308 	add.w	r3, r7, #8
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	2301      	movs	r3, #1
 8002608:	2200      	movs	r2, #0
 800260a:	f002 fefd 	bl	8005408 <HAL_I2C_Mem_Read>

	// remove stop bit if set
	buffer[0] &= ~RTC_START_STOP;
 800260e:	7a3b      	ldrb	r3, [r7, #8]
 8002610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002614:	b2db      	uxtb	r3, r3
 8002616:	723b      	strb	r3, [r7, #8]
	dateTime->sec = bcdToInt(buffer[0]);
 8002618:	7a3b      	ldrb	r3, [r7, #8]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff ff98 	bl	8002550 <bcdToInt>
 8002620:	4603      	mov	r3, r0
 8002622:	b2da      	uxtb	r2, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	701a      	strb	r2, [r3, #0]
	dateTime->min = bcdToInt(buffer[1]);
 8002628:	7a7b      	ldrb	r3, [r7, #9]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff ff90 	bl	8002550 <bcdToInt>
 8002630:	4603      	mov	r3, r0
 8002632:	b2da      	uxtb	r2, r3
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	705a      	strb	r2, [r3, #1]
	dateTime->hours = bcdToInt(buffer[2]);
 8002638:	7abb      	ldrb	r3, [r7, #10]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff ff88 	bl	8002550 <bcdToInt>
 8002640:	4603      	mov	r3, r0
 8002642:	b2da      	uxtb	r2, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	709a      	strb	r2, [r3, #2]
	dateTime->weekDay = buffer[3] & 0x07;
 8002648:	7afb      	ldrb	r3, [r7, #11]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	b2da      	uxtb	r2, r3
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	70da      	strb	r2, [r3, #3]
	dateTime->day = bcdToInt(buffer[4]);
 8002654:	7b3b      	ldrb	r3, [r7, #12]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff ff7a 	bl	8002550 <bcdToInt>
 800265c:	4603      	mov	r3, r0
 800265e:	b2da      	uxtb	r2, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	711a      	strb	r2, [r3, #4]
	dateTime->month = bcdToInt(buffer[5]);
 8002664:	7b7b      	ldrb	r3, [r7, #13]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff ff72 	bl	8002550 <bcdToInt>
 800266c:	4603      	mov	r3, r0
 800266e:	b2da      	uxtb	r2, r3
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	715a      	strb	r2, [r3, #5]
	dateTime->year = bcdToInt(buffer[6]);
 8002674:	7bbb      	ldrb	r3, [r7, #14]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff ff6a 	bl	8002550 <bcdToInt>
 800267c:	4603      	mov	r3, r0
 800267e:	b2da      	uxtb	r2, r3
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	719a      	strb	r2, [r3, #6]
}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <rtcGetSeconds>:

uint32_t rtcGetSeconds(Rtc * rtc)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	// calculate seconds from 00:00:00 1/1/2020
	DateTime dateTime;
	rtcGetTime(rtc, &dateTime);
 8002694:	f107 030c 	add.w	r3, r7, #12
 8002698:	4619      	mov	r1, r3
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ffa2 	bl	80025e4 <rtcGetTime>

	uint32_t seconds = dateTime.sec +
 80026a0:	7b3b      	ldrb	r3, [r7, #12]
 80026a2:	4619      	mov	r1, r3
			dateTime.min * SecondsInMin +
			dateTime.hours * SecondsInHour +
 80026a4:	7bbb      	ldrb	r3, [r7, #14]
 80026a6:	461a      	mov	r2, r3
 80026a8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80026ac:	fb03 f202 	mul.w	r2, r3, r2
			dateTime.min * SecondsInMin +
 80026b0:	7b7b      	ldrb	r3, [r7, #13]
 80026b2:	4618      	mov	r0, r3
 80026b4:	233c      	movs	r3, #60	; 0x3c
 80026b6:	fb00 f303 	mul.w	r3, r0, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	18ca      	adds	r2, r1, r3
			dateTime.day * SecondsInDay +
			_daysUntilMonth[dateTime.month - 1] * SecondsInDay +
			dateTime.year * DaysInYear * SecondsInDay;
 80026be:	7cbb      	ldrb	r3, [r7, #18]
 80026c0:	4619      	mov	r1, r3
 80026c2:	f240 136d 	movw	r3, #365	; 0x16d
 80026c6:	fb03 f101 	mul.w	r1, r3, r1
			_daysUntilMonth[dateTime.month - 1] * SecondsInDay +
 80026ca:	7c7b      	ldrb	r3, [r7, #17]
 80026cc:	3b01      	subs	r3, #1
 80026ce:	4814      	ldr	r0, [pc, #80]	; (8002720 <rtcGetSeconds+0x94>)
 80026d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80026d4:	4618      	mov	r0, r3
			dateTime.day * SecondsInDay +
 80026d6:	7c3b      	ldrb	r3, [r7, #16]
 80026d8:	4403      	add	r3, r0
			_daysUntilMonth[dateTime.month - 1] * SecondsInDay +
 80026da:	440b      	add	r3, r1
 80026dc:	4911      	ldr	r1, [pc, #68]	; (8002724 <rtcGetSeconds+0x98>)
 80026de:	fb01 f303 	mul.w	r3, r1, r3
	uint32_t seconds = dateTime.sec +
 80026e2:	4413      	add	r3, r2
 80026e4:	617b      	str	r3, [r7, #20]
	if (dateTime.year % 4 == 0 && dateTime.month > 2) {
 80026e6:	7cbb      	ldrb	r3, [r7, #18]
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <rtcGetSeconds+0x74>
 80026f2:	7c7b      	ldrb	r3, [r7, #17]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d903      	bls.n	8002700 <rtcGetSeconds+0x74>
		// if current year is a leap year and month is after February
		// add seconds for February 29
		seconds += SecondsInDay;
 80026f8:	4a0a      	ldr	r2, [pc, #40]	; (8002724 <rtcGetSeconds+0x98>)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	4413      	add	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]
	}
	// add seconds for all previous leap years
	seconds += (dateTime.year / 4) * SecondsInDay;
 8002700:	7cbb      	ldrb	r3, [r7, #18]
 8002702:	089b      	lsrs	r3, r3, #2
 8002704:	b2db      	uxtb	r3, r3
 8002706:	461a      	mov	r2, r3
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <rtcGetSeconds+0x98>)
 800270a:	fb02 f303 	mul.w	r3, r2, r3
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4413      	add	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
	return seconds;
 8002714:	697b      	ldr	r3, [r7, #20]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	0800da70 	.word	0x0800da70
 8002724:	00015180 	.word	0x00015180

08002728 <rtcSetTime>:

HAL_StatusTypeDef rtcSetTime(Rtc * rtc, DateTime * dateTime)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af04      	add	r7, sp, #16
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	uint8_t buffer[RTC_DATE_TIME_SIZE];

	buffer[0] = intToBcd(dateTime->sec, 0, 59);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	223b      	movs	r2, #59	; 0x3b
 8002738:	2100      	movs	r1, #0
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff ff20 	bl	8002580 <intToBcd>
 8002740:	4603      	mov	r3, r0
 8002742:	723b      	strb	r3, [r7, #8]
	buffer[1] = intToBcd(dateTime->min, 0, 59);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	785b      	ldrb	r3, [r3, #1]
 8002748:	223b      	movs	r2, #59	; 0x3b
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff17 	bl	8002580 <intToBcd>
 8002752:	4603      	mov	r3, r0
 8002754:	727b      	strb	r3, [r7, #9]
	buffer[2] = intToBcd(dateTime->hours, 0, 59);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	789b      	ldrb	r3, [r3, #2]
 800275a:	223b      	movs	r2, #59	; 0x3b
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff ff0e 	bl	8002580 <intToBcd>
 8002764:	4603      	mov	r3, r0
 8002766:	72bb      	strb	r3, [r7, #10]
	buffer[3] = dateTime->weekDay < 1 || dateTime->weekDay > 7 ? 0 : dateTime->weekDay;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	78db      	ldrb	r3, [r3, #3]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d006      	beq.n	800277e <rtcSetTime+0x56>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	78db      	ldrb	r3, [r3, #3]
 8002774:	2b07      	cmp	r3, #7
 8002776:	d802      	bhi.n	800277e <rtcSetTime+0x56>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	78db      	ldrb	r3, [r3, #3]
 800277c:	e000      	b.n	8002780 <rtcSetTime+0x58>
 800277e:	2300      	movs	r3, #0
 8002780:	72fb      	strb	r3, [r7, #11]
	buffer[4] = intToBcd(dateTime->day, 1, 31);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	791b      	ldrb	r3, [r3, #4]
 8002786:	221f      	movs	r2, #31
 8002788:	2101      	movs	r1, #1
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fef8 	bl	8002580 <intToBcd>
 8002790:	4603      	mov	r3, r0
 8002792:	733b      	strb	r3, [r7, #12]
	buffer[5] = intToBcd(dateTime->month, 1, 12);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	795b      	ldrb	r3, [r3, #5]
 8002798:	220c      	movs	r2, #12
 800279a:	2101      	movs	r1, #1
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff feef 	bl	8002580 <intToBcd>
 80027a2:	4603      	mov	r3, r0
 80027a4:	737b      	strb	r3, [r7, #13]
	buffer[6] = intToBcd(dateTime->year, 1, 99);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	799b      	ldrb	r3, [r3, #6]
 80027aa:	2263      	movs	r2, #99	; 0x63
 80027ac:	2101      	movs	r1, #1
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fee6 	bl	8002580 <intToBcd>
 80027b4:	4603      	mov	r3, r0
 80027b6:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(rtc->hi2c, rtc->devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	791b      	ldrb	r3, [r3, #4]
 80027c0:	b299      	uxth	r1, r3
 80027c2:	23ff      	movs	r3, #255	; 0xff
 80027c4:	9302      	str	r3, [sp, #8]
 80027c6:	2307      	movs	r3, #7
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	f107 0308 	add.w	r3, r7, #8
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	2301      	movs	r3, #1
 80027d2:	2200      	movs	r2, #0
 80027d4:	f002 fd04 	bl	80051e0 <HAL_I2C_Mem_Write>
 80027d8:	4603      	mov	r3, r0
 80027da:	73fb      	strb	r3, [r7, #15]
	return status;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ee:	4b11      	ldr	r3, [pc, #68]	; (8002834 <HAL_MspInit+0x4c>)
 80027f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f2:	4a10      	ldr	r2, [pc, #64]	; (8002834 <HAL_MspInit+0x4c>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	6613      	str	r3, [r2, #96]	; 0x60
 80027fa:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <HAL_MspInit+0x4c>)
 80027fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	607b      	str	r3, [r7, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002806:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_MspInit+0x4c>)
 8002808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280a:	4a0a      	ldr	r2, [pc, #40]	; (8002834 <HAL_MspInit+0x4c>)
 800280c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002810:	6593      	str	r3, [r2, #88]	; 0x58
 8002812:	4b08      	ldr	r3, [pc, #32]	; (8002834 <HAL_MspInit+0x4c>)
 8002814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800281e:	2200      	movs	r2, #0
 8002820:	210f      	movs	r1, #15
 8002822:	f06f 0001 	mvn.w	r0, #1
 8002826:	f001 ffa6 	bl	8004776 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000

08002838 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b0ac      	sub	sp, #176	; 0xb0
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	2288      	movs	r2, #136	; 0x88
 8002856:	2100      	movs	r1, #0
 8002858:	4618      	mov	r0, r3
 800285a:	f009 fd2b 	bl	800c2b4 <memset>
  if(hadc->Instance==ADC2)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a2b      	ldr	r2, [pc, #172]	; (8002910 <HAL_ADC_MspInit+0xd8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d14f      	bne.n	8002908 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002868:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800286c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800286e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002872:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002876:	2302      	movs	r3, #2
 8002878:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800287a:	2301      	movs	r3, #1
 800287c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800287e:	2308      	movs	r3, #8
 8002880:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002882:	2307      	movs	r3, #7
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002886:	2302      	movs	r3, #2
 8002888:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800288a:	2302      	movs	r3, #2
 800288c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800288e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002894:	f107 0314 	add.w	r3, r7, #20
 8002898:	4618      	mov	r0, r3
 800289a:	f004 f871 	bl	8006980 <HAL_RCCEx_PeriphCLKConfig>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80028a4:	f7ff fe3c 	bl	8002520 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80028a8:	4b1a      	ldr	r3, [pc, #104]	; (8002914 <HAL_ADC_MspInit+0xdc>)
 80028aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ac:	4a19      	ldr	r2, [pc, #100]	; (8002914 <HAL_ADC_MspInit+0xdc>)
 80028ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028b4:	4b17      	ldr	r3, [pc, #92]	; (8002914 <HAL_ADC_MspInit+0xdc>)
 80028b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c0:	4b14      	ldr	r3, [pc, #80]	; (8002914 <HAL_ADC_MspInit+0xdc>)
 80028c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c4:	4a13      	ldr	r2, [pc, #76]	; (8002914 <HAL_ADC_MspInit+0xdc>)
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <HAL_ADC_MspInit+0xdc>)
 80028ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80028d8:	2302      	movs	r3, #2
 80028da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80028de:	230b      	movs	r3, #11
 80028e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028ee:	4619      	mov	r1, r3
 80028f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028f4:	f002 fa0a 	bl	8004d0c <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80028f8:	2200      	movs	r2, #0
 80028fa:	2105      	movs	r1, #5
 80028fc:	2012      	movs	r0, #18
 80028fe:	f001 ff3a 	bl	8004776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002902:	2012      	movs	r0, #18
 8002904:	f001 ff53 	bl	80047ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002908:	bf00      	nop
 800290a:	37b0      	adds	r7, #176	; 0xb0
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	50040100 	.word	0x50040100
 8002914:	40021000 	.word	0x40021000

08002918 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b0ac      	sub	sp, #176	; 0xb0
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002920:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002930:	f107 0314 	add.w	r3, r7, #20
 8002934:	2288      	movs	r2, #136	; 0x88
 8002936:	2100      	movs	r1, #0
 8002938:	4618      	mov	r0, r3
 800293a:	f009 fcbb 	bl	800c2b4 <memset>
  if(hi2c->Instance==I2C1)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a21      	ldr	r2, [pc, #132]	; (80029c8 <HAL_I2C_MspInit+0xb0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d13b      	bne.n	80029c0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002948:	2340      	movs	r3, #64	; 0x40
 800294a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800294c:	2300      	movs	r3, #0
 800294e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	4618      	mov	r0, r3
 8002956:	f004 f813 	bl	8006980 <HAL_RCCEx_PeriphCLKConfig>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002960:	f7ff fdde 	bl	8002520 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002964:	4b19      	ldr	r3, [pc, #100]	; (80029cc <HAL_I2C_MspInit+0xb4>)
 8002966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002968:	4a18      	ldr	r2, [pc, #96]	; (80029cc <HAL_I2C_MspInit+0xb4>)
 800296a:	f043 0302 	orr.w	r3, r3, #2
 800296e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002970:	4b16      	ldr	r3, [pc, #88]	; (80029cc <HAL_I2C_MspInit+0xb4>)
 8002972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800297c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002980:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002984:	2312      	movs	r3, #18
 8002986:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002990:	2303      	movs	r3, #3
 8002992:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002996:	2304      	movs	r3, #4
 8002998:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80029a0:	4619      	mov	r1, r3
 80029a2:	480b      	ldr	r0, [pc, #44]	; (80029d0 <HAL_I2C_MspInit+0xb8>)
 80029a4:	f002 f9b2 	bl	8004d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <HAL_I2C_MspInit+0xb4>)
 80029aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ac:	4a07      	ldr	r2, [pc, #28]	; (80029cc <HAL_I2C_MspInit+0xb4>)
 80029ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029b2:	6593      	str	r3, [r2, #88]	; 0x58
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <HAL_I2C_MspInit+0xb4>)
 80029b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029c0:	bf00      	nop
 80029c2:	37b0      	adds	r7, #176	; 0xb0
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40005400 	.word	0x40005400
 80029cc:	40021000 	.word	0x40021000
 80029d0:	48000400 	.word	0x48000400

080029d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e4:	d10c      	bne.n	8002a00 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_TIM_PWM_MspInit+0x5c>)
 80029e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ea:	4a11      	ldr	r2, [pc, #68]	; (8002a30 <HAL_TIM_PWM_MspInit+0x5c>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6593      	str	r3, [r2, #88]	; 0x58
 80029f2:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <HAL_TIM_PWM_MspInit+0x5c>)
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80029fe:	e010      	b.n	8002a22 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <HAL_TIM_PWM_MspInit+0x60>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d10b      	bne.n	8002a22 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_TIM_PWM_MspInit+0x5c>)
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0e:	4a08      	ldr	r2, [pc, #32]	; (8002a30 <HAL_TIM_PWM_MspInit+0x5c>)
 8002a10:	f043 0302 	orr.w	r3, r3, #2
 8002a14:	6593      	str	r3, [r2, #88]	; 0x58
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_TIM_PWM_MspInit+0x5c>)
 8002a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
}
 8002a22:	bf00      	nop
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40000400 	.word	0x40000400

08002a38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	; 0x28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a58:	d11d      	bne.n	8002a96 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5a:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <HAL_TIM_MspPostInit+0xa8>)
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5e:	4a20      	ldr	r2, [pc, #128]	; (8002ae0 <HAL_TIM_MspPostInit+0xa8>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a66:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <HAL_TIM_MspPostInit+0xa8>)
 8002a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a72:	2320      	movs	r3, #32
 8002a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	2302      	movs	r3, #2
 8002a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a82:	2301      	movs	r3, #1
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a86:	f107 0314 	add.w	r3, r7, #20
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a90:	f002 f93c 	bl	8004d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a94:	e020      	b.n	8002ad8 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a12      	ldr	r2, [pc, #72]	; (8002ae4 <HAL_TIM_MspPostInit+0xac>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d11b      	bne.n	8002ad8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <HAL_TIM_MspPostInit+0xa8>)
 8002aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa4:	4a0e      	ldr	r2, [pc, #56]	; (8002ae0 <HAL_TIM_MspPostInit+0xa8>)
 8002aa6:	f043 0302 	orr.w	r3, r3, #2
 8002aaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aac:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <HAL_TIM_MspPostInit+0xa8>)
 8002aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ab8:	2310      	movs	r3, #16
 8002aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4805      	ldr	r0, [pc, #20]	; (8002ae8 <HAL_TIM_MspPostInit+0xb0>)
 8002ad4:	f002 f91a 	bl	8004d0c <HAL_GPIO_Init>
}
 8002ad8:	bf00      	nop
 8002ada:	3728      	adds	r7, #40	; 0x28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40000400 	.word	0x40000400
 8002ae8:	48000400 	.word	0x48000400

08002aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b0ac      	sub	sp, #176	; 0xb0
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b04:	f107 0314 	add.w	r3, r7, #20
 8002b08:	2288      	movs	r2, #136	; 0x88
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f009 fbd1 	bl	800c2b4 <memset>
  if(huart->Instance==USART2)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a21      	ldr	r2, [pc, #132]	; (8002b9c <HAL_UART_MspInit+0xb0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d13b      	bne.n	8002b94 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b20:	2300      	movs	r3, #0
 8002b22:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f003 ff29 	bl	8006980 <HAL_RCCEx_PeriphCLKConfig>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b34:	f7ff fcf4 	bl	8002520 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b38:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <HAL_UART_MspInit+0xb4>)
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3c:	4a18      	ldr	r2, [pc, #96]	; (8002ba0 <HAL_UART_MspInit+0xb4>)
 8002b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b42:	6593      	str	r3, [r2, #88]	; 0x58
 8002b44:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <HAL_UART_MspInit+0xb4>)
 8002b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b50:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <HAL_UART_MspInit+0xb4>)
 8002b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b54:	4a12      	ldr	r2, [pc, #72]	; (8002ba0 <HAL_UART_MspInit+0xb4>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b5c:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <HAL_UART_MspInit+0xb4>)
 8002b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b68:	230c      	movs	r3, #12
 8002b6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b80:	2307      	movs	r3, #7
 8002b82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b90:	f002 f8bc 	bl	8004d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b94:	bf00      	nop
 8002b96:	37b0      	adds	r7, #176	; 0xb0
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40004400 	.word	0x40004400
 8002ba0:	40021000 	.word	0x40021000

08002ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ba8:	e7fe      	b.n	8002ba8 <NMI_Handler+0x4>

08002baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bae:	e7fe      	b.n	8002bae <HardFault_Handler+0x4>

08002bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bb4:	e7fe      	b.n	8002bb4 <MemManage_Handler+0x4>

08002bb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bba:	e7fe      	b.n	8002bba <BusFault_Handler+0x4>

08002bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bc0:	e7fe      	b.n	8002bc0 <UsageFault_Handler+0x4>

08002bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bd4:	f000 f968 	bl	8002ea8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002bd8:	f008 f9ce 	bl	800af78 <xTaskGetSchedulerState>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d001      	beq.n	8002be6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002be2:	f009 f8b1 	bl	800bd48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}

08002bea <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(leftBtn_Pin);
 8002bee:	2008      	movs	r0, #8
 8002bf0:	f002 fa4e 	bl	8005090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002bf4:	bf00      	nop
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8002bfc:	4802      	ldr	r0, [pc, #8]	; (8002c08 <ADC1_2_IRQHandler+0x10>)
 8002bfe:	f000 fdff 	bl	8003800 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20000430 	.word	0x20000430

08002c0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(rightBtn_Pin);
 8002c10:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002c14:	f002 fa3c 	bl	8005090 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002c18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c1c:	f002 fa38 	bl	8005090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c20:	bf00      	nop
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
	return 1;
 8002c28:	2301      	movs	r3, #1
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <_kill>:

int _kill(int pid, int sig)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c3e:	f009 fb01 	bl	800c244 <__errno>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2216      	movs	r2, #22
 8002c46:	601a      	str	r2, [r3, #0]
	return -1;
 8002c48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <_exit>:

void _exit (int status)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff ffe7 	bl	8002c34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c66:	e7fe      	b.n	8002c66 <_exit+0x12>

08002c68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	e00a      	b.n	8002c90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c7a:	f3af 8000 	nop.w
 8002c7e:	4601      	mov	r1, r0
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	60ba      	str	r2, [r7, #8]
 8002c86:	b2ca      	uxtb	r2, r1
 8002c88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	dbf0      	blt.n	8002c7a <_read+0x12>
	}

return len;
 8002c98:	687b      	ldr	r3, [r7, #4]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
	return -1;
 8002caa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cca:	605a      	str	r2, [r3, #4]
	return 0;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <_isatty>:

int _isatty(int file)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
	return 1;
 8002ce2:	2301      	movs	r3, #1
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
	return 0;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d14:	4a14      	ldr	r2, [pc, #80]	; (8002d68 <_sbrk+0x5c>)
 8002d16:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <_sbrk+0x60>)
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d20:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <_sbrk+0x64>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d102      	bne.n	8002d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d28:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <_sbrk+0x64>)
 8002d2a:	4a12      	ldr	r2, [pc, #72]	; (8002d74 <_sbrk+0x68>)
 8002d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d2e:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <_sbrk+0x64>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d207      	bcs.n	8002d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d3c:	f009 fa82 	bl	800c244 <__errno>
 8002d40:	4603      	mov	r3, r0
 8002d42:	220c      	movs	r2, #12
 8002d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d46:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4a:	e009      	b.n	8002d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d4c:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <_sbrk+0x64>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d52:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <_sbrk+0x64>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	4a05      	ldr	r2, [pc, #20]	; (8002d70 <_sbrk+0x64>)
 8002d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20018000 	.word	0x20018000
 8002d6c:	00000400 	.word	0x00000400
 8002d70:	20000618 	.word	0x20000618
 8002d74:	20002708 	.word	0x20002708

08002d78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d7c:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <SystemInit+0x20>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d82:	4a05      	ldr	r2, [pc, #20]	; (8002d98 <SystemInit+0x20>)
 8002d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002d8c:	bf00      	nop
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002da0:	f7ff ffea 	bl	8002d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002da4:	480c      	ldr	r0, [pc, #48]	; (8002dd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002da6:	490d      	ldr	r1, [pc, #52]	; (8002ddc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002da8:	4a0d      	ldr	r2, [pc, #52]	; (8002de0 <LoopForever+0xe>)
  movs r3, #0
 8002daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dac:	e002      	b.n	8002db4 <LoopCopyDataInit>

08002dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002db2:	3304      	adds	r3, #4

08002db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db8:	d3f9      	bcc.n	8002dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dba:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002dbc:	4c0a      	ldr	r4, [pc, #40]	; (8002de8 <LoopForever+0x16>)
  movs r3, #0
 8002dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dc0:	e001      	b.n	8002dc6 <LoopFillZerobss>

08002dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dc4:	3204      	adds	r2, #4

08002dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc8:	d3fb      	bcc.n	8002dc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dca:	f009 fa41 	bl	800c250 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002dce:	f7ff f8e1 	bl	8001f94 <main>

08002dd2 <LoopForever>:

LoopForever:
    b LoopForever
 8002dd2:	e7fe      	b.n	8002dd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002dd4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ddc:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8002de0:	0800dd48 	.word	0x0800dd48
  ldr r2, =_sbss
 8002de4:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8002de8:	20002708 	.word	0x20002708

08002dec <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002dec:	e7fe      	b.n	8002dec <ADC3_IRQHandler>
	...

08002df0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dfa:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <HAL_Init+0x3c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a0b      	ldr	r2, [pc, #44]	; (8002e2c <HAL_Init+0x3c>)
 8002e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e04:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e06:	2003      	movs	r0, #3
 8002e08:	f001 fcaa 	bl	8004760 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e0c:	200f      	movs	r0, #15
 8002e0e:	f000 f80f 	bl	8002e30 <HAL_InitTick>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	71fb      	strb	r3, [r7, #7]
 8002e1c:	e001      	b.n	8002e22 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e1e:	f7ff fce3 	bl	80027e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e22:	79fb      	ldrb	r3, [r7, #7]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40022000 	.word	0x40022000

08002e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e3c:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <HAL_InitTick+0x6c>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d023      	beq.n	8002e8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e44:	4b16      	ldr	r3, [pc, #88]	; (8002ea0 <HAL_InitTick+0x70>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <HAL_InitTick+0x6c>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f001 fcb5 	bl	80047ca <HAL_SYSTICK_Config>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10f      	bne.n	8002e86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b0f      	cmp	r3, #15
 8002e6a:	d809      	bhi.n	8002e80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	f04f 30ff 	mov.w	r0, #4294967295
 8002e74:	f001 fc7f 	bl	8004776 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e78:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <HAL_InitTick+0x74>)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e007      	b.n	8002e90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	73fb      	strb	r3, [r7, #15]
 8002e84:	e004      	b.n	8002e90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	73fb      	strb	r3, [r7, #15]
 8002e8a:	e001      	b.n	8002e90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000070 	.word	0x20000070
 8002ea0:	20000068 	.word	0x20000068
 8002ea4:	2000006c 	.word	0x2000006c

08002ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_IncTick+0x20>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_IncTick+0x24>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	4a04      	ldr	r2, [pc, #16]	; (8002ecc <HAL_IncTick+0x24>)
 8002eba:	6013      	str	r3, [r2, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	20000070 	.word	0x20000070
 8002ecc:	2000061c 	.word	0x2000061c

08002ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <HAL_GetTick+0x14>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	2000061c 	.word	0x2000061c

08002ee8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	609a      	str	r2, [r3, #8]
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	609a      	str	r2, [r3, #8]
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	3360      	adds	r3, #96	; 0x60
 8002f62:	461a      	mov	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <LL_ADC_SetOffset+0x44>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002f88:	bf00      	nop
 8002f8a:	371c      	adds	r7, #28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	03fff000 	.word	0x03fff000

08002f98 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3360      	adds	r3, #96	; 0x60
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	3360      	adds	r3, #96	; 0x60
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002fee:	bf00      	nop
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	3330      	adds	r3, #48	; 0x30
 8003030:	461a      	mov	r2, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	4413      	add	r3, r2
 800303e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	211f      	movs	r1, #31
 800304c:	fa01 f303 	lsl.w	r3, r1, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	401a      	ands	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	0e9b      	lsrs	r3, r3, #26
 8003058:	f003 011f 	and.w	r1, r3, #31
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	fa01 f303 	lsl.w	r3, r1, r3
 8003066:	431a      	orrs	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800306c:	bf00      	nop
 800306e:	371c      	adds	r7, #28
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003084:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800309e:	b480      	push	{r7}
 80030a0:	b087      	sub	sp, #28
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3314      	adds	r3, #20
 80030ae:	461a      	mov	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	0e5b      	lsrs	r3, r3, #25
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	4413      	add	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	0d1b      	lsrs	r3, r3, #20
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	2107      	movs	r1, #7
 80030cc:	fa01 f303 	lsl.w	r3, r1, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	401a      	ands	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	0d1b      	lsrs	r3, r3, #20
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	fa01 f303 	lsl.w	r3, r1, r3
 80030e2:	431a      	orrs	r2, r3
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80030e8:	bf00      	nop
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800310c:	43db      	mvns	r3, r3
 800310e:	401a      	ands	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f003 0318 	and.w	r3, r3, #24
 8003116:	4908      	ldr	r1, [pc, #32]	; (8003138 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003118:	40d9      	lsrs	r1, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	400b      	ands	r3, r1
 800311e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003122:	431a      	orrs	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800312a:	bf00      	nop
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	0007ffff 	.word	0x0007ffff

0800313c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 031f 	and.w	r3, r3, #31
}
 800314c:	4618      	mov	r0, r3
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003168:	4618      	mov	r0, r3
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003184:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6093      	str	r3, [r2, #8]
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031ac:	d101      	bne.n	80031b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80031d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031fc:	d101      	bne.n	8003202 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003220:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003224:	f043 0201 	orr.w	r2, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <LL_ADC_IsEnabled+0x18>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <LL_ADC_IsEnabled+0x1a>
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800326e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003272:	f043 0204 	orr.w	r2, r3, #4
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	2b04      	cmp	r3, #4
 8003298:	d101      	bne.n	800329e <LL_ADC_REG_IsConversionOngoing+0x18>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d101      	bne.n	80032c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b089      	sub	sp, #36	; 0x24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e136      	b.n	800355c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d109      	bne.n	8003310 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff fa9b 	bl	8002838 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff3f 	bl	8003198 <LL_ADC_IsDeepPowerDownEnabled>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d004      	beq.n	800332a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff ff25 	bl	8003174 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff ff5a 	bl	80031e8 <LL_ADC_IsInternalRegulatorEnabled>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d115      	bne.n	8003366 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff ff3e 	bl	80031c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003344:	4b87      	ldr	r3, [pc, #540]	; (8003564 <HAL_ADC_Init+0x290>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	099b      	lsrs	r3, r3, #6
 800334a:	4a87      	ldr	r2, [pc, #540]	; (8003568 <HAL_ADC_Init+0x294>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	099b      	lsrs	r3, r3, #6
 8003352:	3301      	adds	r3, #1
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003358:	e002      	b.n	8003360 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	3b01      	subs	r3, #1
 800335e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f9      	bne.n	800335a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff ff3c 	bl	80031e8 <LL_ADC_IsInternalRegulatorEnabled>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10d      	bne.n	8003392 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337a:	f043 0210 	orr.w	r2, r3, #16
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003386:	f043 0201 	orr.w	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff ff75 	bl	8003286 <LL_ADC_REG_IsConversionOngoing>
 800339c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f040 80cf 	bne.w	800354a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f040 80cb 	bne.w	800354a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80033bc:	f043 0202 	orr.w	r2, r3, #2
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff ff35 	bl	8003238 <LL_ADC_IsEnabled>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d115      	bne.n	8003400 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033d4:	4865      	ldr	r0, [pc, #404]	; (800356c <HAL_ADC_Init+0x298>)
 80033d6:	f7ff ff2f 	bl	8003238 <LL_ADC_IsEnabled>
 80033da:	4604      	mov	r4, r0
 80033dc:	4864      	ldr	r0, [pc, #400]	; (8003570 <HAL_ADC_Init+0x29c>)
 80033de:	f7ff ff2b 	bl	8003238 <LL_ADC_IsEnabled>
 80033e2:	4603      	mov	r3, r0
 80033e4:	431c      	orrs	r4, r3
 80033e6:	4863      	ldr	r0, [pc, #396]	; (8003574 <HAL_ADC_Init+0x2a0>)
 80033e8:	f7ff ff26 	bl	8003238 <LL_ADC_IsEnabled>
 80033ec:	4603      	mov	r3, r0
 80033ee:	4323      	orrs	r3, r4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d105      	bne.n	8003400 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	4619      	mov	r1, r3
 80033fa:	485f      	ldr	r0, [pc, #380]	; (8003578 <HAL_ADC_Init+0x2a4>)
 80033fc:	f7ff fd74 	bl	8002ee8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	7e5b      	ldrb	r3, [r3, #25]
 8003404:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800340a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003410:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003416:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800341e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003420:	4313      	orrs	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3020 	ldrb.w	r3, [r3, #32]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d106      	bne.n	800343c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	3b01      	subs	r3, #1
 8003434:	045b      	lsls	r3, r3, #17
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	2b00      	cmp	r3, #0
 8003442:	d009      	beq.n	8003458 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4313      	orrs	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	4b47      	ldr	r3, [pc, #284]	; (800357c <HAL_ADC_Init+0x2a8>)
 8003460:	4013      	ands	r3, r2
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	69b9      	ldr	r1, [r7, #24]
 8003468:	430b      	orrs	r3, r1
 800346a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff ff08 	bl	8003286 <LL_ADC_REG_IsConversionOngoing>
 8003476:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff ff15 	bl	80032ac <LL_ADC_INJ_IsConversionOngoing>
 8003482:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d13d      	bne.n	8003506 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d13a      	bne.n	8003506 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003494:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800349c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034ac:	f023 0302 	bic.w	r3, r3, #2
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	69b9      	ldr	r1, [r7, #24]
 80034b6:	430b      	orrs	r3, r1
 80034b8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d118      	bne.n	80034f6 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80034ce:	f023 0304 	bic.w	r3, r3, #4
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034da:	4311      	orrs	r1, r2
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80034e0:	4311      	orrs	r1, r2
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034e6:	430a      	orrs	r2, r1
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	611a      	str	r2, [r3, #16]
 80034f4:	e007      	b.n	8003506 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0201 	bic.w	r2, r2, #1
 8003504:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d10c      	bne.n	8003528 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	f023 010f 	bic.w	r1, r3, #15
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	1e5a      	subs	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
 8003526:	e007      	b.n	8003538 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 020f 	bic.w	r2, r2, #15
 8003536:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353c:	f023 0303 	bic.w	r3, r3, #3
 8003540:	f043 0201 	orr.w	r2, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	655a      	str	r2, [r3, #84]	; 0x54
 8003548:	e007      	b.n	800355a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354e:	f043 0210 	orr.w	r2, r3, #16
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800355a:	7ffb      	ldrb	r3, [r7, #31]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3724      	adds	r7, #36	; 0x24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd90      	pop	{r4, r7, pc}
 8003564:	20000068 	.word	0x20000068
 8003568:	053e2d63 	.word	0x053e2d63
 800356c:	50040000 	.word	0x50040000
 8003570:	50040100 	.word	0x50040100
 8003574:	50040200 	.word	0x50040200
 8003578:	50040300 	.word	0x50040300
 800357c:	fff0c007 	.word	0xfff0c007

08003580 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003588:	4893      	ldr	r0, [pc, #588]	; (80037d8 <HAL_ADC_Start_IT+0x258>)
 800358a:	f7ff fdd7 	bl	800313c <LL_ADC_GetMultimode>
 800358e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff fe76 	bl	8003286 <LL_ADC_REG_IsConversionOngoing>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	f040 8111 	bne.w	80037c4 <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_ADC_Start_IT+0x30>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e10e      	b.n	80037ce <HAL_ADC_Start_IT+0x24e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 ff49 	bl	8004450 <ADC_Enable>
 80035be:	4603      	mov	r3, r0
 80035c0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80035c2:	7dfb      	ldrb	r3, [r7, #23]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f040 80f8 	bne.w	80037ba <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035d2:	f023 0301 	bic.w	r3, r3, #1
 80035d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a7e      	ldr	r2, [pc, #504]	; (80037dc <HAL_ADC_Start_IT+0x25c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d002      	beq.n	80035ee <HAL_ADC_Start_IT+0x6e>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	e000      	b.n	80035f0 <HAL_ADC_Start_IT+0x70>
 80035ee:	4b7c      	ldr	r3, [pc, #496]	; (80037e0 <HAL_ADC_Start_IT+0x260>)
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6812      	ldr	r2, [r2, #0]
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d002      	beq.n	80035fe <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d105      	bne.n	800360a <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003602:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d006      	beq.n	8003624 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361a:	f023 0206 	bic.w	r2, r3, #6
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	659a      	str	r2, [r3, #88]	; 0x58
 8003622:	e002      	b.n	800362a <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	221c      	movs	r2, #28
 8003630:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 021c 	bic.w	r2, r2, #28
 8003648:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	2b08      	cmp	r3, #8
 8003650:	d108      	bne.n	8003664 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0208 	orr.w	r2, r2, #8
 8003660:	605a      	str	r2, [r3, #4]
          break;
 8003662:	e008      	b.n	8003676 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0204 	orr.w	r2, r2, #4
 8003672:	605a      	str	r2, [r3, #4]
          break;
 8003674:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367a:	2b00      	cmp	r3, #0
 800367c:	d107      	bne.n	800368e <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0210 	orr.w	r2, r2, #16
 800368c:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a52      	ldr	r2, [pc, #328]	; (80037dc <HAL_ADC_Start_IT+0x25c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d002      	beq.n	800369e <HAL_ADC_Start_IT+0x11e>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	e000      	b.n	80036a0 <HAL_ADC_Start_IT+0x120>
 800369e:	4b50      	ldr	r3, [pc, #320]	; (80037e0 <HAL_ADC_Start_IT+0x260>)
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d008      	beq.n	80036ba <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	2b05      	cmp	r3, #5
 80036b2:	d002      	beq.n	80036ba <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	2b09      	cmp	r3, #9
 80036b8:	d13b      	bne.n	8003732 <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d02d      	beq.n	8003724 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d110      	bne.n	8003702 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0220 	bic.w	r2, r2, #32
 80036ee:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036fe:	605a      	str	r2, [r3, #4]
              break;
 8003700:	e011      	b.n	8003726 <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003710:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0220 	orr.w	r2, r2, #32
 8003720:	605a      	str	r2, [r3, #4]
              break;
 8003722:	e000      	b.n	8003726 <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8003724:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff fd97 	bl	800325e <LL_ADC_REG_StartConversion>
 8003730:	e04c      	b.n	80037cc <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003736:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a26      	ldr	r2, [pc, #152]	; (80037dc <HAL_ADC_Start_IT+0x25c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d002      	beq.n	800374e <HAL_ADC_Start_IT+0x1ce>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	e000      	b.n	8003750 <HAL_ADC_Start_IT+0x1d0>
 800374e:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <HAL_ADC_Start_IT+0x260>)
 8003750:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d035      	beq.n	80037ca <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003762:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003766:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	2b08      	cmp	r3, #8
 8003774:	d110      	bne.n	8003798 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0220 	bic.w	r2, r2, #32
 8003784:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003794:	605a      	str	r2, [r3, #4]
              break;
 8003796:	e019      	b.n	80037cc <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037a6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0220 	orr.w	r2, r2, #32
 80037b6:	605a      	str	r2, [r3, #4]
              break;
 80037b8:	e008      	b.n	80037cc <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80037c2:	e003      	b.n	80037cc <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80037c4:	2302      	movs	r3, #2
 80037c6:	75fb      	strb	r3, [r7, #23]
 80037c8:	e000      	b.n	80037cc <HAL_ADC_Start_IT+0x24c>
        }
 80037ca:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80037cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	50040300 	.word	0x50040300
 80037dc:	50040100 	.word	0x50040100
 80037e0:	50040000 	.word	0x50040000

080037e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
	...

08003800 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	; 0x28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003808:	2300      	movs	r3, #0
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800381c:	4882      	ldr	r0, [pc, #520]	; (8003a28 <HAL_ADC_IRQHandler+0x228>)
 800381e:	f7ff fc8d 	bl	800313c <LL_ADC_GetMultimode>
 8003822:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d017      	beq.n	800385e <HAL_ADC_IRQHandler+0x5e>
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d012      	beq.n	800385e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b00      	cmp	r3, #0
 8003842:	d105      	bne.n	8003850 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003848:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 feab 	bl	80045ac <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2202      	movs	r2, #2
 800385c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d004      	beq.n	8003872 <HAL_ADC_IRQHandler+0x72>
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10a      	bne.n	8003888 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 8083 	beq.w	8003984 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d07d      	beq.n	8003984 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b00      	cmp	r3, #0
 8003892:	d105      	bne.n	80038a0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003898:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff fba8 	bl	8002ffa <LL_ADC_REG_IsTriggerSourceSWStart>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d062      	beq.n	8003976 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a5d      	ldr	r2, [pc, #372]	; (8003a2c <HAL_ADC_IRQHandler+0x22c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d002      	beq.n	80038c0 <HAL_ADC_IRQHandler+0xc0>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	e000      	b.n	80038c2 <HAL_ADC_IRQHandler+0xc2>
 80038c0:	4b5b      	ldr	r3, [pc, #364]	; (8003a30 <HAL_ADC_IRQHandler+0x230>)
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6812      	ldr	r2, [r2, #0]
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d008      	beq.n	80038dc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2b05      	cmp	r3, #5
 80038d4:	d002      	beq.n	80038dc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2b09      	cmp	r3, #9
 80038da:	d104      	bne.n	80038e6 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	623b      	str	r3, [r7, #32]
 80038e4:	e00c      	b.n	8003900 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a50      	ldr	r2, [pc, #320]	; (8003a2c <HAL_ADC_IRQHandler+0x22c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d002      	beq.n	80038f6 <HAL_ADC_IRQHandler+0xf6>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	e000      	b.n	80038f8 <HAL_ADC_IRQHandler+0xf8>
 80038f6:	4b4e      	ldr	r3, [pc, #312]	; (8003a30 <HAL_ADC_IRQHandler+0x230>)
 80038f8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d135      	bne.n	8003976 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b08      	cmp	r3, #8
 8003916:	d12e      	bne.n	8003976 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff fcb2 	bl	8003286 <LL_ADC_REG_IsConversionOngoing>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d11a      	bne.n	800395e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 020c 	bic.w	r2, r2, #12
 8003936:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d112      	bne.n	8003976 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003954:	f043 0201 	orr.w	r2, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	655a      	str	r2, [r3, #84]	; 0x54
 800395c:	e00b      	b.n	8003976 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003962:	f043 0210 	orr.w	r2, r3, #16
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396e:	f043 0201 	orr.w	r2, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f95c 	bl	8003c34 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	220c      	movs	r2, #12
 8003982:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b00      	cmp	r3, #0
 800398c:	d004      	beq.n	8003998 <HAL_ADC_IRQHandler+0x198>
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	f003 0320 	and.w	r3, r3, #32
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10b      	bne.n	80039b0 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 809f 	beq.w	8003ae2 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8099 	beq.w	8003ae2 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d105      	bne.n	80039c8 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff fb53 	bl	8003078 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80039d2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff fb0e 	bl	8002ffa <LL_ADC_REG_IsTriggerSourceSWStart>
 80039de:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a11      	ldr	r2, [pc, #68]	; (8003a2c <HAL_ADC_IRQHandler+0x22c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d002      	beq.n	80039f0 <HAL_ADC_IRQHandler+0x1f0>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	e000      	b.n	80039f2 <HAL_ADC_IRQHandler+0x1f2>
 80039f0:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <HAL_ADC_IRQHandler+0x230>)
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6812      	ldr	r2, [r2, #0]
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d008      	beq.n	8003a0c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2b06      	cmp	r3, #6
 8003a04:	d002      	beq.n	8003a0c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2b07      	cmp	r3, #7
 8003a0a:	d104      	bne.n	8003a16 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	623b      	str	r3, [r7, #32]
 8003a14:	e013      	b.n	8003a3e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a04      	ldr	r2, [pc, #16]	; (8003a2c <HAL_ADC_IRQHandler+0x22c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d009      	beq.n	8003a34 <HAL_ADC_IRQHandler+0x234>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	e007      	b.n	8003a36 <HAL_ADC_IRQHandler+0x236>
 8003a26:	bf00      	nop
 8003a28:	50040300 	.word	0x50040300
 8003a2c:	50040100 	.word	0x50040100
 8003a30:	50040000 	.word	0x50040000
 8003a34:	4b7d      	ldr	r3, [pc, #500]	; (8003c2c <HAL_ADC_IRQHandler+0x42c>)
 8003a36:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d047      	beq.n	8003ad4 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d007      	beq.n	8003a5e <HAL_ADC_IRQHandler+0x25e>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d03f      	beq.n	8003ad4 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d13a      	bne.n	8003ad4 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a68:	2b40      	cmp	r3, #64	; 0x40
 8003a6a:	d133      	bne.n	8003ad4 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d12e      	bne.n	8003ad4 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff fc16 	bl	80032ac <LL_ADC_INJ_IsConversionOngoing>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d11a      	bne.n	8003abc <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a94:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d112      	bne.n	8003ad4 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab2:	f043 0201 	orr.w	r2, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	655a      	str	r2, [r3, #84]	; 0x54
 8003aba:	e00b      	b.n	8003ad4 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac0:	f043 0210 	orr.w	r2, r3, #16
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003acc:	f043 0201 	orr.w	r2, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 fd41 	bl	800455c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2260      	movs	r2, #96	; 0x60
 8003ae0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d011      	beq.n	8003b10 <HAL_ADC_IRQHandler+0x310>
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00c      	beq.n	8003b10 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f8a0 	bl	8003c48 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2280      	movs	r2, #128	; 0x80
 8003b0e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d012      	beq.n	8003b40 <HAL_ADC_IRQHandler+0x340>
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00d      	beq.n	8003b40 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b28:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 fd27 	bl	8004584 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b3e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d012      	beq.n	8003b70 <HAL_ADC_IRQHandler+0x370>
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00d      	beq.n	8003b70 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fd19 	bl	8004598 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b6e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f003 0310 	and.w	r3, r3, #16
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d036      	beq.n	8003be8 <HAL_ADC_IRQHandler+0x3e8>
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d031      	beq.n	8003be8 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d102      	bne.n	8003b92 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b90:	e014      	b.n	8003bbc <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003b98:	4825      	ldr	r0, [pc, #148]	; (8003c30 <HAL_ADC_IRQHandler+0x430>)
 8003b9a:	f7ff fadd 	bl	8003158 <LL_ADC_GetMultiDMATransfer>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00b      	beq.n	8003bbc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba8:	e008      	b.n	8003bbc <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d10e      	bne.n	8003be0 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd2:	f043 0202 	orr.w	r2, r3, #2
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f83e 	bl	8003c5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2210      	movs	r2, #16
 8003be6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d018      	beq.n	8003c24 <HAL_ADC_IRQHandler+0x424>
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d013      	beq.n	8003c24 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c00:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0c:	f043 0208 	orr.w	r2, r3, #8
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c1c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fca6 	bl	8004570 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003c24:	bf00      	nop
 8003c26:	3728      	adds	r7, #40	; 0x28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	50040000 	.word	0x50040000
 8003c30:	50040300 	.word	0x50040300

08003c34 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b0b6      	sub	sp, #216	; 0xd8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x22>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e3c7      	b.n	8004422 <HAL_ADC_ConfigChannel+0x7b2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff faf1 	bl	8003286 <LL_ADC_REG_IsConversionOngoing>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f040 83a8 	bne.w	80043fc <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b05      	cmp	r3, #5
 8003cb2:	d824      	bhi.n	8003cfe <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	3b02      	subs	r3, #2
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d81b      	bhi.n	8003cf6 <HAL_ADC_ConfigChannel+0x86>
 8003cbe:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <HAL_ADC_ConfigChannel+0x54>)
 8003cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc4:	08003cd5 	.word	0x08003cd5
 8003cc8:	08003cdd 	.word	0x08003cdd
 8003ccc:	08003ce5 	.word	0x08003ce5
 8003cd0:	08003ced 	.word	0x08003ced
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	220c      	movs	r2, #12
 8003cd8:	605a      	str	r2, [r3, #4]
          break;
 8003cda:	e011      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2212      	movs	r2, #18
 8003ce0:	605a      	str	r2, [r3, #4]
          break;
 8003ce2:	e00d      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2218      	movs	r2, #24
 8003ce8:	605a      	str	r2, [r3, #4]
          break;
 8003cea:	e009      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cf2:	605a      	str	r2, [r3, #4]
          break;
 8003cf4:	e004      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2206      	movs	r2, #6
 8003cfa:	605a      	str	r2, [r3, #4]
          break;
 8003cfc:	e000      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003cfe:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	6859      	ldr	r1, [r3, #4]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	f7ff f987 	bl	8003020 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff fab5 	bl	8003286 <LL_ADC_REG_IsConversionOngoing>
 8003d1c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff fac1 	bl	80032ac <LL_ADC_INJ_IsConversionOngoing>
 8003d2a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f040 81a6 	bne.w	8004084 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f040 81a1 	bne.w	8004084 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	6819      	ldr	r1, [r3, #0]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f7ff f9a5 	bl	800309e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	695a      	ldr	r2, [r3, #20]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	08db      	lsrs	r3, r3, #3
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d00a      	beq.n	8003d8c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6919      	ldr	r1, [r3, #16]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d86:	f7ff f8e3 	bl	8002f50 <LL_ADC_SetOffset>
 8003d8a:	e17b      	b.n	8004084 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2100      	movs	r1, #0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff f900 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10a      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x148>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2100      	movs	r1, #0
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff f8f5 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 8003dae:	4603      	mov	r3, r0
 8003db0:	0e9b      	lsrs	r3, r3, #26
 8003db2:	f003 021f 	and.w	r2, r3, #31
 8003db6:	e01e      	b.n	8003df6 <HAL_ADC_ConfigChannel+0x186>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff f8ea 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003dce:	fa93 f3a3 	rbit	r3, r3
 8003dd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003dd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003dda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003dde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003de6:	2320      	movs	r3, #32
 8003de8:	e004      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003dea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003dee:	fab3 f383 	clz	r3, r3
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d105      	bne.n	8003e0e <HAL_ADC_ConfigChannel+0x19e>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	0e9b      	lsrs	r3, r3, #26
 8003e08:	f003 031f 	and.w	r3, r3, #31
 8003e0c:	e018      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x1d0>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e1a:	fa93 f3a3 	rbit	r3, r3
 8003e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003e2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003e32:	2320      	movs	r3, #32
 8003e34:	e004      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003e36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e3a:	fab3 f383 	clz	r3, r3
 8003e3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d106      	bne.n	8003e52 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff f8b9 	bl	8002fc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2101      	movs	r1, #1
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff f89d 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10a      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x20e>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff f892 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 8003e74:	4603      	mov	r3, r0
 8003e76:	0e9b      	lsrs	r3, r3, #26
 8003e78:	f003 021f 	and.w	r2, r3, #31
 8003e7c:	e01e      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x24c>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2101      	movs	r1, #1
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff f887 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e94:	fa93 f3a3 	rbit	r3, r3
 8003e98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003e9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003ea4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003eac:	2320      	movs	r3, #32
 8003eae:	e004      	b.n	8003eba <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003eb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003eb4:	fab3 f383 	clz	r3, r3
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d105      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x264>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	0e9b      	lsrs	r3, r3, #26
 8003ece:	f003 031f 	and.w	r3, r3, #31
 8003ed2:	e018      	b.n	8003f06 <HAL_ADC_ConfigChannel+0x296>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ee0:	fa93 f3a3 	rbit	r3, r3
 8003ee4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003ee8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003eec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003ef0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003ef8:	2320      	movs	r3, #32
 8003efa:	e004      	b.n	8003f06 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003efc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f00:	fab3 f383 	clz	r3, r3
 8003f04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d106      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	2101      	movs	r1, #1
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff f856 	bl	8002fc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2102      	movs	r1, #2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff f83a 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x2d4>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2102      	movs	r1, #2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff f82f 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	0e9b      	lsrs	r3, r3, #26
 8003f3e:	f003 021f 	and.w	r2, r3, #31
 8003f42:	e01e      	b.n	8003f82 <HAL_ADC_ConfigChannel+0x312>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2102      	movs	r1, #2
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff f824 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f5a:	fa93 f3a3 	rbit	r3, r3
 8003f5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003f62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003f6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003f72:	2320      	movs	r3, #32
 8003f74:	e004      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003f76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f7a:	fab3 f383 	clz	r3, r3
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d105      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x32a>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	0e9b      	lsrs	r3, r3, #26
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	e016      	b.n	8003fc8 <HAL_ADC_ConfigChannel+0x358>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fa6:	fa93 f3a3 	rbit	r3, r3
 8003faa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003fac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003fb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003fba:	2320      	movs	r3, #32
 8003fbc:	e004      	b.n	8003fc8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003fbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fc2:	fab3 f383 	clz	r3, r3
 8003fc6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d106      	bne.n	8003fda <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fe fff5 	bl	8002fc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2103      	movs	r1, #3
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fe ffd9 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <HAL_ADC_ConfigChannel+0x396>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2103      	movs	r1, #3
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fe ffce 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	0e9b      	lsrs	r3, r3, #26
 8004000:	f003 021f 	and.w	r2, r3, #31
 8004004:	e017      	b.n	8004036 <HAL_ADC_ConfigChannel+0x3c6>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2103      	movs	r1, #3
 800400c:	4618      	mov	r0, r3
 800400e:	f7fe ffc3 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 8004012:	4603      	mov	r3, r0
 8004014:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004018:	fa93 f3a3 	rbit	r3, r3
 800401c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800401e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004020:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004022:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004028:	2320      	movs	r3, #32
 800402a:	e003      	b.n	8004034 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800402c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800402e:	fab3 f383 	clz	r3, r3
 8004032:	b2db      	uxtb	r3, r3
 8004034:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800403e:	2b00      	cmp	r3, #0
 8004040:	d105      	bne.n	800404e <HAL_ADC_ConfigChannel+0x3de>
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	0e9b      	lsrs	r3, r3, #26
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	e011      	b.n	8004072 <HAL_ADC_ConfigChannel+0x402>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004054:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004056:	fa93 f3a3 	rbit	r3, r3
 800405a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800405c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800405e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004066:	2320      	movs	r3, #32
 8004068:	e003      	b.n	8004072 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800406a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800406c:	fab3 f383 	clz	r3, r3
 8004070:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004072:	429a      	cmp	r2, r3
 8004074:	d106      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2200      	movs	r2, #0
 800407c:	2103      	movs	r1, #3
 800407e:	4618      	mov	r0, r3
 8004080:	f7fe ffa0 	bl	8002fc4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff f8d5 	bl	8003238 <LL_ADC_IsEnabled>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	f040 813f 	bne.w	8004314 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	6819      	ldr	r1, [r3, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	461a      	mov	r2, r3
 80040a4:	f7ff f826 	bl	80030f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	4a8e      	ldr	r2, [pc, #568]	; (80042e8 <HAL_ADC_ConfigChannel+0x678>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	f040 8130 	bne.w	8004314 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10b      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x46c>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	0e9b      	lsrs	r3, r3, #26
 80040ca:	3301      	adds	r3, #1
 80040cc:	f003 031f 	and.w	r3, r3, #31
 80040d0:	2b09      	cmp	r3, #9
 80040d2:	bf94      	ite	ls
 80040d4:	2301      	movls	r3, #1
 80040d6:	2300      	movhi	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	e019      	b.n	8004110 <HAL_ADC_ConfigChannel+0x4a0>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040e4:	fa93 f3a3 	rbit	r3, r3
 80040e8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80040ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040ec:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80040ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80040f4:	2320      	movs	r3, #32
 80040f6:	e003      	b.n	8004100 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80040f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040fa:	fab3 f383 	clz	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	3301      	adds	r3, #1
 8004102:	f003 031f 	and.w	r3, r3, #31
 8004106:	2b09      	cmp	r3, #9
 8004108:	bf94      	ite	ls
 800410a:	2301      	movls	r3, #1
 800410c:	2300      	movhi	r3, #0
 800410e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004110:	2b00      	cmp	r3, #0
 8004112:	d079      	beq.n	8004208 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800411c:	2b00      	cmp	r3, #0
 800411e:	d107      	bne.n	8004130 <HAL_ADC_ConfigChannel+0x4c0>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	0e9b      	lsrs	r3, r3, #26
 8004126:	3301      	adds	r3, #1
 8004128:	069b      	lsls	r3, r3, #26
 800412a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800412e:	e015      	b.n	800415c <HAL_ADC_ConfigChannel+0x4ec>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004138:	fa93 f3a3 	rbit	r3, r3
 800413c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800413e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004140:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004148:	2320      	movs	r3, #32
 800414a:	e003      	b.n	8004154 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800414c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800414e:	fab3 f383 	clz	r3, r3
 8004152:	b2db      	uxtb	r3, r3
 8004154:	3301      	adds	r3, #1
 8004156:	069b      	lsls	r3, r3, #26
 8004158:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004164:	2b00      	cmp	r3, #0
 8004166:	d109      	bne.n	800417c <HAL_ADC_ConfigChannel+0x50c>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	0e9b      	lsrs	r3, r3, #26
 800416e:	3301      	adds	r3, #1
 8004170:	f003 031f 	and.w	r3, r3, #31
 8004174:	2101      	movs	r1, #1
 8004176:	fa01 f303 	lsl.w	r3, r1, r3
 800417a:	e017      	b.n	80041ac <HAL_ADC_ConfigChannel+0x53c>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004184:	fa93 f3a3 	rbit	r3, r3
 8004188:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800418a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800418c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800418e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004194:	2320      	movs	r3, #32
 8004196:	e003      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800419a:	fab3 f383 	clz	r3, r3
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	3301      	adds	r3, #1
 80041a2:	f003 031f 	and.w	r3, r3, #31
 80041a6:	2101      	movs	r1, #1
 80041a8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ac:	ea42 0103 	orr.w	r1, r2, r3
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10a      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x562>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	0e9b      	lsrs	r3, r3, #26
 80041c2:	3301      	adds	r3, #1
 80041c4:	f003 021f 	and.w	r2, r3, #31
 80041c8:	4613      	mov	r3, r2
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	4413      	add	r3, r2
 80041ce:	051b      	lsls	r3, r3, #20
 80041d0:	e018      	b.n	8004204 <HAL_ADC_ConfigChannel+0x594>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041da:	fa93 f3a3 	rbit	r3, r3
 80041de:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80041e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80041e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80041ea:	2320      	movs	r3, #32
 80041ec:	e003      	b.n	80041f6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80041ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f0:	fab3 f383 	clz	r3, r3
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	3301      	adds	r3, #1
 80041f8:	f003 021f 	and.w	r2, r3, #31
 80041fc:	4613      	mov	r3, r2
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	4413      	add	r3, r2
 8004202:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004204:	430b      	orrs	r3, r1
 8004206:	e080      	b.n	800430a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004210:	2b00      	cmp	r3, #0
 8004212:	d107      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x5b4>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	0e9b      	lsrs	r3, r3, #26
 800421a:	3301      	adds	r3, #1
 800421c:	069b      	lsls	r3, r3, #26
 800421e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004222:	e015      	b.n	8004250 <HAL_ADC_ConfigChannel+0x5e0>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422c:	fa93 f3a3 	rbit	r3, r3
 8004230:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004234:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800423c:	2320      	movs	r3, #32
 800423e:	e003      	b.n	8004248 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004242:	fab3 f383 	clz	r3, r3
 8004246:	b2db      	uxtb	r3, r3
 8004248:	3301      	adds	r3, #1
 800424a:	069b      	lsls	r3, r3, #26
 800424c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004258:	2b00      	cmp	r3, #0
 800425a:	d109      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x600>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	0e9b      	lsrs	r3, r3, #26
 8004262:	3301      	adds	r3, #1
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	2101      	movs	r1, #1
 800426a:	fa01 f303 	lsl.w	r3, r1, r3
 800426e:	e017      	b.n	80042a0 <HAL_ADC_ConfigChannel+0x630>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	fa93 f3a3 	rbit	r3, r3
 800427c:	61fb      	str	r3, [r7, #28]
  return result;
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004288:	2320      	movs	r3, #32
 800428a:	e003      	b.n	8004294 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	fab3 f383 	clz	r3, r3
 8004292:	b2db      	uxtb	r3, r3
 8004294:	3301      	adds	r3, #1
 8004296:	f003 031f 	and.w	r3, r3, #31
 800429a:	2101      	movs	r1, #1
 800429c:	fa01 f303 	lsl.w	r3, r1, r3
 80042a0:	ea42 0103 	orr.w	r1, r2, r3
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10d      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x65c>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	0e9b      	lsrs	r3, r3, #26
 80042b6:	3301      	adds	r3, #1
 80042b8:	f003 021f 	and.w	r2, r3, #31
 80042bc:	4613      	mov	r3, r2
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	4413      	add	r3, r2
 80042c2:	3b1e      	subs	r3, #30
 80042c4:	051b      	lsls	r3, r3, #20
 80042c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042ca:	e01d      	b.n	8004308 <HAL_ADC_ConfigChannel+0x698>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	fa93 f3a3 	rbit	r3, r3
 80042d8:	613b      	str	r3, [r7, #16]
  return result;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d103      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80042e4:	2320      	movs	r3, #32
 80042e6:	e005      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x684>
 80042e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	fab3 f383 	clz	r3, r3
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	3301      	adds	r3, #1
 80042f6:	f003 021f 	and.w	r2, r3, #31
 80042fa:	4613      	mov	r3, r2
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	4413      	add	r3, r2
 8004300:	3b1e      	subs	r3, #30
 8004302:	051b      	lsls	r3, r3, #20
 8004304:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004308:	430b      	orrs	r3, r1
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	6892      	ldr	r2, [r2, #8]
 800430e:	4619      	mov	r1, r3
 8004310:	f7fe fec5 	bl	800309e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	4b44      	ldr	r3, [pc, #272]	; (800442c <HAL_ADC_ConfigChannel+0x7bc>)
 800431a:	4013      	ands	r3, r2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d07a      	beq.n	8004416 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004320:	4843      	ldr	r0, [pc, #268]	; (8004430 <HAL_ADC_ConfigChannel+0x7c0>)
 8004322:	f7fe fe07 	bl	8002f34 <LL_ADC_GetCommonPathInternalCh>
 8004326:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a41      	ldr	r2, [pc, #260]	; (8004434 <HAL_ADC_ConfigChannel+0x7c4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d12c      	bne.n	800438e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004334:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004338:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d126      	bne.n	800438e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a3c      	ldr	r2, [pc, #240]	; (8004438 <HAL_ADC_ConfigChannel+0x7c8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d004      	beq.n	8004354 <HAL_ADC_ConfigChannel+0x6e4>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a3b      	ldr	r2, [pc, #236]	; (800443c <HAL_ADC_ConfigChannel+0x7cc>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d15d      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004354:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004358:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800435c:	4619      	mov	r1, r3
 800435e:	4834      	ldr	r0, [pc, #208]	; (8004430 <HAL_ADC_ConfigChannel+0x7c0>)
 8004360:	f7fe fdd5 	bl	8002f0e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004364:	4b36      	ldr	r3, [pc, #216]	; (8004440 <HAL_ADC_ConfigChannel+0x7d0>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	099b      	lsrs	r3, r3, #6
 800436a:	4a36      	ldr	r2, [pc, #216]	; (8004444 <HAL_ADC_ConfigChannel+0x7d4>)
 800436c:	fba2 2303 	umull	r2, r3, r2, r3
 8004370:	099b      	lsrs	r3, r3, #6
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	4613      	mov	r3, r2
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	4413      	add	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800437e:	e002      	b.n	8004386 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3b01      	subs	r3, #1
 8004384:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1f9      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800438c:	e040      	b.n	8004410 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a2d      	ldr	r2, [pc, #180]	; (8004448 <HAL_ADC_ConfigChannel+0x7d8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d118      	bne.n	80043ca <HAL_ADC_ConfigChannel+0x75a>
 8004398:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800439c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d112      	bne.n	80043ca <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a23      	ldr	r2, [pc, #140]	; (8004438 <HAL_ADC_ConfigChannel+0x7c8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d004      	beq.n	80043b8 <HAL_ADC_ConfigChannel+0x748>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a22      	ldr	r2, [pc, #136]	; (800443c <HAL_ADC_ConfigChannel+0x7cc>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d12d      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043c0:	4619      	mov	r1, r3
 80043c2:	481b      	ldr	r0, [pc, #108]	; (8004430 <HAL_ADC_ConfigChannel+0x7c0>)
 80043c4:	f7fe fda3 	bl	8002f0e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043c8:	e024      	b.n	8004414 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a1f      	ldr	r2, [pc, #124]	; (800444c <HAL_ADC_ConfigChannel+0x7dc>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d120      	bne.n	8004416 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d11a      	bne.n	8004416 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a14      	ldr	r2, [pc, #80]	; (8004438 <HAL_ADC_ConfigChannel+0x7c8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d115      	bne.n	8004416 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043f2:	4619      	mov	r1, r3
 80043f4:	480e      	ldr	r0, [pc, #56]	; (8004430 <HAL_ADC_ConfigChannel+0x7c0>)
 80043f6:	f7fe fd8a 	bl	8002f0e <LL_ADC_SetCommonPathInternalCh>
 80043fa:	e00c      	b.n	8004416 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004400:	f043 0220 	orr.w	r2, r3, #32
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800440e:	e002      	b.n	8004416 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004410:	bf00      	nop
 8004412:	e000      	b.n	8004416 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004414:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800441e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004422:	4618      	mov	r0, r3
 8004424:	37d8      	adds	r7, #216	; 0xd8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	80080000 	.word	0x80080000
 8004430:	50040300 	.word	0x50040300
 8004434:	c7520000 	.word	0xc7520000
 8004438:	50040000 	.word	0x50040000
 800443c:	50040200 	.word	0x50040200
 8004440:	20000068 	.word	0x20000068
 8004444:	053e2d63 	.word	0x053e2d63
 8004448:	cb840000 	.word	0xcb840000
 800444c:	80000001 	.word	0x80000001

08004450 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004458:	2300      	movs	r3, #0
 800445a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f7fe fee9 	bl	8003238 <LL_ADC_IsEnabled>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d169      	bne.n	8004540 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	4b36      	ldr	r3, [pc, #216]	; (800454c <ADC_Enable+0xfc>)
 8004474:	4013      	ands	r3, r2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00d      	beq.n	8004496 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447e:	f043 0210 	orr.w	r2, r3, #16
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448a:	f043 0201 	orr.w	r2, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e055      	b.n	8004542 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe feb8 	bl	8003210 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80044a0:	482b      	ldr	r0, [pc, #172]	; (8004550 <ADC_Enable+0x100>)
 80044a2:	f7fe fd47 	bl	8002f34 <LL_ADC_GetCommonPathInternalCh>
 80044a6:	4603      	mov	r3, r0
 80044a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d013      	beq.n	80044d8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044b0:	4b28      	ldr	r3, [pc, #160]	; (8004554 <ADC_Enable+0x104>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	099b      	lsrs	r3, r3, #6
 80044b6:	4a28      	ldr	r2, [pc, #160]	; (8004558 <ADC_Enable+0x108>)
 80044b8:	fba2 2303 	umull	r2, r3, r2, r3
 80044bc:	099b      	lsrs	r3, r3, #6
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	4613      	mov	r3, r2
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80044ca:	e002      	b.n	80044d2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1f9      	bne.n	80044cc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80044d8:	f7fe fcfa 	bl	8002ed0 <HAL_GetTick>
 80044dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044de:	e028      	b.n	8004532 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fe fea7 	bl	8003238 <LL_ADC_IsEnabled>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d104      	bne.n	80044fa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fe fe8b 	bl	8003210 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044fa:	f7fe fce9 	bl	8002ed0 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d914      	bls.n	8004532 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b01      	cmp	r3, #1
 8004514:	d00d      	beq.n	8004532 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451a:	f043 0210 	orr.w	r2, r3, #16
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004526:	f043 0201 	orr.w	r2, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e007      	b.n	8004542 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b01      	cmp	r3, #1
 800453e:	d1cf      	bne.n	80044e0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	8000003f 	.word	0x8000003f
 8004550:	50040300 	.word	0x50040300
 8004554:	20000068 	.word	0x20000068
 8004558:	053e2d63 	.word	0x053e2d63

0800455c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045d0:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <__NVIC_SetPriorityGrouping+0x44>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045dc:	4013      	ands	r3, r2
 80045de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045f2:	4a04      	ldr	r2, [pc, #16]	; (8004604 <__NVIC_SetPriorityGrouping+0x44>)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	60d3      	str	r3, [r2, #12]
}
 80045f8:	bf00      	nop
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	e000ed00 	.word	0xe000ed00

08004608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800460c:	4b04      	ldr	r3, [pc, #16]	; (8004620 <__NVIC_GetPriorityGrouping+0x18>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	0a1b      	lsrs	r3, r3, #8
 8004612:	f003 0307 	and.w	r3, r3, #7
}
 8004616:	4618      	mov	r0, r3
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	e000ed00 	.word	0xe000ed00

08004624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800462e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004632:	2b00      	cmp	r3, #0
 8004634:	db0b      	blt.n	800464e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004636:	79fb      	ldrb	r3, [r7, #7]
 8004638:	f003 021f 	and.w	r2, r3, #31
 800463c:	4907      	ldr	r1, [pc, #28]	; (800465c <__NVIC_EnableIRQ+0x38>)
 800463e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004642:	095b      	lsrs	r3, r3, #5
 8004644:	2001      	movs	r0, #1
 8004646:	fa00 f202 	lsl.w	r2, r0, r2
 800464a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	e000e100 	.word	0xe000e100

08004660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	6039      	str	r1, [r7, #0]
 800466a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800466c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004670:	2b00      	cmp	r3, #0
 8004672:	db0a      	blt.n	800468a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	b2da      	uxtb	r2, r3
 8004678:	490c      	ldr	r1, [pc, #48]	; (80046ac <__NVIC_SetPriority+0x4c>)
 800467a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467e:	0112      	lsls	r2, r2, #4
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	440b      	add	r3, r1
 8004684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004688:	e00a      	b.n	80046a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	b2da      	uxtb	r2, r3
 800468e:	4908      	ldr	r1, [pc, #32]	; (80046b0 <__NVIC_SetPriority+0x50>)
 8004690:	79fb      	ldrb	r3, [r7, #7]
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	3b04      	subs	r3, #4
 8004698:	0112      	lsls	r2, r2, #4
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	440b      	add	r3, r1
 800469e:	761a      	strb	r2, [r3, #24]
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	e000e100 	.word	0xe000e100
 80046b0:	e000ed00 	.word	0xe000ed00

080046b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b089      	sub	sp, #36	; 0x24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	f1c3 0307 	rsb	r3, r3, #7
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	bf28      	it	cs
 80046d2:	2304      	movcs	r3, #4
 80046d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	3304      	adds	r3, #4
 80046da:	2b06      	cmp	r3, #6
 80046dc:	d902      	bls.n	80046e4 <NVIC_EncodePriority+0x30>
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	3b03      	subs	r3, #3
 80046e2:	e000      	b.n	80046e6 <NVIC_EncodePriority+0x32>
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046e8:	f04f 32ff 	mov.w	r2, #4294967295
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43da      	mvns	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	401a      	ands	r2, r3
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	fa01 f303 	lsl.w	r3, r1, r3
 8004706:	43d9      	mvns	r1, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800470c:	4313      	orrs	r3, r2
         );
}
 800470e:	4618      	mov	r0, r3
 8004710:	3724      	adds	r7, #36	; 0x24
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3b01      	subs	r3, #1
 8004728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800472c:	d301      	bcc.n	8004732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800472e:	2301      	movs	r3, #1
 8004730:	e00f      	b.n	8004752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004732:	4a0a      	ldr	r2, [pc, #40]	; (800475c <SysTick_Config+0x40>)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3b01      	subs	r3, #1
 8004738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800473a:	210f      	movs	r1, #15
 800473c:	f04f 30ff 	mov.w	r0, #4294967295
 8004740:	f7ff ff8e 	bl	8004660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004744:	4b05      	ldr	r3, [pc, #20]	; (800475c <SysTick_Config+0x40>)
 8004746:	2200      	movs	r2, #0
 8004748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800474a:	4b04      	ldr	r3, [pc, #16]	; (800475c <SysTick_Config+0x40>)
 800474c:	2207      	movs	r2, #7
 800474e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	e000e010 	.word	0xe000e010

08004760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff ff29 	bl	80045c0 <__NVIC_SetPriorityGrouping>
}
 800476e:	bf00      	nop
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b086      	sub	sp, #24
 800477a:	af00      	add	r7, sp, #0
 800477c:	4603      	mov	r3, r0
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
 8004782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004784:	2300      	movs	r3, #0
 8004786:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004788:	f7ff ff3e 	bl	8004608 <__NVIC_GetPriorityGrouping>
 800478c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	68b9      	ldr	r1, [r7, #8]
 8004792:	6978      	ldr	r0, [r7, #20]
 8004794:	f7ff ff8e 	bl	80046b4 <NVIC_EncodePriority>
 8004798:	4602      	mov	r2, r0
 800479a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800479e:	4611      	mov	r1, r2
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff ff5d 	bl	8004660 <__NVIC_SetPriority>
}
 80047a6:	bf00      	nop
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	4603      	mov	r3, r0
 80047b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff ff31 	bl	8004624 <__NVIC_EnableIRQ>
}
 80047c2:	bf00      	nop
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7ff ffa2 	bl	800471c <SysTick_Config>
 80047d8:	4603      	mov	r3, r0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
	...

080047e4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80047f2:	2300      	movs	r3, #0
 80047f4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80047f6:	4b2f      	ldr	r3, [pc, #188]	; (80048b4 <HAL_FLASH_Program+0xd0>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_FLASH_Program+0x1e>
 80047fe:	2302      	movs	r3, #2
 8004800:	e053      	b.n	80048aa <HAL_FLASH_Program+0xc6>
 8004802:	4b2c      	ldr	r3, [pc, #176]	; (80048b4 <HAL_FLASH_Program+0xd0>)
 8004804:	2201      	movs	r2, #1
 8004806:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004808:	f24c 3050 	movw	r0, #50000	; 0xc350
 800480c:	f000 f888 	bl	8004920 <FLASH_WaitForLastOperation>
 8004810:	4603      	mov	r3, r0
 8004812:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8004814:	7dfb      	ldrb	r3, [r7, #23]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d143      	bne.n	80048a2 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800481a:	4b26      	ldr	r3, [pc, #152]	; (80048b4 <HAL_FLASH_Program+0xd0>)
 800481c:	2200      	movs	r2, #0
 800481e:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004820:	4b25      	ldr	r3, [pc, #148]	; (80048b8 <HAL_FLASH_Program+0xd4>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004828:	2b00      	cmp	r3, #0
 800482a:	d009      	beq.n	8004840 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800482c:	4b22      	ldr	r3, [pc, #136]	; (80048b8 <HAL_FLASH_Program+0xd4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a21      	ldr	r2, [pc, #132]	; (80048b8 <HAL_FLASH_Program+0xd4>)
 8004832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004836:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004838:	4b1e      	ldr	r3, [pc, #120]	; (80048b4 <HAL_FLASH_Program+0xd0>)
 800483a:	2202      	movs	r2, #2
 800483c:	771a      	strb	r2, [r3, #28]
 800483e:	e002      	b.n	8004846 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004840:	4b1c      	ldr	r3, [pc, #112]	; (80048b4 <HAL_FLASH_Program+0xd0>)
 8004842:	2200      	movs	r2, #0
 8004844:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d107      	bne.n	800485c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800484c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004850:	68b8      	ldr	r0, [r7, #8]
 8004852:	f000 f8bb 	bl	80049cc <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8004856:	2301      	movs	r3, #1
 8004858:	613b      	str	r3, [r7, #16]
 800485a:	e010      	b.n	800487e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d002      	beq.n	8004868 <HAL_FLASH_Program+0x84>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b02      	cmp	r3, #2
 8004866:	d10a      	bne.n	800487e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	4619      	mov	r1, r3
 800486c:	68b8      	ldr	r0, [r7, #8]
 800486e:	f000 f8d3 	bl	8004a18 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d102      	bne.n	800487e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8004878:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800487c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800487e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004882:	f000 f84d 	bl	8004920 <FLASH_WaitForLastOperation>
 8004886:	4603      	mov	r3, r0
 8004888:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d006      	beq.n	800489e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8004890:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <HAL_FLASH_Program+0xd4>)
 8004892:	695a      	ldr	r2, [r3, #20]
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	43db      	mvns	r3, r3
 8004898:	4907      	ldr	r1, [pc, #28]	; (80048b8 <HAL_FLASH_Program+0xd4>)
 800489a:	4013      	ands	r3, r2
 800489c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800489e:	f000 f9eb 	bl	8004c78 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80048a2:	4b04      	ldr	r3, [pc, #16]	; (80048b4 <HAL_FLASH_Program+0xd0>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	701a      	strb	r2, [r3, #0]

  return status;
 80048a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20000074 	.word	0x20000074
 80048b8:	40022000 	.word	0x40022000

080048bc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80048c6:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <HAL_FLASH_Unlock+0x38>)
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	da0b      	bge.n	80048e6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80048ce:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <HAL_FLASH_Unlock+0x38>)
 80048d0:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <HAL_FLASH_Unlock+0x3c>)
 80048d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80048d4:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <HAL_FLASH_Unlock+0x38>)
 80048d6:	4a09      	ldr	r2, [pc, #36]	; (80048fc <HAL_FLASH_Unlock+0x40>)
 80048d8:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80048da:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <HAL_FLASH_Unlock+0x38>)
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	da01      	bge.n	80048e6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80048e6:	79fb      	ldrb	r3, [r7, #7]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	40022000 	.word	0x40022000
 80048f8:	45670123 	.word	0x45670123
 80048fc:	cdef89ab 	.word	0xcdef89ab

08004900 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <HAL_FLASH_Lock+0x1c>)
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	4a04      	ldr	r2, [pc, #16]	; (800491c <HAL_FLASH_Lock+0x1c>)
 800490a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800490e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	40022000 	.word	0x40022000

08004920 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8004928:	f7fe fad2 	bl	8002ed0 <HAL_GetTick>
 800492c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800492e:	e00d      	b.n	800494c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004936:	d009      	beq.n	800494c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8004938:	f7fe faca 	bl	8002ed0 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	429a      	cmp	r2, r3
 8004946:	d801      	bhi.n	800494c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e037      	b.n	80049bc <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800494c:	4b1d      	ldr	r3, [pc, #116]	; (80049c4 <FLASH_WaitForLastOperation+0xa4>)
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1eb      	bne.n	8004930 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8004958:	4b1a      	ldr	r3, [pc, #104]	; (80049c4 <FLASH_WaitForLastOperation+0xa4>)
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004960:	4013      	ands	r3, r2
 8004962:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d01e      	beq.n	80049a8 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800496a:	4b17      	ldr	r3, [pc, #92]	; (80049c8 <FLASH_WaitForLastOperation+0xa8>)
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	4313      	orrs	r3, r2
 8004972:	4a15      	ldr	r2, [pc, #84]	; (80049c8 <FLASH_WaitForLastOperation+0xa8>)
 8004974:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d007      	beq.n	8004990 <FLASH_WaitForLastOperation+0x70>
 8004980:	4b10      	ldr	r3, [pc, #64]	; (80049c4 <FLASH_WaitForLastOperation+0xa4>)
 8004982:	699a      	ldr	r2, [r3, #24]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800498a:	490e      	ldr	r1, [pc, #56]	; (80049c4 <FLASH_WaitForLastOperation+0xa4>)
 800498c:	4313      	orrs	r3, r2
 800498e:	618b      	str	r3, [r1, #24]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d004      	beq.n	80049a4 <FLASH_WaitForLastOperation+0x84>
 800499a:	4a0a      	ldr	r2, [pc, #40]	; (80049c4 <FLASH_WaitForLastOperation+0xa4>)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80049a2:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e009      	b.n	80049bc <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80049a8:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <FLASH_WaitForLastOperation+0xa4>)
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80049b4:	4b03      	ldr	r3, [pc, #12]	; (80049c4 <FLASH_WaitForLastOperation+0xa4>)
 80049b6:	2201      	movs	r2, #1
 80049b8:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40022000 	.word	0x40022000
 80049c8:	20000074 	.word	0x20000074

080049cc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80049d8:	4b0e      	ldr	r3, [pc, #56]	; (8004a14 <FLASH_Program_DoubleWord+0x48>)
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	4a0d      	ldr	r2, [pc, #52]	; (8004a14 <FLASH_Program_DoubleWord+0x48>)
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80049ea:	f3bf 8f6f 	isb	sy
}
 80049ee:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80049f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	000a      	movs	r2, r1
 80049fe:	2300      	movs	r3, #0
 8004a00:	68f9      	ldr	r1, [r7, #12]
 8004a02:	3104      	adds	r1, #4
 8004a04:	4613      	mov	r3, r2
 8004a06:	600b      	str	r3, [r1, #0]
}
 8004a08:	bf00      	nop
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	40022000 	.word	0x40022000

08004a18 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b089      	sub	sp, #36	; 0x24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004a22:	2340      	movs	r3, #64	; 0x40
 8004a24:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004a2e:	4b14      	ldr	r3, [pc, #80]	; (8004a80 <FLASH_Program_Fast+0x68>)
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	4a13      	ldr	r2, [pc, #76]	; (8004a80 <FLASH_Program_Fast+0x68>)
 8004a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a38:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a3a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a40:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8004a42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a44:	b672      	cpsid	i
}
 8004a46:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	3304      	adds	r3, #4
 8004a54:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	617b      	str	r3, [r7, #20]
    row_index--;
 8004a5c:	7ffb      	ldrb	r3, [r7, #31]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8004a62:	7ffb      	ldrb	r3, [r7, #31]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1ef      	bne.n	8004a48 <FLASH_Program_Fast+0x30>
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f383 8810 	msr	PRIMASK, r3
}
 8004a72:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8004a74:	bf00      	nop
 8004a76:	3724      	adds	r7, #36	; 0x24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	40022000 	.word	0x40022000

08004a84 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004a8e:	4b49      	ldr	r3, [pc, #292]	; (8004bb4 <HAL_FLASHEx_Erase+0x130>)
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <HAL_FLASHEx_Erase+0x16>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e087      	b.n	8004baa <HAL_FLASHEx_Erase+0x126>
 8004a9a:	4b46      	ldr	r3, [pc, #280]	; (8004bb4 <HAL_FLASHEx_Erase+0x130>)
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004aa0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004aa4:	f7ff ff3c 	bl	8004920 <FLASH_WaitForLastOperation>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d177      	bne.n	8004ba2 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004ab2:	4b40      	ldr	r3, [pc, #256]	; (8004bb4 <HAL_FLASHEx_Erase+0x130>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8004ab8:	4b3f      	ldr	r3, [pc, #252]	; (8004bb8 <HAL_FLASHEx_Erase+0x134>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d013      	beq.n	8004aec <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004ac4:	4b3c      	ldr	r3, [pc, #240]	; (8004bb8 <HAL_FLASHEx_Erase+0x134>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d009      	beq.n	8004ae4 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8004ad0:	4b39      	ldr	r3, [pc, #228]	; (8004bb8 <HAL_FLASHEx_Erase+0x134>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a38      	ldr	r2, [pc, #224]	; (8004bb8 <HAL_FLASHEx_Erase+0x134>)
 8004ad6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ada:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8004adc:	4b35      	ldr	r3, [pc, #212]	; (8004bb4 <HAL_FLASHEx_Erase+0x130>)
 8004ade:	2203      	movs	r2, #3
 8004ae0:	771a      	strb	r2, [r3, #28]
 8004ae2:	e016      	b.n	8004b12 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8004ae4:	4b33      	ldr	r3, [pc, #204]	; (8004bb4 <HAL_FLASHEx_Erase+0x130>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	771a      	strb	r2, [r3, #28]
 8004aea:	e012      	b.n	8004b12 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004aec:	4b32      	ldr	r3, [pc, #200]	; (8004bb8 <HAL_FLASHEx_Erase+0x134>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d009      	beq.n	8004b0c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8004af8:	4b2f      	ldr	r3, [pc, #188]	; (8004bb8 <HAL_FLASHEx_Erase+0x134>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a2e      	ldr	r2, [pc, #184]	; (8004bb8 <HAL_FLASHEx_Erase+0x134>)
 8004afe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b02:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004b04:	4b2b      	ldr	r3, [pc, #172]	; (8004bb4 <HAL_FLASHEx_Erase+0x130>)
 8004b06:	2202      	movs	r2, #2
 8004b08:	771a      	strb	r2, [r3, #28]
 8004b0a:	e002      	b.n	8004b12 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004b0c:	4b29      	ldr	r3, [pc, #164]	; (8004bb4 <HAL_FLASHEx_Erase+0x130>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d113      	bne.n	8004b42 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 f84c 	bl	8004bbc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004b24:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004b28:	f7ff fefa 	bl	8004920 <FLASH_WaitForLastOperation>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8004b30:	4b21      	ldr	r3, [pc, #132]	; (8004bb8 <HAL_FLASHEx_Erase+0x134>)
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	4a20      	ldr	r2, [pc, #128]	; (8004bb8 <HAL_FLASHEx_Erase+0x134>)
 8004b36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b3a:	f023 0304 	bic.w	r3, r3, #4
 8004b3e:	6153      	str	r3, [r2, #20]
 8004b40:	e02d      	b.n	8004b9e <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	f04f 32ff 	mov.w	r2, #4294967295
 8004b48:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	60bb      	str	r3, [r7, #8]
 8004b50:	e01d      	b.n	8004b8e <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	4619      	mov	r1, r3
 8004b58:	68b8      	ldr	r0, [r7, #8]
 8004b5a:	f000 f857 	bl	8004c0c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004b5e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004b62:	f7ff fedd 	bl	8004920 <FLASH_WaitForLastOperation>
 8004b66:	4603      	mov	r3, r0
 8004b68:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004b6a:	4b13      	ldr	r3, [pc, #76]	; (8004bb8 <HAL_FLASHEx_Erase+0x134>)
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	4a12      	ldr	r2, [pc, #72]	; (8004bb8 <HAL_FLASHEx_Erase+0x134>)
 8004b70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004b74:	f023 0302 	bic.w	r3, r3, #2
 8004b78:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	601a      	str	r2, [r3, #0]
          break;
 8004b86:	e00a      	b.n	8004b9e <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	60bb      	str	r3, [r7, #8]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d3d9      	bcc.n	8004b52 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004b9e:	f000 f86b 	bl	8004c78 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004ba2:	4b04      	ldr	r3, [pc, #16]	; (8004bb4 <HAL_FLASHEx_Erase+0x130>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	701a      	strb	r2, [r3, #0]

  return status;
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000074 	.word	0x20000074
 8004bb8:	40022000 	.word	0x40022000

08004bbc <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d005      	beq.n	8004bda <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8004bce:	4b0e      	ldr	r3, [pc, #56]	; (8004c08 <FLASH_MassErase+0x4c>)
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	4a0d      	ldr	r2, [pc, #52]	; (8004c08 <FLASH_MassErase+0x4c>)
 8004bd4:	f043 0304 	orr.w	r3, r3, #4
 8004bd8:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8004be4:	4b08      	ldr	r3, [pc, #32]	; (8004c08 <FLASH_MassErase+0x4c>)
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	4a07      	ldr	r2, [pc, #28]	; (8004c08 <FLASH_MassErase+0x4c>)
 8004bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bee:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004bf0:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <FLASH_MassErase+0x4c>)
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	4a04      	ldr	r2, [pc, #16]	; (8004c08 <FLASH_MassErase+0x4c>)
 8004bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bfa:	6153      	str	r3, [r2, #20]
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	40022000 	.word	0x40022000

08004c0c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d006      	beq.n	8004c2e <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8004c20:	4b14      	ldr	r3, [pc, #80]	; (8004c74 <FLASH_PageErase+0x68>)
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	4a13      	ldr	r2, [pc, #76]	; (8004c74 <FLASH_PageErase+0x68>)
 8004c26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c2a:	6153      	str	r3, [r2, #20]
 8004c2c:	e005      	b.n	8004c3a <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8004c2e:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <FLASH_PageErase+0x68>)
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	4a10      	ldr	r2, [pc, #64]	; (8004c74 <FLASH_PageErase+0x68>)
 8004c34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c38:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8004c3a:	4b0e      	ldr	r3, [pc, #56]	; (8004c74 <FLASH_PageErase+0x68>)
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8004c4a:	490a      	ldr	r1, [pc, #40]	; (8004c74 <FLASH_PageErase+0x68>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004c50:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <FLASH_PageErase+0x68>)
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	4a07      	ldr	r2, [pc, #28]	; (8004c74 <FLASH_PageErase+0x68>)
 8004c56:	f043 0302 	orr.w	r3, r3, #2
 8004c5a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004c5c:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <FLASH_PageErase+0x68>)
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	4a04      	ldr	r2, [pc, #16]	; (8004c74 <FLASH_PageErase+0x68>)
 8004c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c66:	6153      	str	r3, [r2, #20]
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	40022000 	.word	0x40022000

08004c78 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8004c7e:	4b21      	ldr	r3, [pc, #132]	; (8004d04 <FLASH_FlushCaches+0x8c>)
 8004c80:	7f1b      	ldrb	r3, [r3, #28]
 8004c82:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d002      	beq.n	8004c90 <FLASH_FlushCaches+0x18>
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d117      	bne.n	8004cc0 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004c90:	4b1d      	ldr	r3, [pc, #116]	; (8004d08 <FLASH_FlushCaches+0x90>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a1c      	ldr	r2, [pc, #112]	; (8004d08 <FLASH_FlushCaches+0x90>)
 8004c96:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c9a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004c9c:	4b1a      	ldr	r3, [pc, #104]	; (8004d08 <FLASH_FlushCaches+0x90>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a19      	ldr	r2, [pc, #100]	; (8004d08 <FLASH_FlushCaches+0x90>)
 8004ca2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	4b17      	ldr	r3, [pc, #92]	; (8004d08 <FLASH_FlushCaches+0x90>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a16      	ldr	r2, [pc, #88]	; (8004d08 <FLASH_FlushCaches+0x90>)
 8004cae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cb2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004cb4:	4b14      	ldr	r3, [pc, #80]	; (8004d08 <FLASH_FlushCaches+0x90>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a13      	ldr	r2, [pc, #76]	; (8004d08 <FLASH_FlushCaches+0x90>)
 8004cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cbe:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8004cc0:	79fb      	ldrb	r3, [r7, #7]
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d002      	beq.n	8004ccc <FLASH_FlushCaches+0x54>
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d111      	bne.n	8004cf0 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004ccc:	4b0e      	ldr	r3, [pc, #56]	; (8004d08 <FLASH_FlushCaches+0x90>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a0d      	ldr	r2, [pc, #52]	; (8004d08 <FLASH_FlushCaches+0x90>)
 8004cd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <FLASH_FlushCaches+0x90>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a0a      	ldr	r2, [pc, #40]	; (8004d08 <FLASH_FlushCaches+0x90>)
 8004cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ce2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ce4:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <FLASH_FlushCaches+0x90>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a07      	ldr	r2, [pc, #28]	; (8004d08 <FLASH_FlushCaches+0x90>)
 8004cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cee:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004cf0:	4b04      	ldr	r3, [pc, #16]	; (8004d04 <FLASH_FlushCaches+0x8c>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	771a      	strb	r2, [r3, #28]
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	20000074 	.word	0x20000074
 8004d08:	40022000 	.word	0x40022000

08004d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d16:	2300      	movs	r3, #0
 8004d18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d1a:	e17f      	b.n	800501c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	2101      	movs	r1, #1
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	fa01 f303 	lsl.w	r3, r1, r3
 8004d28:	4013      	ands	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 8171 	beq.w	8005016 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f003 0303 	and.w	r3, r3, #3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d005      	beq.n	8004d4c <HAL_GPIO_Init+0x40>
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f003 0303 	and.w	r3, r3, #3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d130      	bne.n	8004dae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	2203      	movs	r2, #3
 8004d58:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4013      	ands	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d82:	2201      	movs	r2, #1
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	43db      	mvns	r3, r3
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	091b      	lsrs	r3, r3, #4
 8004d98:	f003 0201 	and.w	r2, r3, #1
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f003 0303 	and.w	r3, r3, #3
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d118      	bne.n	8004dec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	08db      	lsrs	r3, r3, #3
 8004dd6:	f003 0201 	and.w	r2, r3, #1
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f003 0303 	and.w	r3, r3, #3
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d017      	beq.n	8004e28 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	2203      	movs	r2, #3
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	43db      	mvns	r3, r3
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f003 0303 	and.w	r3, r3, #3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d123      	bne.n	8004e7c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	08da      	lsrs	r2, r3, #3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3208      	adds	r2, #8
 8004e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e40:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	220f      	movs	r2, #15
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	43db      	mvns	r3, r3
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4013      	ands	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	08da      	lsrs	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3208      	adds	r2, #8
 8004e76:	6939      	ldr	r1, [r7, #16]
 8004e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	2203      	movs	r2, #3
 8004e88:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	4013      	ands	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f003 0203 	and.w	r2, r3, #3
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 80ac 	beq.w	8005016 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ebe:	4b5f      	ldr	r3, [pc, #380]	; (800503c <HAL_GPIO_Init+0x330>)
 8004ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec2:	4a5e      	ldr	r2, [pc, #376]	; (800503c <HAL_GPIO_Init+0x330>)
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	6613      	str	r3, [r2, #96]	; 0x60
 8004eca:	4b5c      	ldr	r3, [pc, #368]	; (800503c <HAL_GPIO_Init+0x330>)
 8004ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	60bb      	str	r3, [r7, #8]
 8004ed4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004ed6:	4a5a      	ldr	r2, [pc, #360]	; (8005040 <HAL_GPIO_Init+0x334>)
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	089b      	lsrs	r3, r3, #2
 8004edc:	3302      	adds	r3, #2
 8004ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	220f      	movs	r2, #15
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	43db      	mvns	r3, r3
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f00:	d025      	beq.n	8004f4e <HAL_GPIO_Init+0x242>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a4f      	ldr	r2, [pc, #316]	; (8005044 <HAL_GPIO_Init+0x338>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d01f      	beq.n	8004f4a <HAL_GPIO_Init+0x23e>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a4e      	ldr	r2, [pc, #312]	; (8005048 <HAL_GPIO_Init+0x33c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d019      	beq.n	8004f46 <HAL_GPIO_Init+0x23a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a4d      	ldr	r2, [pc, #308]	; (800504c <HAL_GPIO_Init+0x340>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d013      	beq.n	8004f42 <HAL_GPIO_Init+0x236>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a4c      	ldr	r2, [pc, #304]	; (8005050 <HAL_GPIO_Init+0x344>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00d      	beq.n	8004f3e <HAL_GPIO_Init+0x232>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a4b      	ldr	r2, [pc, #300]	; (8005054 <HAL_GPIO_Init+0x348>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d007      	beq.n	8004f3a <HAL_GPIO_Init+0x22e>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a4a      	ldr	r2, [pc, #296]	; (8005058 <HAL_GPIO_Init+0x34c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d101      	bne.n	8004f36 <HAL_GPIO_Init+0x22a>
 8004f32:	2306      	movs	r3, #6
 8004f34:	e00c      	b.n	8004f50 <HAL_GPIO_Init+0x244>
 8004f36:	2307      	movs	r3, #7
 8004f38:	e00a      	b.n	8004f50 <HAL_GPIO_Init+0x244>
 8004f3a:	2305      	movs	r3, #5
 8004f3c:	e008      	b.n	8004f50 <HAL_GPIO_Init+0x244>
 8004f3e:	2304      	movs	r3, #4
 8004f40:	e006      	b.n	8004f50 <HAL_GPIO_Init+0x244>
 8004f42:	2303      	movs	r3, #3
 8004f44:	e004      	b.n	8004f50 <HAL_GPIO_Init+0x244>
 8004f46:	2302      	movs	r3, #2
 8004f48:	e002      	b.n	8004f50 <HAL_GPIO_Init+0x244>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <HAL_GPIO_Init+0x244>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	f002 0203 	and.w	r2, r2, #3
 8004f56:	0092      	lsls	r2, r2, #2
 8004f58:	4093      	lsls	r3, r2
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f60:	4937      	ldr	r1, [pc, #220]	; (8005040 <HAL_GPIO_Init+0x334>)
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	089b      	lsrs	r3, r3, #2
 8004f66:	3302      	adds	r3, #2
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f6e:	4b3b      	ldr	r3, [pc, #236]	; (800505c <HAL_GPIO_Init+0x350>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	43db      	mvns	r3, r3
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f92:	4a32      	ldr	r2, [pc, #200]	; (800505c <HAL_GPIO_Init+0x350>)
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f98:	4b30      	ldr	r3, [pc, #192]	; (800505c <HAL_GPIO_Init+0x350>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	43db      	mvns	r3, r3
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004fbc:	4a27      	ldr	r2, [pc, #156]	; (800505c <HAL_GPIO_Init+0x350>)
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004fc2:	4b26      	ldr	r3, [pc, #152]	; (800505c <HAL_GPIO_Init+0x350>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004fe6:	4a1d      	ldr	r2, [pc, #116]	; (800505c <HAL_GPIO_Init+0x350>)
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004fec:	4b1b      	ldr	r3, [pc, #108]	; (800505c <HAL_GPIO_Init+0x350>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005010:	4a12      	ldr	r2, [pc, #72]	; (800505c <HAL_GPIO_Init+0x350>)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	3301      	adds	r3, #1
 800501a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	fa22 f303 	lsr.w	r3, r2, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	f47f ae78 	bne.w	8004d1c <HAL_GPIO_Init+0x10>
  }
}
 800502c:	bf00      	nop
 800502e:	bf00      	nop
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	40021000 	.word	0x40021000
 8005040:	40010000 	.word	0x40010000
 8005044:	48000400 	.word	0x48000400
 8005048:	48000800 	.word	0x48000800
 800504c:	48000c00 	.word	0x48000c00
 8005050:	48001000 	.word	0x48001000
 8005054:	48001400 	.word	0x48001400
 8005058:	48001800 	.word	0x48001800
 800505c:	40010400 	.word	0x40010400

08005060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	807b      	strh	r3, [r7, #2]
 800506c:	4613      	mov	r3, r2
 800506e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005070:	787b      	ldrb	r3, [r7, #1]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005076:	887a      	ldrh	r2, [r7, #2]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800507c:	e002      	b.n	8005084 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800507e:	887a      	ldrh	r2, [r7, #2]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	4603      	mov	r3, r0
 8005098:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800509a:	4b08      	ldr	r3, [pc, #32]	; (80050bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800509c:	695a      	ldr	r2, [r3, #20]
 800509e:	88fb      	ldrh	r3, [r7, #6]
 80050a0:	4013      	ands	r3, r2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d006      	beq.n	80050b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050a6:	4a05      	ldr	r2, [pc, #20]	; (80050bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050a8:	88fb      	ldrh	r3, [r7, #6]
 80050aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050ac:	88fb      	ldrh	r3, [r7, #6]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fb fe9a 	bl	8000de8 <HAL_GPIO_EXTI_Callback>
  }
}
 80050b4:	bf00      	nop
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	40010400 	.word	0x40010400

080050c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e081      	b.n	80051d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d106      	bne.n	80050ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7fd fc16 	bl	8002918 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2224      	movs	r2, #36	; 0x24
 80050f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0201 	bic.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005110:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005120:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d107      	bne.n	800513a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005136:	609a      	str	r2, [r3, #8]
 8005138:	e006      	b.n	8005148 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005146:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	2b02      	cmp	r3, #2
 800514e:	d104      	bne.n	800515a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005158:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800516c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800517c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691a      	ldr	r2, [r3, #16]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	69d9      	ldr	r1, [r3, #28]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1a      	ldr	r2, [r3, #32]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	4608      	mov	r0, r1
 80051ea:	4611      	mov	r1, r2
 80051ec:	461a      	mov	r2, r3
 80051ee:	4603      	mov	r3, r0
 80051f0:	817b      	strh	r3, [r7, #10]
 80051f2:	460b      	mov	r3, r1
 80051f4:	813b      	strh	r3, [r7, #8]
 80051f6:	4613      	mov	r3, r2
 80051f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b20      	cmp	r3, #32
 8005204:	f040 80f9 	bne.w	80053fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <HAL_I2C_Mem_Write+0x34>
 800520e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005210:	2b00      	cmp	r3, #0
 8005212:	d105      	bne.n	8005220 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800521a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e0ed      	b.n	80053fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005226:	2b01      	cmp	r3, #1
 8005228:	d101      	bne.n	800522e <HAL_I2C_Mem_Write+0x4e>
 800522a:	2302      	movs	r3, #2
 800522c:	e0e6      	b.n	80053fc <HAL_I2C_Mem_Write+0x21c>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005236:	f7fd fe4b 	bl	8002ed0 <HAL_GetTick>
 800523a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	2319      	movs	r3, #25
 8005242:	2201      	movs	r2, #1
 8005244:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 fac3 	bl	80057d4 <I2C_WaitOnFlagUntilTimeout>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e0d1      	b.n	80053fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2221      	movs	r2, #33	; 0x21
 800525c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2240      	movs	r2, #64	; 0x40
 8005264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6a3a      	ldr	r2, [r7, #32]
 8005272:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005278:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005280:	88f8      	ldrh	r0, [r7, #6]
 8005282:	893a      	ldrh	r2, [r7, #8]
 8005284:	8979      	ldrh	r1, [r7, #10]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	9301      	str	r3, [sp, #4]
 800528a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	4603      	mov	r3, r0
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 f9d3 	bl	800563c <I2C_RequestMemoryWrite>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d005      	beq.n	80052a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e0a9      	b.n	80053fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2bff      	cmp	r3, #255	; 0xff
 80052b0:	d90e      	bls.n	80052d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	22ff      	movs	r2, #255	; 0xff
 80052b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	8979      	ldrh	r1, [r7, #10]
 80052c0:	2300      	movs	r3, #0
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 fc2b 	bl	8005b24 <I2C_TransferConfig>
 80052ce:	e00f      	b.n	80052f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	8979      	ldrh	r1, [r7, #10]
 80052e2:	2300      	movs	r3, #0
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 fc1a 	bl	8005b24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 faad 	bl	8005854 <I2C_WaitOnTXISFlagUntilTimeout>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e07b      	b.n	80053fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	781a      	ldrb	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531e:	b29b      	uxth	r3, r3
 8005320:	3b01      	subs	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d034      	beq.n	80053a8 <HAL_I2C_Mem_Write+0x1c8>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005342:	2b00      	cmp	r3, #0
 8005344:	d130      	bne.n	80053a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534c:	2200      	movs	r2, #0
 800534e:	2180      	movs	r1, #128	; 0x80
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 fa3f 	bl	80057d4 <I2C_WaitOnFlagUntilTimeout>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e04d      	b.n	80053fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005364:	b29b      	uxth	r3, r3
 8005366:	2bff      	cmp	r3, #255	; 0xff
 8005368:	d90e      	bls.n	8005388 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	22ff      	movs	r2, #255	; 0xff
 800536e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005374:	b2da      	uxtb	r2, r3
 8005376:	8979      	ldrh	r1, [r7, #10]
 8005378:	2300      	movs	r3, #0
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f000 fbcf 	bl	8005b24 <I2C_TransferConfig>
 8005386:	e00f      	b.n	80053a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005396:	b2da      	uxtb	r2, r3
 8005398:	8979      	ldrh	r1, [r7, #10]
 800539a:	2300      	movs	r3, #0
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f000 fbbe 	bl	8005b24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d19e      	bne.n	80052f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 fa8c 	bl	80058d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e01a      	b.n	80053fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2220      	movs	r2, #32
 80053cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6859      	ldr	r1, [r3, #4]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	4b0a      	ldr	r3, [pc, #40]	; (8005404 <HAL_I2C_Mem_Write+0x224>)
 80053da:	400b      	ands	r3, r1
 80053dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	e000      	b.n	80053fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80053fa:	2302      	movs	r3, #2
  }
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	fe00e800 	.word	0xfe00e800

08005408 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af02      	add	r7, sp, #8
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	4608      	mov	r0, r1
 8005412:	4611      	mov	r1, r2
 8005414:	461a      	mov	r2, r3
 8005416:	4603      	mov	r3, r0
 8005418:	817b      	strh	r3, [r7, #10]
 800541a:	460b      	mov	r3, r1
 800541c:	813b      	strh	r3, [r7, #8]
 800541e:	4613      	mov	r3, r2
 8005420:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b20      	cmp	r3, #32
 800542c:	f040 80fd 	bne.w	800562a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <HAL_I2C_Mem_Read+0x34>
 8005436:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005438:	2b00      	cmp	r3, #0
 800543a:	d105      	bne.n	8005448 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005442:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e0f1      	b.n	800562c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <HAL_I2C_Mem_Read+0x4e>
 8005452:	2302      	movs	r3, #2
 8005454:	e0ea      	b.n	800562c <HAL_I2C_Mem_Read+0x224>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800545e:	f7fd fd37 	bl	8002ed0 <HAL_GetTick>
 8005462:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	2319      	movs	r3, #25
 800546a:	2201      	movs	r2, #1
 800546c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 f9af 	bl	80057d4 <I2C_WaitOnFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e0d5      	b.n	800562c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2222      	movs	r2, #34	; 0x22
 8005484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2240      	movs	r2, #64	; 0x40
 800548c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6a3a      	ldr	r2, [r7, #32]
 800549a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80054a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054a8:	88f8      	ldrh	r0, [r7, #6]
 80054aa:	893a      	ldrh	r2, [r7, #8]
 80054ac:	8979      	ldrh	r1, [r7, #10]
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	9301      	str	r3, [sp, #4]
 80054b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	4603      	mov	r3, r0
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 f913 	bl	80056e4 <I2C_RequestMemoryRead>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e0ad      	b.n	800562c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2bff      	cmp	r3, #255	; 0xff
 80054d8:	d90e      	bls.n	80054f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	22ff      	movs	r2, #255	; 0xff
 80054de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	8979      	ldrh	r1, [r7, #10]
 80054e8:	4b52      	ldr	r3, [pc, #328]	; (8005634 <HAL_I2C_Mem_Read+0x22c>)
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 fb17 	bl	8005b24 <I2C_TransferConfig>
 80054f6:	e00f      	b.n	8005518 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005506:	b2da      	uxtb	r2, r3
 8005508:	8979      	ldrh	r1, [r7, #10]
 800550a:	4b4a      	ldr	r3, [pc, #296]	; (8005634 <HAL_I2C_Mem_Read+0x22c>)
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 fb06 	bl	8005b24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551e:	2200      	movs	r2, #0
 8005520:	2104      	movs	r1, #4
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 f956 	bl	80057d4 <I2C_WaitOnFlagUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e07c      	b.n	800562c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	b2d2      	uxtb	r2, r2
 800553e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800554e:	3b01      	subs	r3, #1
 8005550:	b29a      	uxth	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555a:	b29b      	uxth	r3, r3
 800555c:	3b01      	subs	r3, #1
 800555e:	b29a      	uxth	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005568:	b29b      	uxth	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d034      	beq.n	80055d8 <HAL_I2C_Mem_Read+0x1d0>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005572:	2b00      	cmp	r3, #0
 8005574:	d130      	bne.n	80055d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557c:	2200      	movs	r2, #0
 800557e:	2180      	movs	r1, #128	; 0x80
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 f927 	bl	80057d4 <I2C_WaitOnFlagUntilTimeout>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e04d      	b.n	800562c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005594:	b29b      	uxth	r3, r3
 8005596:	2bff      	cmp	r3, #255	; 0xff
 8005598:	d90e      	bls.n	80055b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	22ff      	movs	r2, #255	; 0xff
 800559e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	8979      	ldrh	r1, [r7, #10]
 80055a8:	2300      	movs	r3, #0
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 fab7 	bl	8005b24 <I2C_TransferConfig>
 80055b6:	e00f      	b.n	80055d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055bc:	b29a      	uxth	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	8979      	ldrh	r1, [r7, #10]
 80055ca:	2300      	movs	r3, #0
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 faa6 	bl	8005b24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055dc:	b29b      	uxth	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d19a      	bne.n	8005518 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 f974 	bl	80058d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e01a      	b.n	800562c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2220      	movs	r2, #32
 80055fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6859      	ldr	r1, [r3, #4]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	4b0b      	ldr	r3, [pc, #44]	; (8005638 <HAL_I2C_Mem_Read+0x230>)
 800560a:	400b      	ands	r3, r1
 800560c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2220      	movs	r2, #32
 8005612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	e000      	b.n	800562c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800562a:	2302      	movs	r3, #2
  }
}
 800562c:	4618      	mov	r0, r3
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	80002400 	.word	0x80002400
 8005638:	fe00e800 	.word	0xfe00e800

0800563c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af02      	add	r7, sp, #8
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	4608      	mov	r0, r1
 8005646:	4611      	mov	r1, r2
 8005648:	461a      	mov	r2, r3
 800564a:	4603      	mov	r3, r0
 800564c:	817b      	strh	r3, [r7, #10]
 800564e:	460b      	mov	r3, r1
 8005650:	813b      	strh	r3, [r7, #8]
 8005652:	4613      	mov	r3, r2
 8005654:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005656:	88fb      	ldrh	r3, [r7, #6]
 8005658:	b2da      	uxtb	r2, r3
 800565a:	8979      	ldrh	r1, [r7, #10]
 800565c:	4b20      	ldr	r3, [pc, #128]	; (80056e0 <I2C_RequestMemoryWrite+0xa4>)
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 fa5d 	bl	8005b24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800566a:	69fa      	ldr	r2, [r7, #28]
 800566c:	69b9      	ldr	r1, [r7, #24]
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 f8f0 	bl	8005854 <I2C_WaitOnTXISFlagUntilTimeout>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e02c      	b.n	80056d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800567e:	88fb      	ldrh	r3, [r7, #6]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d105      	bne.n	8005690 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005684:	893b      	ldrh	r3, [r7, #8]
 8005686:	b2da      	uxtb	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	629a      	str	r2, [r3, #40]	; 0x28
 800568e:	e015      	b.n	80056bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005690:	893b      	ldrh	r3, [r7, #8]
 8005692:	0a1b      	lsrs	r3, r3, #8
 8005694:	b29b      	uxth	r3, r3
 8005696:	b2da      	uxtb	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800569e:	69fa      	ldr	r2, [r7, #28]
 80056a0:	69b9      	ldr	r1, [r7, #24]
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 f8d6 	bl	8005854 <I2C_WaitOnTXISFlagUntilTimeout>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e012      	b.n	80056d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056b2:	893b      	ldrh	r3, [r7, #8]
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	2200      	movs	r2, #0
 80056c4:	2180      	movs	r1, #128	; 0x80
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 f884 	bl	80057d4 <I2C_WaitOnFlagUntilTimeout>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e000      	b.n	80056d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	80002000 	.word	0x80002000

080056e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af02      	add	r7, sp, #8
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	4608      	mov	r0, r1
 80056ee:	4611      	mov	r1, r2
 80056f0:	461a      	mov	r2, r3
 80056f2:	4603      	mov	r3, r0
 80056f4:	817b      	strh	r3, [r7, #10]
 80056f6:	460b      	mov	r3, r1
 80056f8:	813b      	strh	r3, [r7, #8]
 80056fa:	4613      	mov	r3, r2
 80056fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80056fe:	88fb      	ldrh	r3, [r7, #6]
 8005700:	b2da      	uxtb	r2, r3
 8005702:	8979      	ldrh	r1, [r7, #10]
 8005704:	4b20      	ldr	r3, [pc, #128]	; (8005788 <I2C_RequestMemoryRead+0xa4>)
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	2300      	movs	r3, #0
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 fa0a 	bl	8005b24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005710:	69fa      	ldr	r2, [r7, #28]
 8005712:	69b9      	ldr	r1, [r7, #24]
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f89d 	bl	8005854 <I2C_WaitOnTXISFlagUntilTimeout>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e02c      	b.n	800577e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005724:	88fb      	ldrh	r3, [r7, #6]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d105      	bne.n	8005736 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800572a:	893b      	ldrh	r3, [r7, #8]
 800572c:	b2da      	uxtb	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	629a      	str	r2, [r3, #40]	; 0x28
 8005734:	e015      	b.n	8005762 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005736:	893b      	ldrh	r3, [r7, #8]
 8005738:	0a1b      	lsrs	r3, r3, #8
 800573a:	b29b      	uxth	r3, r3
 800573c:	b2da      	uxtb	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005744:	69fa      	ldr	r2, [r7, #28]
 8005746:	69b9      	ldr	r1, [r7, #24]
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f883 	bl	8005854 <I2C_WaitOnTXISFlagUntilTimeout>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e012      	b.n	800577e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005758:	893b      	ldrh	r3, [r7, #8]
 800575a:	b2da      	uxtb	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	2200      	movs	r2, #0
 800576a:	2140      	movs	r1, #64	; 0x40
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 f831 	bl	80057d4 <I2C_WaitOnFlagUntilTimeout>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e000      	b.n	800577e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	80002000 	.word	0x80002000

0800578c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d103      	bne.n	80057aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2200      	movs	r2, #0
 80057a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d007      	beq.n	80057c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699a      	ldr	r2, [r3, #24]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0201 	orr.w	r2, r2, #1
 80057c6:	619a      	str	r2, [r3, #24]
  }
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	603b      	str	r3, [r7, #0]
 80057e0:	4613      	mov	r3, r2
 80057e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057e4:	e022      	b.n	800582c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ec:	d01e      	beq.n	800582c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ee:	f7fd fb6f 	bl	8002ed0 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d302      	bcc.n	8005804 <I2C_WaitOnFlagUntilTimeout+0x30>
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d113      	bne.n	800582c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005808:	f043 0220 	orr.w	r2, r3, #32
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e00f      	b.n	800584c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	699a      	ldr	r2, [r3, #24]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	4013      	ands	r3, r2
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	429a      	cmp	r2, r3
 800583a:	bf0c      	ite	eq
 800583c:	2301      	moveq	r3, #1
 800583e:	2300      	movne	r3, #0
 8005840:	b2db      	uxtb	r3, r3
 8005842:	461a      	mov	r2, r3
 8005844:	79fb      	ldrb	r3, [r7, #7]
 8005846:	429a      	cmp	r2, r3
 8005848:	d0cd      	beq.n	80057e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005860:	e02c      	b.n	80058bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	68b9      	ldr	r1, [r7, #8]
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 f870 	bl	800594c <I2C_IsErrorOccurred>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e02a      	b.n	80058cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587c:	d01e      	beq.n	80058bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800587e:	f7fd fb27 	bl	8002ed0 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	429a      	cmp	r2, r3
 800588c:	d302      	bcc.n	8005894 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d113      	bne.n	80058bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005898:	f043 0220 	orr.w	r2, r3, #32
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2220      	movs	r2, #32
 80058a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e007      	b.n	80058cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d1cb      	bne.n	8005862 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058e0:	e028      	b.n	8005934 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 f830 	bl	800594c <I2C_IsErrorOccurred>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e026      	b.n	8005944 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f6:	f7fd faeb 	bl	8002ed0 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	429a      	cmp	r2, r3
 8005904:	d302      	bcc.n	800590c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d113      	bne.n	8005934 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005910:	f043 0220 	orr.w	r2, r3, #32
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2220      	movs	r2, #32
 800591c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e007      	b.n	8005944 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f003 0320 	and.w	r3, r3, #32
 800593e:	2b20      	cmp	r3, #32
 8005940:	d1cf      	bne.n	80058e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08a      	sub	sp, #40	; 0x28
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005966:	2300      	movs	r3, #0
 8005968:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	f003 0310 	and.w	r3, r3, #16
 8005974:	2b00      	cmp	r3, #0
 8005976:	d075      	beq.n	8005a64 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2210      	movs	r2, #16
 800597e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005980:	e056      	b.n	8005a30 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005988:	d052      	beq.n	8005a30 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800598a:	f7fd faa1 	bl	8002ed0 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	429a      	cmp	r2, r3
 8005998:	d302      	bcc.n	80059a0 <I2C_IsErrorOccurred+0x54>
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d147      	bne.n	8005a30 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059c2:	d12e      	bne.n	8005a22 <I2C_IsErrorOccurred+0xd6>
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059ca:	d02a      	beq.n	8005a22 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80059cc:	7cfb      	ldrb	r3, [r7, #19]
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d027      	beq.n	8005a22 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80059e2:	f7fd fa75 	bl	8002ed0 <HAL_GetTick>
 80059e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059e8:	e01b      	b.n	8005a22 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80059ea:	f7fd fa71 	bl	8002ed0 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b19      	cmp	r3, #25
 80059f6:	d914      	bls.n	8005a22 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fc:	f043 0220 	orr.w	r2, r3, #32
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2220      	movs	r2, #32
 8005a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b20      	cmp	r3, #32
 8005a2e:	d1dc      	bne.n	80059ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	d003      	beq.n	8005a46 <I2C_IsErrorOccurred+0xfa>
 8005a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d09d      	beq.n	8005982 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005a46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d103      	bne.n	8005a56 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2220      	movs	r2, #32
 8005a54:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	f043 0304 	orr.w	r3, r3, #4
 8005a5c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00b      	beq.n	8005a8e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	f043 0301 	orr.w	r3, r3, #1
 8005a7c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00b      	beq.n	8005ab0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	f043 0308 	orr.w	r3, r3, #8
 8005a9e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005aa8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00b      	beq.n	8005ad2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	f043 0302 	orr.w	r3, r3, #2
 8005ac0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d01c      	beq.n	8005b14 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f7ff fe56 	bl	800578c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6859      	ldr	r1, [r3, #4]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	4b0d      	ldr	r3, [pc, #52]	; (8005b20 <I2C_IsErrorOccurred+0x1d4>)
 8005aec:	400b      	ands	r3, r1
 8005aee:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	431a      	orrs	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3728      	adds	r7, #40	; 0x28
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	fe00e800 	.word	0xfe00e800

08005b24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	607b      	str	r3, [r7, #4]
 8005b2e:	460b      	mov	r3, r1
 8005b30:	817b      	strh	r3, [r7, #10]
 8005b32:	4613      	mov	r3, r2
 8005b34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b36:	897b      	ldrh	r3, [r7, #10]
 8005b38:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b3c:	7a7b      	ldrb	r3, [r7, #9]
 8005b3e:	041b      	lsls	r3, r3, #16
 8005b40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b44:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b52:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	0d5b      	lsrs	r3, r3, #21
 8005b5e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005b62:	4b08      	ldr	r3, [pc, #32]	; (8005b84 <I2C_TransferConfig+0x60>)
 8005b64:	430b      	orrs	r3, r1
 8005b66:	43db      	mvns	r3, r3
 8005b68:	ea02 0103 	and.w	r1, r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005b76:	bf00      	nop
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	03ff63ff 	.word	0x03ff63ff

08005b88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d138      	bne.n	8005c10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e032      	b.n	8005c12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2224      	movs	r2, #36	; 0x24
 8005bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0201 	bic.w	r2, r2, #1
 8005bca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6819      	ldr	r1, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0201 	orr.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	e000      	b.n	8005c12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c10:	2302      	movs	r3, #2
  }
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b20      	cmp	r3, #32
 8005c32:	d139      	bne.n	8005ca8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d101      	bne.n	8005c42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e033      	b.n	8005caa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2224      	movs	r2, #36	; 0x24
 8005c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 0201 	bic.w	r2, r2, #1
 8005c60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005c70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	021b      	lsls	r3, r3, #8
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0201 	orr.w	r2, r2, #1
 8005c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2220      	movs	r2, #32
 8005c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	e000      	b.n	8005caa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ca8:	2302      	movs	r3, #2
  }
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
	...

08005cb8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005cbc:	4b04      	ldr	r3, [pc, #16]	; (8005cd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40007000 	.word	0x40007000

08005cd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ce2:	d130      	bne.n	8005d46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ce4:	4b23      	ldr	r3, [pc, #140]	; (8005d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf0:	d038      	beq.n	8005d64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cf2:	4b20      	ldr	r3, [pc, #128]	; (8005d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005cfa:	4a1e      	ldr	r2, [pc, #120]	; (8005d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d02:	4b1d      	ldr	r3, [pc, #116]	; (8005d78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2232      	movs	r2, #50	; 0x32
 8005d08:	fb02 f303 	mul.w	r3, r2, r3
 8005d0c:	4a1b      	ldr	r2, [pc, #108]	; (8005d7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d12:	0c9b      	lsrs	r3, r3, #18
 8005d14:	3301      	adds	r3, #1
 8005d16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d18:	e002      	b.n	8005d20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d20:	4b14      	ldr	r3, [pc, #80]	; (8005d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d2c:	d102      	bne.n	8005d34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1f2      	bne.n	8005d1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d34:	4b0f      	ldr	r3, [pc, #60]	; (8005d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d40:	d110      	bne.n	8005d64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e00f      	b.n	8005d66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d46:	4b0b      	ldr	r3, [pc, #44]	; (8005d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d52:	d007      	beq.n	8005d64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d54:	4b07      	ldr	r3, [pc, #28]	; (8005d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d5c:	4a05      	ldr	r2, [pc, #20]	; (8005d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40007000 	.word	0x40007000
 8005d78:	20000068 	.word	0x20000068
 8005d7c:	431bde83 	.word	0x431bde83

08005d80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b088      	sub	sp, #32
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e3ca      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d92:	4b97      	ldr	r3, [pc, #604]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f003 030c 	and.w	r3, r3, #12
 8005d9a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d9c:	4b94      	ldr	r3, [pc, #592]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f003 0303 	and.w	r3, r3, #3
 8005da4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0310 	and.w	r3, r3, #16
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 80e4 	beq.w	8005f7c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d007      	beq.n	8005dca <HAL_RCC_OscConfig+0x4a>
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	2b0c      	cmp	r3, #12
 8005dbe:	f040 808b 	bne.w	8005ed8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	f040 8087 	bne.w	8005ed8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005dca:	4b89      	ldr	r3, [pc, #548]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d005      	beq.n	8005de2 <HAL_RCC_OscConfig+0x62>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e3a2      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1a      	ldr	r2, [r3, #32]
 8005de6:	4b82      	ldr	r3, [pc, #520]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0308 	and.w	r3, r3, #8
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d004      	beq.n	8005dfc <HAL_RCC_OscConfig+0x7c>
 8005df2:	4b7f      	ldr	r3, [pc, #508]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dfa:	e005      	b.n	8005e08 <HAL_RCC_OscConfig+0x88>
 8005dfc:	4b7c      	ldr	r3, [pc, #496]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e02:	091b      	lsrs	r3, r3, #4
 8005e04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d223      	bcs.n	8005e54 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 fd55 	bl	80068c0 <RCC_SetFlashLatencyFromMSIRange>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e383      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e20:	4b73      	ldr	r3, [pc, #460]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a72      	ldr	r2, [pc, #456]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e26:	f043 0308 	orr.w	r3, r3, #8
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	4b70      	ldr	r3, [pc, #448]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	496d      	ldr	r1, [pc, #436]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e3e:	4b6c      	ldr	r3, [pc, #432]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	021b      	lsls	r3, r3, #8
 8005e4c:	4968      	ldr	r1, [pc, #416]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	604b      	str	r3, [r1, #4]
 8005e52:	e025      	b.n	8005ea0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e54:	4b66      	ldr	r3, [pc, #408]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a65      	ldr	r2, [pc, #404]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e5a:	f043 0308 	orr.w	r3, r3, #8
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	4b63      	ldr	r3, [pc, #396]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	4960      	ldr	r1, [pc, #384]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e72:	4b5f      	ldr	r3, [pc, #380]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	021b      	lsls	r3, r3, #8
 8005e80:	495b      	ldr	r1, [pc, #364]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d109      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 fd15 	bl	80068c0 <RCC_SetFlashLatencyFromMSIRange>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e343      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ea0:	f000 fc4a 	bl	8006738 <HAL_RCC_GetSysClockFreq>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	4b52      	ldr	r3, [pc, #328]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	091b      	lsrs	r3, r3, #4
 8005eac:	f003 030f 	and.w	r3, r3, #15
 8005eb0:	4950      	ldr	r1, [pc, #320]	; (8005ff4 <HAL_RCC_OscConfig+0x274>)
 8005eb2:	5ccb      	ldrb	r3, [r1, r3]
 8005eb4:	f003 031f 	and.w	r3, r3, #31
 8005eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ebc:	4a4e      	ldr	r2, [pc, #312]	; (8005ff8 <HAL_RCC_OscConfig+0x278>)
 8005ebe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005ec0:	4b4e      	ldr	r3, [pc, #312]	; (8005ffc <HAL_RCC_OscConfig+0x27c>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fc ffb3 	bl	8002e30 <HAL_InitTick>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d052      	beq.n	8005f7a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
 8005ed6:	e327      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d032      	beq.n	8005f46 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005ee0:	4b43      	ldr	r3, [pc, #268]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a42      	ldr	r2, [pc, #264]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005ee6:	f043 0301 	orr.w	r3, r3, #1
 8005eea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005eec:	f7fc fff0 	bl	8002ed0 <HAL_GetTick>
 8005ef0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ef2:	e008      	b.n	8005f06 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ef4:	f7fc ffec 	bl	8002ed0 <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e310      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f06:	4b3a      	ldr	r3, [pc, #232]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d0f0      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f12:	4b37      	ldr	r3, [pc, #220]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a36      	ldr	r2, [pc, #216]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005f18:	f043 0308 	orr.w	r3, r3, #8
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	4b34      	ldr	r3, [pc, #208]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	4931      	ldr	r1, [pc, #196]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f30:	4b2f      	ldr	r3, [pc, #188]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	69db      	ldr	r3, [r3, #28]
 8005f3c:	021b      	lsls	r3, r3, #8
 8005f3e:	492c      	ldr	r1, [pc, #176]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	604b      	str	r3, [r1, #4]
 8005f44:	e01a      	b.n	8005f7c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005f46:	4b2a      	ldr	r3, [pc, #168]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a29      	ldr	r2, [pc, #164]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005f4c:	f023 0301 	bic.w	r3, r3, #1
 8005f50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f52:	f7fc ffbd 	bl	8002ed0 <HAL_GetTick>
 8005f56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005f58:	e008      	b.n	8005f6c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f5a:	f7fc ffb9 	bl	8002ed0 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d901      	bls.n	8005f6c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e2dd      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005f6c:	4b20      	ldr	r3, [pc, #128]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1f0      	bne.n	8005f5a <HAL_RCC_OscConfig+0x1da>
 8005f78:	e000      	b.n	8005f7c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f7a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d074      	beq.n	8006072 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	2b08      	cmp	r3, #8
 8005f8c:	d005      	beq.n	8005f9a <HAL_RCC_OscConfig+0x21a>
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	2b0c      	cmp	r3, #12
 8005f92:	d10e      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d10b      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f9a:	4b15      	ldr	r3, [pc, #84]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d064      	beq.n	8006070 <HAL_RCC_OscConfig+0x2f0>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d160      	bne.n	8006070 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e2ba      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fba:	d106      	bne.n	8005fca <HAL_RCC_OscConfig+0x24a>
 8005fbc:	4b0c      	ldr	r3, [pc, #48]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a0b      	ldr	r2, [pc, #44]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fc6:	6013      	str	r3, [r2, #0]
 8005fc8:	e026      	b.n	8006018 <HAL_RCC_OscConfig+0x298>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fd2:	d115      	bne.n	8006000 <HAL_RCC_OscConfig+0x280>
 8005fd4:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a05      	ldr	r2, [pc, #20]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005fda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fde:	6013      	str	r3, [r2, #0]
 8005fe0:	4b03      	ldr	r3, [pc, #12]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a02      	ldr	r2, [pc, #8]	; (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	e014      	b.n	8006018 <HAL_RCC_OscConfig+0x298>
 8005fee:	bf00      	nop
 8005ff0:	40021000 	.word	0x40021000
 8005ff4:	0800daa4 	.word	0x0800daa4
 8005ff8:	20000068 	.word	0x20000068
 8005ffc:	2000006c 	.word	0x2000006c
 8006000:	4ba0      	ldr	r3, [pc, #640]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a9f      	ldr	r2, [pc, #636]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 8006006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800600a:	6013      	str	r3, [r2, #0]
 800600c:	4b9d      	ldr	r3, [pc, #628]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a9c      	ldr	r2, [pc, #624]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 8006012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d013      	beq.n	8006048 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006020:	f7fc ff56 	bl	8002ed0 <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006028:	f7fc ff52 	bl	8002ed0 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b64      	cmp	r3, #100	; 0x64
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e276      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800603a:	4b92      	ldr	r3, [pc, #584]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0f0      	beq.n	8006028 <HAL_RCC_OscConfig+0x2a8>
 8006046:	e014      	b.n	8006072 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006048:	f7fc ff42 	bl	8002ed0 <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006050:	f7fc ff3e 	bl	8002ed0 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b64      	cmp	r3, #100	; 0x64
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e262      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006062:	4b88      	ldr	r3, [pc, #544]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1f0      	bne.n	8006050 <HAL_RCC_OscConfig+0x2d0>
 800606e:	e000      	b.n	8006072 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d060      	beq.n	8006140 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	2b04      	cmp	r3, #4
 8006082:	d005      	beq.n	8006090 <HAL_RCC_OscConfig+0x310>
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	2b0c      	cmp	r3, #12
 8006088:	d119      	bne.n	80060be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2b02      	cmp	r3, #2
 800608e:	d116      	bne.n	80060be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006090:	4b7c      	ldr	r3, [pc, #496]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006098:	2b00      	cmp	r3, #0
 800609a:	d005      	beq.n	80060a8 <HAL_RCC_OscConfig+0x328>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e23f      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060a8:	4b76      	ldr	r3, [pc, #472]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	061b      	lsls	r3, r3, #24
 80060b6:	4973      	ldr	r1, [pc, #460]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060bc:	e040      	b.n	8006140 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d023      	beq.n	800610e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060c6:	4b6f      	ldr	r3, [pc, #444]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a6e      	ldr	r2, [pc, #440]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 80060cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d2:	f7fc fefd 	bl	8002ed0 <HAL_GetTick>
 80060d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060d8:	e008      	b.n	80060ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060da:	f7fc fef9 	bl	8002ed0 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d901      	bls.n	80060ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e21d      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060ec:	4b65      	ldr	r3, [pc, #404]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d0f0      	beq.n	80060da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060f8:	4b62      	ldr	r3, [pc, #392]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	061b      	lsls	r3, r3, #24
 8006106:	495f      	ldr	r1, [pc, #380]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 8006108:	4313      	orrs	r3, r2
 800610a:	604b      	str	r3, [r1, #4]
 800610c:	e018      	b.n	8006140 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800610e:	4b5d      	ldr	r3, [pc, #372]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a5c      	ldr	r2, [pc, #368]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 8006114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800611a:	f7fc fed9 	bl	8002ed0 <HAL_GetTick>
 800611e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006120:	e008      	b.n	8006134 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006122:	f7fc fed5 	bl	8002ed0 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	2b02      	cmp	r3, #2
 800612e:	d901      	bls.n	8006134 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e1f9      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006134:	4b53      	ldr	r3, [pc, #332]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1f0      	bne.n	8006122 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0308 	and.w	r3, r3, #8
 8006148:	2b00      	cmp	r3, #0
 800614a:	d03c      	beq.n	80061c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d01c      	beq.n	800618e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006154:	4b4b      	ldr	r3, [pc, #300]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 8006156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800615a:	4a4a      	ldr	r2, [pc, #296]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 800615c:	f043 0301 	orr.w	r3, r3, #1
 8006160:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006164:	f7fc feb4 	bl	8002ed0 <HAL_GetTick>
 8006168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800616a:	e008      	b.n	800617e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800616c:	f7fc feb0 	bl	8002ed0 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d901      	bls.n	800617e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e1d4      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800617e:	4b41      	ldr	r3, [pc, #260]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 8006180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0ef      	beq.n	800616c <HAL_RCC_OscConfig+0x3ec>
 800618c:	e01b      	b.n	80061c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800618e:	4b3d      	ldr	r3, [pc, #244]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 8006190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006194:	4a3b      	ldr	r2, [pc, #236]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 8006196:	f023 0301 	bic.w	r3, r3, #1
 800619a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800619e:	f7fc fe97 	bl	8002ed0 <HAL_GetTick>
 80061a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80061a4:	e008      	b.n	80061b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061a6:	f7fc fe93 	bl	8002ed0 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e1b7      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80061b8:	4b32      	ldr	r3, [pc, #200]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 80061ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1ef      	bne.n	80061a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0304 	and.w	r3, r3, #4
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 80a6 	beq.w	8006320 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061d4:	2300      	movs	r3, #0
 80061d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80061d8:	4b2a      	ldr	r3, [pc, #168]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 80061da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10d      	bne.n	8006200 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061e4:	4b27      	ldr	r3, [pc, #156]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 80061e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e8:	4a26      	ldr	r2, [pc, #152]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 80061ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ee:	6593      	str	r3, [r2, #88]	; 0x58
 80061f0:	4b24      	ldr	r3, [pc, #144]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 80061f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061f8:	60bb      	str	r3, [r7, #8]
 80061fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061fc:	2301      	movs	r3, #1
 80061fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006200:	4b21      	ldr	r3, [pc, #132]	; (8006288 <HAL_RCC_OscConfig+0x508>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006208:	2b00      	cmp	r3, #0
 800620a:	d118      	bne.n	800623e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800620c:	4b1e      	ldr	r3, [pc, #120]	; (8006288 <HAL_RCC_OscConfig+0x508>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a1d      	ldr	r2, [pc, #116]	; (8006288 <HAL_RCC_OscConfig+0x508>)
 8006212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006216:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006218:	f7fc fe5a 	bl	8002ed0 <HAL_GetTick>
 800621c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800621e:	e008      	b.n	8006232 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006220:	f7fc fe56 	bl	8002ed0 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d901      	bls.n	8006232 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e17a      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006232:	4b15      	ldr	r3, [pc, #84]	; (8006288 <HAL_RCC_OscConfig+0x508>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623a:	2b00      	cmp	r3, #0
 800623c:	d0f0      	beq.n	8006220 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d108      	bne.n	8006258 <HAL_RCC_OscConfig+0x4d8>
 8006246:	4b0f      	ldr	r3, [pc, #60]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 8006248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800624c:	4a0d      	ldr	r2, [pc, #52]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 800624e:	f043 0301 	orr.w	r3, r3, #1
 8006252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006256:	e029      	b.n	80062ac <HAL_RCC_OscConfig+0x52c>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	2b05      	cmp	r3, #5
 800625e:	d115      	bne.n	800628c <HAL_RCC_OscConfig+0x50c>
 8006260:	4b08      	ldr	r3, [pc, #32]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 8006262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006266:	4a07      	ldr	r2, [pc, #28]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 8006268:	f043 0304 	orr.w	r3, r3, #4
 800626c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006270:	4b04      	ldr	r3, [pc, #16]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 8006272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006276:	4a03      	ldr	r2, [pc, #12]	; (8006284 <HAL_RCC_OscConfig+0x504>)
 8006278:	f043 0301 	orr.w	r3, r3, #1
 800627c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006280:	e014      	b.n	80062ac <HAL_RCC_OscConfig+0x52c>
 8006282:	bf00      	nop
 8006284:	40021000 	.word	0x40021000
 8006288:	40007000 	.word	0x40007000
 800628c:	4b9c      	ldr	r3, [pc, #624]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 800628e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006292:	4a9b      	ldr	r2, [pc, #620]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 8006294:	f023 0301 	bic.w	r3, r3, #1
 8006298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800629c:	4b98      	ldr	r3, [pc, #608]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 800629e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a2:	4a97      	ldr	r2, [pc, #604]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 80062a4:	f023 0304 	bic.w	r3, r3, #4
 80062a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d016      	beq.n	80062e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b4:	f7fc fe0c 	bl	8002ed0 <HAL_GetTick>
 80062b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062ba:	e00a      	b.n	80062d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062bc:	f7fc fe08 	bl	8002ed0 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e12a      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062d2:	4b8b      	ldr	r3, [pc, #556]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 80062d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d8:	f003 0302 	and.w	r3, r3, #2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d0ed      	beq.n	80062bc <HAL_RCC_OscConfig+0x53c>
 80062e0:	e015      	b.n	800630e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062e2:	f7fc fdf5 	bl	8002ed0 <HAL_GetTick>
 80062e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062e8:	e00a      	b.n	8006300 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ea:	f7fc fdf1 	bl	8002ed0 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d901      	bls.n	8006300 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e113      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006300:	4b7f      	ldr	r3, [pc, #508]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 8006302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1ed      	bne.n	80062ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800630e:	7ffb      	ldrb	r3, [r7, #31]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d105      	bne.n	8006320 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006314:	4b7a      	ldr	r3, [pc, #488]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 8006316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006318:	4a79      	ldr	r2, [pc, #484]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 800631a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800631e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 80fe 	beq.w	8006526 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632e:	2b02      	cmp	r3, #2
 8006330:	f040 80d0 	bne.w	80064d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006334:	4b72      	ldr	r3, [pc, #456]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f003 0203 	and.w	r2, r3, #3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	429a      	cmp	r2, r3
 8006346:	d130      	bne.n	80063aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006352:	3b01      	subs	r3, #1
 8006354:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006356:	429a      	cmp	r2, r3
 8006358:	d127      	bne.n	80063aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006364:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006366:	429a      	cmp	r2, r3
 8006368:	d11f      	bne.n	80063aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006374:	2a07      	cmp	r2, #7
 8006376:	bf14      	ite	ne
 8006378:	2201      	movne	r2, #1
 800637a:	2200      	moveq	r2, #0
 800637c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800637e:	4293      	cmp	r3, r2
 8006380:	d113      	bne.n	80063aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638c:	085b      	lsrs	r3, r3, #1
 800638e:	3b01      	subs	r3, #1
 8006390:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006392:	429a      	cmp	r2, r3
 8006394:	d109      	bne.n	80063aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a0:	085b      	lsrs	r3, r3, #1
 80063a2:	3b01      	subs	r3, #1
 80063a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d06e      	beq.n	8006488 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	2b0c      	cmp	r3, #12
 80063ae:	d069      	beq.n	8006484 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80063b0:	4b53      	ldr	r3, [pc, #332]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d105      	bne.n	80063c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80063bc:	4b50      	ldr	r3, [pc, #320]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e0ad      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80063cc:	4b4c      	ldr	r3, [pc, #304]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a4b      	ldr	r2, [pc, #300]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 80063d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80063d8:	f7fc fd7a 	bl	8002ed0 <HAL_GetTick>
 80063dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063de:	e008      	b.n	80063f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063e0:	f7fc fd76 	bl	8002ed0 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e09a      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063f2:	4b43      	ldr	r3, [pc, #268]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1f0      	bne.n	80063e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063fe:	4b40      	ldr	r3, [pc, #256]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	4b40      	ldr	r3, [pc, #256]	; (8006504 <HAL_RCC_OscConfig+0x784>)
 8006404:	4013      	ands	r3, r2
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800640e:	3a01      	subs	r2, #1
 8006410:	0112      	lsls	r2, r2, #4
 8006412:	4311      	orrs	r1, r2
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006418:	0212      	lsls	r2, r2, #8
 800641a:	4311      	orrs	r1, r2
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006420:	0852      	lsrs	r2, r2, #1
 8006422:	3a01      	subs	r2, #1
 8006424:	0552      	lsls	r2, r2, #21
 8006426:	4311      	orrs	r1, r2
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800642c:	0852      	lsrs	r2, r2, #1
 800642e:	3a01      	subs	r2, #1
 8006430:	0652      	lsls	r2, r2, #25
 8006432:	4311      	orrs	r1, r2
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006438:	0912      	lsrs	r2, r2, #4
 800643a:	0452      	lsls	r2, r2, #17
 800643c:	430a      	orrs	r2, r1
 800643e:	4930      	ldr	r1, [pc, #192]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 8006440:	4313      	orrs	r3, r2
 8006442:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006444:	4b2e      	ldr	r3, [pc, #184]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a2d      	ldr	r2, [pc, #180]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 800644a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800644e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006450:	4b2b      	ldr	r3, [pc, #172]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	4a2a      	ldr	r2, [pc, #168]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 8006456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800645a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800645c:	f7fc fd38 	bl	8002ed0 <HAL_GetTick>
 8006460:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006462:	e008      	b.n	8006476 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006464:	f7fc fd34 	bl	8002ed0 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	2b02      	cmp	r3, #2
 8006470:	d901      	bls.n	8006476 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e058      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006476:	4b22      	ldr	r3, [pc, #136]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0f0      	beq.n	8006464 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006482:	e050      	b.n	8006526 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e04f      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006488:	4b1d      	ldr	r3, [pc, #116]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d148      	bne.n	8006526 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006494:	4b1a      	ldr	r3, [pc, #104]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a19      	ldr	r2, [pc, #100]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 800649a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800649e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80064a0:	4b17      	ldr	r3, [pc, #92]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	4a16      	ldr	r2, [pc, #88]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 80064a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064ac:	f7fc fd10 	bl	8002ed0 <HAL_GetTick>
 80064b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064b4:	f7fc fd0c 	bl	8002ed0 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e030      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064c6:	4b0e      	ldr	r3, [pc, #56]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0f0      	beq.n	80064b4 <HAL_RCC_OscConfig+0x734>
 80064d2:	e028      	b.n	8006526 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	2b0c      	cmp	r3, #12
 80064d8:	d023      	beq.n	8006522 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064da:	4b09      	ldr	r3, [pc, #36]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a08      	ldr	r2, [pc, #32]	; (8006500 <HAL_RCC_OscConfig+0x780>)
 80064e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e6:	f7fc fcf3 	bl	8002ed0 <HAL_GetTick>
 80064ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064ec:	e00c      	b.n	8006508 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064ee:	f7fc fcef 	bl	8002ed0 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d905      	bls.n	8006508 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e013      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
 8006500:	40021000 	.word	0x40021000
 8006504:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006508:	4b09      	ldr	r3, [pc, #36]	; (8006530 <HAL_RCC_OscConfig+0x7b0>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1ec      	bne.n	80064ee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006514:	4b06      	ldr	r3, [pc, #24]	; (8006530 <HAL_RCC_OscConfig+0x7b0>)
 8006516:	68da      	ldr	r2, [r3, #12]
 8006518:	4905      	ldr	r1, [pc, #20]	; (8006530 <HAL_RCC_OscConfig+0x7b0>)
 800651a:	4b06      	ldr	r3, [pc, #24]	; (8006534 <HAL_RCC_OscConfig+0x7b4>)
 800651c:	4013      	ands	r3, r2
 800651e:	60cb      	str	r3, [r1, #12]
 8006520:	e001      	b.n	8006526 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e000      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3720      	adds	r7, #32
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	40021000 	.word	0x40021000
 8006534:	feeefffc 	.word	0xfeeefffc

08006538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e0e7      	b.n	800671c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800654c:	4b75      	ldr	r3, [pc, #468]	; (8006724 <HAL_RCC_ClockConfig+0x1ec>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0307 	and.w	r3, r3, #7
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	429a      	cmp	r2, r3
 8006558:	d910      	bls.n	800657c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800655a:	4b72      	ldr	r3, [pc, #456]	; (8006724 <HAL_RCC_ClockConfig+0x1ec>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f023 0207 	bic.w	r2, r3, #7
 8006562:	4970      	ldr	r1, [pc, #448]	; (8006724 <HAL_RCC_ClockConfig+0x1ec>)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	4313      	orrs	r3, r2
 8006568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800656a:	4b6e      	ldr	r3, [pc, #440]	; (8006724 <HAL_RCC_ClockConfig+0x1ec>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0307 	and.w	r3, r3, #7
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d001      	beq.n	800657c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e0cf      	b.n	800671c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d010      	beq.n	80065aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	4b66      	ldr	r3, [pc, #408]	; (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006594:	429a      	cmp	r2, r3
 8006596:	d908      	bls.n	80065aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006598:	4b63      	ldr	r3, [pc, #396]	; (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	4960      	ldr	r1, [pc, #384]	; (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d04c      	beq.n	8006650 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	2b03      	cmp	r3, #3
 80065bc:	d107      	bne.n	80065ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065be:	4b5a      	ldr	r3, [pc, #360]	; (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d121      	bne.n	800660e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e0a6      	b.n	800671c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d107      	bne.n	80065e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065d6:	4b54      	ldr	r3, [pc, #336]	; (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d115      	bne.n	800660e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e09a      	b.n	800671c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d107      	bne.n	80065fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065ee:	4b4e      	ldr	r3, [pc, #312]	; (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d109      	bne.n	800660e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e08e      	b.n	800671c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065fe:	4b4a      	ldr	r3, [pc, #296]	; (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e086      	b.n	800671c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800660e:	4b46      	ldr	r3, [pc, #280]	; (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f023 0203 	bic.w	r2, r3, #3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	4943      	ldr	r1, [pc, #268]	; (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 800661c:	4313      	orrs	r3, r2
 800661e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006620:	f7fc fc56 	bl	8002ed0 <HAL_GetTick>
 8006624:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006626:	e00a      	b.n	800663e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006628:	f7fc fc52 	bl	8002ed0 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	f241 3288 	movw	r2, #5000	; 0x1388
 8006636:	4293      	cmp	r3, r2
 8006638:	d901      	bls.n	800663e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e06e      	b.n	800671c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800663e:	4b3a      	ldr	r3, [pc, #232]	; (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 020c 	and.w	r2, r3, #12
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	429a      	cmp	r2, r3
 800664e:	d1eb      	bne.n	8006628 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d010      	beq.n	800667e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	4b31      	ldr	r3, [pc, #196]	; (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006668:	429a      	cmp	r2, r3
 800666a:	d208      	bcs.n	800667e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800666c:	4b2e      	ldr	r3, [pc, #184]	; (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	492b      	ldr	r1, [pc, #172]	; (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 800667a:	4313      	orrs	r3, r2
 800667c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800667e:	4b29      	ldr	r3, [pc, #164]	; (8006724 <HAL_RCC_ClockConfig+0x1ec>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	429a      	cmp	r2, r3
 800668a:	d210      	bcs.n	80066ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800668c:	4b25      	ldr	r3, [pc, #148]	; (8006724 <HAL_RCC_ClockConfig+0x1ec>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f023 0207 	bic.w	r2, r3, #7
 8006694:	4923      	ldr	r1, [pc, #140]	; (8006724 <HAL_RCC_ClockConfig+0x1ec>)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	4313      	orrs	r3, r2
 800669a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800669c:	4b21      	ldr	r3, [pc, #132]	; (8006724 <HAL_RCC_ClockConfig+0x1ec>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0307 	and.w	r3, r3, #7
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d001      	beq.n	80066ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e036      	b.n	800671c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0304 	and.w	r3, r3, #4
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d008      	beq.n	80066cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066ba:	4b1b      	ldr	r3, [pc, #108]	; (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	4918      	ldr	r1, [pc, #96]	; (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0308 	and.w	r3, r3, #8
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d009      	beq.n	80066ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066d8:	4b13      	ldr	r3, [pc, #76]	; (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	00db      	lsls	r3, r3, #3
 80066e6:	4910      	ldr	r1, [pc, #64]	; (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80066ec:	f000 f824 	bl	8006738 <HAL_RCC_GetSysClockFreq>
 80066f0:	4602      	mov	r2, r0
 80066f2:	4b0d      	ldr	r3, [pc, #52]	; (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	091b      	lsrs	r3, r3, #4
 80066f8:	f003 030f 	and.w	r3, r3, #15
 80066fc:	490b      	ldr	r1, [pc, #44]	; (800672c <HAL_RCC_ClockConfig+0x1f4>)
 80066fe:	5ccb      	ldrb	r3, [r1, r3]
 8006700:	f003 031f 	and.w	r3, r3, #31
 8006704:	fa22 f303 	lsr.w	r3, r2, r3
 8006708:	4a09      	ldr	r2, [pc, #36]	; (8006730 <HAL_RCC_ClockConfig+0x1f8>)
 800670a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800670c:	4b09      	ldr	r3, [pc, #36]	; (8006734 <HAL_RCC_ClockConfig+0x1fc>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4618      	mov	r0, r3
 8006712:	f7fc fb8d 	bl	8002e30 <HAL_InitTick>
 8006716:	4603      	mov	r3, r0
 8006718:	72fb      	strb	r3, [r7, #11]

  return status;
 800671a:	7afb      	ldrb	r3, [r7, #11]
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	40022000 	.word	0x40022000
 8006728:	40021000 	.word	0x40021000
 800672c:	0800daa4 	.word	0x0800daa4
 8006730:	20000068 	.word	0x20000068
 8006734:	2000006c 	.word	0x2000006c

08006738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006738:	b480      	push	{r7}
 800673a:	b089      	sub	sp, #36	; 0x24
 800673c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	61fb      	str	r3, [r7, #28]
 8006742:	2300      	movs	r3, #0
 8006744:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006746:	4b3e      	ldr	r3, [pc, #248]	; (8006840 <HAL_RCC_GetSysClockFreq+0x108>)
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f003 030c 	and.w	r3, r3, #12
 800674e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006750:	4b3b      	ldr	r3, [pc, #236]	; (8006840 <HAL_RCC_GetSysClockFreq+0x108>)
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f003 0303 	and.w	r3, r3, #3
 8006758:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d005      	beq.n	800676c <HAL_RCC_GetSysClockFreq+0x34>
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	2b0c      	cmp	r3, #12
 8006764:	d121      	bne.n	80067aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d11e      	bne.n	80067aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800676c:	4b34      	ldr	r3, [pc, #208]	; (8006840 <HAL_RCC_GetSysClockFreq+0x108>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0308 	and.w	r3, r3, #8
 8006774:	2b00      	cmp	r3, #0
 8006776:	d107      	bne.n	8006788 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006778:	4b31      	ldr	r3, [pc, #196]	; (8006840 <HAL_RCC_GetSysClockFreq+0x108>)
 800677a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800677e:	0a1b      	lsrs	r3, r3, #8
 8006780:	f003 030f 	and.w	r3, r3, #15
 8006784:	61fb      	str	r3, [r7, #28]
 8006786:	e005      	b.n	8006794 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006788:	4b2d      	ldr	r3, [pc, #180]	; (8006840 <HAL_RCC_GetSysClockFreq+0x108>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	091b      	lsrs	r3, r3, #4
 800678e:	f003 030f 	and.w	r3, r3, #15
 8006792:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006794:	4a2b      	ldr	r2, [pc, #172]	; (8006844 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800679c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10d      	bne.n	80067c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80067a8:	e00a      	b.n	80067c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	2b04      	cmp	r3, #4
 80067ae:	d102      	bne.n	80067b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80067b0:	4b25      	ldr	r3, [pc, #148]	; (8006848 <HAL_RCC_GetSysClockFreq+0x110>)
 80067b2:	61bb      	str	r3, [r7, #24]
 80067b4:	e004      	b.n	80067c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	2b08      	cmp	r3, #8
 80067ba:	d101      	bne.n	80067c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80067bc:	4b23      	ldr	r3, [pc, #140]	; (800684c <HAL_RCC_GetSysClockFreq+0x114>)
 80067be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	2b0c      	cmp	r3, #12
 80067c4:	d134      	bne.n	8006830 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067c6:	4b1e      	ldr	r3, [pc, #120]	; (8006840 <HAL_RCC_GetSysClockFreq+0x108>)
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	f003 0303 	and.w	r3, r3, #3
 80067ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d003      	beq.n	80067de <HAL_RCC_GetSysClockFreq+0xa6>
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d003      	beq.n	80067e4 <HAL_RCC_GetSysClockFreq+0xac>
 80067dc:	e005      	b.n	80067ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80067de:	4b1a      	ldr	r3, [pc, #104]	; (8006848 <HAL_RCC_GetSysClockFreq+0x110>)
 80067e0:	617b      	str	r3, [r7, #20]
      break;
 80067e2:	e005      	b.n	80067f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80067e4:	4b19      	ldr	r3, [pc, #100]	; (800684c <HAL_RCC_GetSysClockFreq+0x114>)
 80067e6:	617b      	str	r3, [r7, #20]
      break;
 80067e8:	e002      	b.n	80067f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	617b      	str	r3, [r7, #20]
      break;
 80067ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067f0:	4b13      	ldr	r3, [pc, #76]	; (8006840 <HAL_RCC_GetSysClockFreq+0x108>)
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	091b      	lsrs	r3, r3, #4
 80067f6:	f003 0307 	and.w	r3, r3, #7
 80067fa:	3301      	adds	r3, #1
 80067fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80067fe:	4b10      	ldr	r3, [pc, #64]	; (8006840 <HAL_RCC_GetSysClockFreq+0x108>)
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	0a1b      	lsrs	r3, r3, #8
 8006804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	fb03 f202 	mul.w	r2, r3, r2
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	fbb2 f3f3 	udiv	r3, r2, r3
 8006814:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006816:	4b0a      	ldr	r3, [pc, #40]	; (8006840 <HAL_RCC_GetSysClockFreq+0x108>)
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	0e5b      	lsrs	r3, r3, #25
 800681c:	f003 0303 	and.w	r3, r3, #3
 8006820:	3301      	adds	r3, #1
 8006822:	005b      	lsls	r3, r3, #1
 8006824:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	fbb2 f3f3 	udiv	r3, r2, r3
 800682e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006830:	69bb      	ldr	r3, [r7, #24]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3724      	adds	r7, #36	; 0x24
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	40021000 	.word	0x40021000
 8006844:	0800dabc 	.word	0x0800dabc
 8006848:	00f42400 	.word	0x00f42400
 800684c:	007a1200 	.word	0x007a1200

08006850 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006850:	b480      	push	{r7}
 8006852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006854:	4b03      	ldr	r3, [pc, #12]	; (8006864 <HAL_RCC_GetHCLKFreq+0x14>)
 8006856:	681b      	ldr	r3, [r3, #0]
}
 8006858:	4618      	mov	r0, r3
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	20000068 	.word	0x20000068

08006868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800686c:	f7ff fff0 	bl	8006850 <HAL_RCC_GetHCLKFreq>
 8006870:	4602      	mov	r2, r0
 8006872:	4b06      	ldr	r3, [pc, #24]	; (800688c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	0a1b      	lsrs	r3, r3, #8
 8006878:	f003 0307 	and.w	r3, r3, #7
 800687c:	4904      	ldr	r1, [pc, #16]	; (8006890 <HAL_RCC_GetPCLK1Freq+0x28>)
 800687e:	5ccb      	ldrb	r3, [r1, r3]
 8006880:	f003 031f 	and.w	r3, r3, #31
 8006884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006888:	4618      	mov	r0, r3
 800688a:	bd80      	pop	{r7, pc}
 800688c:	40021000 	.word	0x40021000
 8006890:	0800dab4 	.word	0x0800dab4

08006894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006898:	f7ff ffda 	bl	8006850 <HAL_RCC_GetHCLKFreq>
 800689c:	4602      	mov	r2, r0
 800689e:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	0adb      	lsrs	r3, r3, #11
 80068a4:	f003 0307 	and.w	r3, r3, #7
 80068a8:	4904      	ldr	r1, [pc, #16]	; (80068bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80068aa:	5ccb      	ldrb	r3, [r1, r3]
 80068ac:	f003 031f 	and.w	r3, r3, #31
 80068b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	40021000 	.word	0x40021000
 80068bc:	0800dab4 	.word	0x0800dab4

080068c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80068c8:	2300      	movs	r3, #0
 80068ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80068cc:	4b2a      	ldr	r3, [pc, #168]	; (8006978 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d003      	beq.n	80068e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80068d8:	f7ff f9ee 	bl	8005cb8 <HAL_PWREx_GetVoltageRange>
 80068dc:	6178      	str	r0, [r7, #20]
 80068de:	e014      	b.n	800690a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80068e0:	4b25      	ldr	r3, [pc, #148]	; (8006978 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e4:	4a24      	ldr	r2, [pc, #144]	; (8006978 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ea:	6593      	str	r3, [r2, #88]	; 0x58
 80068ec:	4b22      	ldr	r3, [pc, #136]	; (8006978 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068f4:	60fb      	str	r3, [r7, #12]
 80068f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80068f8:	f7ff f9de 	bl	8005cb8 <HAL_PWREx_GetVoltageRange>
 80068fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80068fe:	4b1e      	ldr	r3, [pc, #120]	; (8006978 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006902:	4a1d      	ldr	r2, [pc, #116]	; (8006978 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006908:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006910:	d10b      	bne.n	800692a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b80      	cmp	r3, #128	; 0x80
 8006916:	d919      	bls.n	800694c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2ba0      	cmp	r3, #160	; 0xa0
 800691c:	d902      	bls.n	8006924 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800691e:	2302      	movs	r3, #2
 8006920:	613b      	str	r3, [r7, #16]
 8006922:	e013      	b.n	800694c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006924:	2301      	movs	r3, #1
 8006926:	613b      	str	r3, [r7, #16]
 8006928:	e010      	b.n	800694c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b80      	cmp	r3, #128	; 0x80
 800692e:	d902      	bls.n	8006936 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006930:	2303      	movs	r3, #3
 8006932:	613b      	str	r3, [r7, #16]
 8006934:	e00a      	b.n	800694c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b80      	cmp	r3, #128	; 0x80
 800693a:	d102      	bne.n	8006942 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800693c:	2302      	movs	r3, #2
 800693e:	613b      	str	r3, [r7, #16]
 8006940:	e004      	b.n	800694c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b70      	cmp	r3, #112	; 0x70
 8006946:	d101      	bne.n	800694c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006948:	2301      	movs	r3, #1
 800694a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800694c:	4b0b      	ldr	r3, [pc, #44]	; (800697c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f023 0207 	bic.w	r2, r3, #7
 8006954:	4909      	ldr	r1, [pc, #36]	; (800697c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	4313      	orrs	r3, r2
 800695a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800695c:	4b07      	ldr	r3, [pc, #28]	; (800697c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0307 	and.w	r3, r3, #7
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	429a      	cmp	r2, r3
 8006968:	d001      	beq.n	800696e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e000      	b.n	8006970 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3718      	adds	r7, #24
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	40021000 	.word	0x40021000
 800697c:	40022000 	.word	0x40022000

08006980 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006988:	2300      	movs	r3, #0
 800698a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800698c:	2300      	movs	r3, #0
 800698e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006998:	2b00      	cmp	r3, #0
 800699a:	d041      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80069a4:	d02a      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80069a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80069aa:	d824      	bhi.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80069ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069b0:	d008      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80069b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069b6:	d81e      	bhi.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00a      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80069bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069c0:	d010      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80069c2:	e018      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80069c4:	4b86      	ldr	r3, [pc, #536]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	4a85      	ldr	r2, [pc, #532]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069d0:	e015      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	3304      	adds	r3, #4
 80069d6:	2100      	movs	r1, #0
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 fabb 	bl	8006f54 <RCCEx_PLLSAI1_Config>
 80069de:	4603      	mov	r3, r0
 80069e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069e2:	e00c      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	3320      	adds	r3, #32
 80069e8:	2100      	movs	r1, #0
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fba6 	bl	800713c <RCCEx_PLLSAI2_Config>
 80069f0:	4603      	mov	r3, r0
 80069f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069f4:	e003      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	74fb      	strb	r3, [r7, #19]
      break;
 80069fa:	e000      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80069fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069fe:	7cfb      	ldrb	r3, [r7, #19]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10b      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a04:	4b76      	ldr	r3, [pc, #472]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a12:	4973      	ldr	r1, [pc, #460]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006a1a:	e001      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a1c:	7cfb      	ldrb	r3, [r7, #19]
 8006a1e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d041      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a34:	d02a      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006a36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a3a:	d824      	bhi.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006a3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a40:	d008      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006a42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a46:	d81e      	bhi.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00a      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a50:	d010      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006a52:	e018      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006a54:	4b62      	ldr	r3, [pc, #392]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	4a61      	ldr	r2, [pc, #388]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a5e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a60:	e015      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	3304      	adds	r3, #4
 8006a66:	2100      	movs	r1, #0
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 fa73 	bl	8006f54 <RCCEx_PLLSAI1_Config>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a72:	e00c      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3320      	adds	r3, #32
 8006a78:	2100      	movs	r1, #0
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f000 fb5e 	bl	800713c <RCCEx_PLLSAI2_Config>
 8006a80:	4603      	mov	r3, r0
 8006a82:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a84:	e003      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	74fb      	strb	r3, [r7, #19]
      break;
 8006a8a:	e000      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006a8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a8e:	7cfb      	ldrb	r3, [r7, #19]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10b      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006a94:	4b52      	ldr	r3, [pc, #328]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a9a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aa2:	494f      	ldr	r1, [pc, #316]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006aaa:	e001      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aac:	7cfb      	ldrb	r3, [r7, #19]
 8006aae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 80a0 	beq.w	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006ac2:	4b47      	ldr	r3, [pc, #284]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d101      	bne.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e000      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00d      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ad8:	4b41      	ldr	r3, [pc, #260]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006adc:	4a40      	ldr	r2, [pc, #256]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ae2:	6593      	str	r3, [r2, #88]	; 0x58
 8006ae4:	4b3e      	ldr	r3, [pc, #248]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aec:	60bb      	str	r3, [r7, #8]
 8006aee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006af0:	2301      	movs	r3, #1
 8006af2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006af4:	4b3b      	ldr	r3, [pc, #236]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a3a      	ldr	r2, [pc, #232]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006afe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b00:	f7fc f9e6 	bl	8002ed0 <HAL_GetTick>
 8006b04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b06:	e009      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b08:	f7fc f9e2 	bl	8002ed0 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d902      	bls.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	74fb      	strb	r3, [r7, #19]
        break;
 8006b1a:	e005      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b1c:	4b31      	ldr	r3, [pc, #196]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d0ef      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006b28:	7cfb      	ldrb	r3, [r7, #19]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d15c      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b2e:	4b2c      	ldr	r3, [pc, #176]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d01f      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d019      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b4c:	4b24      	ldr	r3, [pc, #144]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b58:	4b21      	ldr	r3, [pc, #132]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b5e:	4a20      	ldr	r2, [pc, #128]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b68:	4b1d      	ldr	r3, [pc, #116]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b6e:	4a1c      	ldr	r2, [pc, #112]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b78:	4a19      	ldr	r2, [pc, #100]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d016      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b8a:	f7fc f9a1 	bl	8002ed0 <HAL_GetTick>
 8006b8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b90:	e00b      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b92:	f7fc f99d 	bl	8002ed0 <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d902      	bls.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	74fb      	strb	r3, [r7, #19]
            break;
 8006ba8:	e006      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006baa:	4b0d      	ldr	r3, [pc, #52]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d0ec      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006bb8:	7cfb      	ldrb	r3, [r7, #19]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10c      	bne.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bbe:	4b08      	ldr	r3, [pc, #32]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bce:	4904      	ldr	r1, [pc, #16]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006bd6:	e009      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006bd8:	7cfb      	ldrb	r3, [r7, #19]
 8006bda:	74bb      	strb	r3, [r7, #18]
 8006bdc:	e006      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006bde:	bf00      	nop
 8006be0:	40021000 	.word	0x40021000
 8006be4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be8:	7cfb      	ldrb	r3, [r7, #19]
 8006bea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006bec:	7c7b      	ldrb	r3, [r7, #17]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d105      	bne.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bf2:	4b9e      	ldr	r3, [pc, #632]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf6:	4a9d      	ldr	r2, [pc, #628]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bfc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c0a:	4b98      	ldr	r3, [pc, #608]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c10:	f023 0203 	bic.w	r2, r3, #3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	4994      	ldr	r1, [pc, #592]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c2c:	4b8f      	ldr	r3, [pc, #572]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c32:	f023 020c 	bic.w	r2, r3, #12
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3a:	498c      	ldr	r1, [pc, #560]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0304 	and.w	r3, r3, #4
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00a      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c4e:	4b87      	ldr	r3, [pc, #540]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5c:	4983      	ldr	r1, [pc, #524]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0308 	and.w	r3, r3, #8
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00a      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c70:	4b7e      	ldr	r3, [pc, #504]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7e:	497b      	ldr	r1, [pc, #492]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0310 	and.w	r3, r3, #16
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00a      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006c92:	4b76      	ldr	r3, [pc, #472]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ca0:	4972      	ldr	r1, [pc, #456]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0320 	and.w	r3, r3, #32
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00a      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cb4:	4b6d      	ldr	r3, [pc, #436]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc2:	496a      	ldr	r1, [pc, #424]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00a      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cd6:	4b65      	ldr	r3, [pc, #404]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce4:	4961      	ldr	r1, [pc, #388]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00a      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cf8:	4b5c      	ldr	r3, [pc, #368]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d06:	4959      	ldr	r1, [pc, #356]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00a      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d1a:	4b54      	ldr	r3, [pc, #336]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d28:	4950      	ldr	r1, [pc, #320]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00a      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d3c:	4b4b      	ldr	r3, [pc, #300]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4a:	4948      	ldr	r1, [pc, #288]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00a      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d5e:	4b43      	ldr	r3, [pc, #268]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d6c:	493f      	ldr	r1, [pc, #252]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d028      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d80:	4b3a      	ldr	r3, [pc, #232]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d8e:	4937      	ldr	r1, [pc, #220]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d9e:	d106      	bne.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006da0:	4b32      	ldr	r3, [pc, #200]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	4a31      	ldr	r2, [pc, #196]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006da6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006daa:	60d3      	str	r3, [r2, #12]
 8006dac:	e011      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006db2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006db6:	d10c      	bne.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	3304      	adds	r3, #4
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 f8c8 	bl	8006f54 <RCCEx_PLLSAI1_Config>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006dc8:	7cfb      	ldrb	r3, [r7, #19]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006dce:	7cfb      	ldrb	r3, [r7, #19]
 8006dd0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d028      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006dde:	4b23      	ldr	r3, [pc, #140]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dec:	491f      	ldr	r1, [pc, #124]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dfc:	d106      	bne.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006dfe:	4b1b      	ldr	r3, [pc, #108]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	4a1a      	ldr	r2, [pc, #104]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e08:	60d3      	str	r3, [r2, #12]
 8006e0a:	e011      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e14:	d10c      	bne.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	3304      	adds	r3, #4
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 f899 	bl	8006f54 <RCCEx_PLLSAI1_Config>
 8006e22:	4603      	mov	r3, r0
 8006e24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e26:	7cfb      	ldrb	r3, [r7, #19]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006e2c:	7cfb      	ldrb	r3, [r7, #19]
 8006e2e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d02b      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e3c:	4b0b      	ldr	r3, [pc, #44]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e4a:	4908      	ldr	r1, [pc, #32]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e5a:	d109      	bne.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e5c:	4b03      	ldr	r3, [pc, #12]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	4a02      	ldr	r2, [pc, #8]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e66:	60d3      	str	r3, [r2, #12]
 8006e68:	e014      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006e6a:	bf00      	nop
 8006e6c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e78:	d10c      	bne.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	2101      	movs	r1, #1
 8006e80:	4618      	mov	r0, r3
 8006e82:	f000 f867 	bl	8006f54 <RCCEx_PLLSAI1_Config>
 8006e86:	4603      	mov	r3, r0
 8006e88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e8a:	7cfb      	ldrb	r3, [r7, #19]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006e90:	7cfb      	ldrb	r3, [r7, #19]
 8006e92:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d02f      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ea0:	4b2b      	ldr	r3, [pc, #172]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ea6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eae:	4928      	ldr	r1, [pc, #160]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ebe:	d10d      	bne.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	2102      	movs	r1, #2
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 f844 	bl	8006f54 <RCCEx_PLLSAI1_Config>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ed0:	7cfb      	ldrb	r3, [r7, #19]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d014      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006ed6:	7cfb      	ldrb	r3, [r7, #19]
 8006ed8:	74bb      	strb	r3, [r7, #18]
 8006eda:	e011      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ee4:	d10c      	bne.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	3320      	adds	r3, #32
 8006eea:	2102      	movs	r1, #2
 8006eec:	4618      	mov	r0, r3
 8006eee:	f000 f925 	bl	800713c <RCCEx_PLLSAI2_Config>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ef6:	7cfb      	ldrb	r3, [r7, #19]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d001      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006efc:	7cfb      	ldrb	r3, [r7, #19]
 8006efe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00a      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f0c:	4b10      	ldr	r3, [pc, #64]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f12:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f1a:	490d      	ldr	r1, [pc, #52]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00b      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f2e:	4b08      	ldr	r3, [pc, #32]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f3e:	4904      	ldr	r1, [pc, #16]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006f46:	7cbb      	ldrb	r3, [r7, #18]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3718      	adds	r7, #24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	40021000 	.word	0x40021000

08006f54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006f62:	4b75      	ldr	r3, [pc, #468]	; (8007138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	f003 0303 	and.w	r3, r3, #3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d018      	beq.n	8006fa0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006f6e:	4b72      	ldr	r3, [pc, #456]	; (8007138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	f003 0203 	and.w	r2, r3, #3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d10d      	bne.n	8006f9a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
       ||
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d009      	beq.n	8006f9a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006f86:	4b6c      	ldr	r3, [pc, #432]	; (8007138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	091b      	lsrs	r3, r3, #4
 8006f8c:	f003 0307 	and.w	r3, r3, #7
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
       ||
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d047      	beq.n	800702a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	73fb      	strb	r3, [r7, #15]
 8006f9e:	e044      	b.n	800702a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b03      	cmp	r3, #3
 8006fa6:	d018      	beq.n	8006fda <RCCEx_PLLSAI1_Config+0x86>
 8006fa8:	2b03      	cmp	r3, #3
 8006faa:	d825      	bhi.n	8006ff8 <RCCEx_PLLSAI1_Config+0xa4>
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d002      	beq.n	8006fb6 <RCCEx_PLLSAI1_Config+0x62>
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d009      	beq.n	8006fc8 <RCCEx_PLLSAI1_Config+0x74>
 8006fb4:	e020      	b.n	8006ff8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006fb6:	4b60      	ldr	r3, [pc, #384]	; (8007138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d11d      	bne.n	8006ffe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fc6:	e01a      	b.n	8006ffe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006fc8:	4b5b      	ldr	r3, [pc, #364]	; (8007138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d116      	bne.n	8007002 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fd8:	e013      	b.n	8007002 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006fda:	4b57      	ldr	r3, [pc, #348]	; (8007138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10f      	bne.n	8007006 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006fe6:	4b54      	ldr	r3, [pc, #336]	; (8007138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d109      	bne.n	8007006 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006ff6:	e006      	b.n	8007006 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8006ffc:	e004      	b.n	8007008 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006ffe:	bf00      	nop
 8007000:	e002      	b.n	8007008 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007002:	bf00      	nop
 8007004:	e000      	b.n	8007008 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007006:	bf00      	nop
    }

    if(status == HAL_OK)
 8007008:	7bfb      	ldrb	r3, [r7, #15]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10d      	bne.n	800702a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800700e:	4b4a      	ldr	r3, [pc, #296]	; (8007138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6819      	ldr	r1, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	3b01      	subs	r3, #1
 8007020:	011b      	lsls	r3, r3, #4
 8007022:	430b      	orrs	r3, r1
 8007024:	4944      	ldr	r1, [pc, #272]	; (8007138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007026:	4313      	orrs	r3, r2
 8007028:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800702a:	7bfb      	ldrb	r3, [r7, #15]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d17d      	bne.n	800712c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007030:	4b41      	ldr	r3, [pc, #260]	; (8007138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a40      	ldr	r2, [pc, #256]	; (8007138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007036:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800703a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800703c:	f7fb ff48 	bl	8002ed0 <HAL_GetTick>
 8007040:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007042:	e009      	b.n	8007058 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007044:	f7fb ff44 	bl	8002ed0 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	2b02      	cmp	r3, #2
 8007050:	d902      	bls.n	8007058 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	73fb      	strb	r3, [r7, #15]
        break;
 8007056:	e005      	b.n	8007064 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007058:	4b37      	ldr	r3, [pc, #220]	; (8007138 <RCCEx_PLLSAI1_Config+0x1e4>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1ef      	bne.n	8007044 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d160      	bne.n	800712c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d111      	bne.n	8007094 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007070:	4b31      	ldr	r3, [pc, #196]	; (8007138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	6892      	ldr	r2, [r2, #8]
 8007080:	0211      	lsls	r1, r2, #8
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	68d2      	ldr	r2, [r2, #12]
 8007086:	0912      	lsrs	r2, r2, #4
 8007088:	0452      	lsls	r2, r2, #17
 800708a:	430a      	orrs	r2, r1
 800708c:	492a      	ldr	r1, [pc, #168]	; (8007138 <RCCEx_PLLSAI1_Config+0x1e4>)
 800708e:	4313      	orrs	r3, r2
 8007090:	610b      	str	r3, [r1, #16]
 8007092:	e027      	b.n	80070e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d112      	bne.n	80070c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800709a:	4b27      	ldr	r3, [pc, #156]	; (8007138 <RCCEx_PLLSAI1_Config+0x1e4>)
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80070a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	6892      	ldr	r2, [r2, #8]
 80070aa:	0211      	lsls	r1, r2, #8
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6912      	ldr	r2, [r2, #16]
 80070b0:	0852      	lsrs	r2, r2, #1
 80070b2:	3a01      	subs	r2, #1
 80070b4:	0552      	lsls	r2, r2, #21
 80070b6:	430a      	orrs	r2, r1
 80070b8:	491f      	ldr	r1, [pc, #124]	; (8007138 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	610b      	str	r3, [r1, #16]
 80070be:	e011      	b.n	80070e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80070c0:	4b1d      	ldr	r3, [pc, #116]	; (8007138 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80070c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	6892      	ldr	r2, [r2, #8]
 80070d0:	0211      	lsls	r1, r2, #8
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	6952      	ldr	r2, [r2, #20]
 80070d6:	0852      	lsrs	r2, r2, #1
 80070d8:	3a01      	subs	r2, #1
 80070da:	0652      	lsls	r2, r2, #25
 80070dc:	430a      	orrs	r2, r1
 80070de:	4916      	ldr	r1, [pc, #88]	; (8007138 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070e0:	4313      	orrs	r3, r2
 80070e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80070e4:	4b14      	ldr	r3, [pc, #80]	; (8007138 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a13      	ldr	r2, [pc, #76]	; (8007138 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070f0:	f7fb feee 	bl	8002ed0 <HAL_GetTick>
 80070f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80070f6:	e009      	b.n	800710c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80070f8:	f7fb feea 	bl	8002ed0 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b02      	cmp	r3, #2
 8007104:	d902      	bls.n	800710c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	73fb      	strb	r3, [r7, #15]
          break;
 800710a:	e005      	b.n	8007118 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800710c:	4b0a      	ldr	r3, [pc, #40]	; (8007138 <RCCEx_PLLSAI1_Config+0x1e4>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d0ef      	beq.n	80070f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007118:	7bfb      	ldrb	r3, [r7, #15]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d106      	bne.n	800712c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800711e:	4b06      	ldr	r3, [pc, #24]	; (8007138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007120:	691a      	ldr	r2, [r3, #16]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	4904      	ldr	r1, [pc, #16]	; (8007138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007128:	4313      	orrs	r3, r2
 800712a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800712c:	7bfb      	ldrb	r3, [r7, #15]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	40021000 	.word	0x40021000

0800713c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800714a:	4b6a      	ldr	r3, [pc, #424]	; (80072f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	f003 0303 	and.w	r3, r3, #3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d018      	beq.n	8007188 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007156:	4b67      	ldr	r3, [pc, #412]	; (80072f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f003 0203 	and.w	r2, r3, #3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	429a      	cmp	r2, r3
 8007164:	d10d      	bne.n	8007182 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
       ||
 800716a:	2b00      	cmp	r3, #0
 800716c:	d009      	beq.n	8007182 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800716e:	4b61      	ldr	r3, [pc, #388]	; (80072f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	091b      	lsrs	r3, r3, #4
 8007174:	f003 0307 	and.w	r3, r3, #7
 8007178:	1c5a      	adds	r2, r3, #1
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
       ||
 800717e:	429a      	cmp	r2, r3
 8007180:	d047      	beq.n	8007212 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	73fb      	strb	r3, [r7, #15]
 8007186:	e044      	b.n	8007212 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b03      	cmp	r3, #3
 800718e:	d018      	beq.n	80071c2 <RCCEx_PLLSAI2_Config+0x86>
 8007190:	2b03      	cmp	r3, #3
 8007192:	d825      	bhi.n	80071e0 <RCCEx_PLLSAI2_Config+0xa4>
 8007194:	2b01      	cmp	r3, #1
 8007196:	d002      	beq.n	800719e <RCCEx_PLLSAI2_Config+0x62>
 8007198:	2b02      	cmp	r3, #2
 800719a:	d009      	beq.n	80071b0 <RCCEx_PLLSAI2_Config+0x74>
 800719c:	e020      	b.n	80071e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800719e:	4b55      	ldr	r3, [pc, #340]	; (80072f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0302 	and.w	r3, r3, #2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d11d      	bne.n	80071e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071ae:	e01a      	b.n	80071e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80071b0:	4b50      	ldr	r3, [pc, #320]	; (80072f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d116      	bne.n	80071ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071c0:	e013      	b.n	80071ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80071c2:	4b4c      	ldr	r3, [pc, #304]	; (80072f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10f      	bne.n	80071ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80071ce:	4b49      	ldr	r3, [pc, #292]	; (80072f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d109      	bne.n	80071ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80071de:	e006      	b.n	80071ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	73fb      	strb	r3, [r7, #15]
      break;
 80071e4:	e004      	b.n	80071f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80071e6:	bf00      	nop
 80071e8:	e002      	b.n	80071f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80071ea:	bf00      	nop
 80071ec:	e000      	b.n	80071f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80071ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80071f0:	7bfb      	ldrb	r3, [r7, #15]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10d      	bne.n	8007212 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80071f6:	4b3f      	ldr	r3, [pc, #252]	; (80072f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6819      	ldr	r1, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	3b01      	subs	r3, #1
 8007208:	011b      	lsls	r3, r3, #4
 800720a:	430b      	orrs	r3, r1
 800720c:	4939      	ldr	r1, [pc, #228]	; (80072f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800720e:	4313      	orrs	r3, r2
 8007210:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007212:	7bfb      	ldrb	r3, [r7, #15]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d167      	bne.n	80072e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007218:	4b36      	ldr	r3, [pc, #216]	; (80072f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a35      	ldr	r2, [pc, #212]	; (80072f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800721e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007222:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007224:	f7fb fe54 	bl	8002ed0 <HAL_GetTick>
 8007228:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800722a:	e009      	b.n	8007240 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800722c:	f7fb fe50 	bl	8002ed0 <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	2b02      	cmp	r3, #2
 8007238:	d902      	bls.n	8007240 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	73fb      	strb	r3, [r7, #15]
        break;
 800723e:	e005      	b.n	800724c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007240:	4b2c      	ldr	r3, [pc, #176]	; (80072f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1ef      	bne.n	800722c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800724c:	7bfb      	ldrb	r3, [r7, #15]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d14a      	bne.n	80072e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d111      	bne.n	800727c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007258:	4b26      	ldr	r3, [pc, #152]	; (80072f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800725a:	695b      	ldr	r3, [r3, #20]
 800725c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	6892      	ldr	r2, [r2, #8]
 8007268:	0211      	lsls	r1, r2, #8
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	68d2      	ldr	r2, [r2, #12]
 800726e:	0912      	lsrs	r2, r2, #4
 8007270:	0452      	lsls	r2, r2, #17
 8007272:	430a      	orrs	r2, r1
 8007274:	491f      	ldr	r1, [pc, #124]	; (80072f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007276:	4313      	orrs	r3, r2
 8007278:	614b      	str	r3, [r1, #20]
 800727a:	e011      	b.n	80072a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800727c:	4b1d      	ldr	r3, [pc, #116]	; (80072f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007284:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	6892      	ldr	r2, [r2, #8]
 800728c:	0211      	lsls	r1, r2, #8
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	6912      	ldr	r2, [r2, #16]
 8007292:	0852      	lsrs	r2, r2, #1
 8007294:	3a01      	subs	r2, #1
 8007296:	0652      	lsls	r2, r2, #25
 8007298:	430a      	orrs	r2, r1
 800729a:	4916      	ldr	r1, [pc, #88]	; (80072f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800729c:	4313      	orrs	r3, r2
 800729e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80072a0:	4b14      	ldr	r3, [pc, #80]	; (80072f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a13      	ldr	r2, [pc, #76]	; (80072f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80072a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ac:	f7fb fe10 	bl	8002ed0 <HAL_GetTick>
 80072b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80072b2:	e009      	b.n	80072c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80072b4:	f7fb fe0c 	bl	8002ed0 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d902      	bls.n	80072c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	73fb      	strb	r3, [r7, #15]
          break;
 80072c6:	e005      	b.n	80072d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80072c8:	4b0a      	ldr	r3, [pc, #40]	; (80072f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0ef      	beq.n	80072b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80072d4:	7bfb      	ldrb	r3, [r7, #15]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d106      	bne.n	80072e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80072da:	4b06      	ldr	r3, [pc, #24]	; (80072f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80072dc:	695a      	ldr	r2, [r3, #20]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	4904      	ldr	r1, [pc, #16]	; (80072f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	40021000 	.word	0x40021000

080072f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b01      	cmp	r3, #1
 800730a:	d001      	beq.n	8007310 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e047      	b.n	80073a0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2202      	movs	r2, #2
 8007314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a23      	ldr	r2, [pc, #140]	; (80073ac <HAL_TIM_Base_Start+0xb4>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d01d      	beq.n	800735e <HAL_TIM_Base_Start+0x66>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800732a:	d018      	beq.n	800735e <HAL_TIM_Base_Start+0x66>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a1f      	ldr	r2, [pc, #124]	; (80073b0 <HAL_TIM_Base_Start+0xb8>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d013      	beq.n	800735e <HAL_TIM_Base_Start+0x66>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a1e      	ldr	r2, [pc, #120]	; (80073b4 <HAL_TIM_Base_Start+0xbc>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d00e      	beq.n	800735e <HAL_TIM_Base_Start+0x66>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a1c      	ldr	r2, [pc, #112]	; (80073b8 <HAL_TIM_Base_Start+0xc0>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d009      	beq.n	800735e <HAL_TIM_Base_Start+0x66>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a1b      	ldr	r2, [pc, #108]	; (80073bc <HAL_TIM_Base_Start+0xc4>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d004      	beq.n	800735e <HAL_TIM_Base_Start+0x66>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a19      	ldr	r2, [pc, #100]	; (80073c0 <HAL_TIM_Base_Start+0xc8>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d115      	bne.n	800738a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689a      	ldr	r2, [r3, #8]
 8007364:	4b17      	ldr	r3, [pc, #92]	; (80073c4 <HAL_TIM_Base_Start+0xcc>)
 8007366:	4013      	ands	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2b06      	cmp	r3, #6
 800736e:	d015      	beq.n	800739c <HAL_TIM_Base_Start+0xa4>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007376:	d011      	beq.n	800739c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f042 0201 	orr.w	r2, r2, #1
 8007386:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007388:	e008      	b.n	800739c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f042 0201 	orr.w	r2, r2, #1
 8007398:	601a      	str	r2, [r3, #0]
 800739a:	e000      	b.n	800739e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800739c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	40012c00 	.word	0x40012c00
 80073b0:	40000400 	.word	0x40000400
 80073b4:	40000800 	.word	0x40000800
 80073b8:	40000c00 	.word	0x40000c00
 80073bc:	40013400 	.word	0x40013400
 80073c0:	40014000 	.word	0x40014000
 80073c4:	00010007 	.word	0x00010007

080073c8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6a1a      	ldr	r2, [r3, #32]
 80073d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80073da:	4013      	ands	r3, r2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10f      	bne.n	8007400 <HAL_TIM_Base_Stop+0x38>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6a1a      	ldr	r2, [r3, #32]
 80073e6:	f240 4344 	movw	r3, #1092	; 0x444
 80073ea:	4013      	ands	r3, r2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d107      	bne.n	8007400 <HAL_TIM_Base_Stop+0x38>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0201 	bic.w	r2, r2, #1
 80073fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b082      	sub	sp, #8
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e049      	b.n	80074bc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b00      	cmp	r3, #0
 8007432:	d106      	bne.n	8007442 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7fb fac9 	bl	80029d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2202      	movs	r2, #2
 8007446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3304      	adds	r3, #4
 8007452:	4619      	mov	r1, r3
 8007454:	4610      	mov	r0, r2
 8007456:	f000 fae5 	bl	8007a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d109      	bne.n	80074e8 <HAL_TIM_PWM_Start+0x24>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b01      	cmp	r3, #1
 80074de:	bf14      	ite	ne
 80074e0:	2301      	movne	r3, #1
 80074e2:	2300      	moveq	r3, #0
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	e03c      	b.n	8007562 <HAL_TIM_PWM_Start+0x9e>
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	2b04      	cmp	r3, #4
 80074ec:	d109      	bne.n	8007502 <HAL_TIM_PWM_Start+0x3e>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	bf14      	ite	ne
 80074fa:	2301      	movne	r3, #1
 80074fc:	2300      	moveq	r3, #0
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	e02f      	b.n	8007562 <HAL_TIM_PWM_Start+0x9e>
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2b08      	cmp	r3, #8
 8007506:	d109      	bne.n	800751c <HAL_TIM_PWM_Start+0x58>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b01      	cmp	r3, #1
 8007512:	bf14      	ite	ne
 8007514:	2301      	movne	r3, #1
 8007516:	2300      	moveq	r3, #0
 8007518:	b2db      	uxtb	r3, r3
 800751a:	e022      	b.n	8007562 <HAL_TIM_PWM_Start+0x9e>
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	2b0c      	cmp	r3, #12
 8007520:	d109      	bne.n	8007536 <HAL_TIM_PWM_Start+0x72>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b01      	cmp	r3, #1
 800752c:	bf14      	ite	ne
 800752e:	2301      	movne	r3, #1
 8007530:	2300      	moveq	r3, #0
 8007532:	b2db      	uxtb	r3, r3
 8007534:	e015      	b.n	8007562 <HAL_TIM_PWM_Start+0x9e>
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b10      	cmp	r3, #16
 800753a:	d109      	bne.n	8007550 <HAL_TIM_PWM_Start+0x8c>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b01      	cmp	r3, #1
 8007546:	bf14      	ite	ne
 8007548:	2301      	movne	r3, #1
 800754a:	2300      	moveq	r3, #0
 800754c:	b2db      	uxtb	r3, r3
 800754e:	e008      	b.n	8007562 <HAL_TIM_PWM_Start+0x9e>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b01      	cmp	r3, #1
 800755a:	bf14      	ite	ne
 800755c:	2301      	movne	r3, #1
 800755e:	2300      	moveq	r3, #0
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e09c      	b.n	80076a4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d104      	bne.n	800757a <HAL_TIM_PWM_Start+0xb6>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2202      	movs	r2, #2
 8007574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007578:	e023      	b.n	80075c2 <HAL_TIM_PWM_Start+0xfe>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b04      	cmp	r3, #4
 800757e:	d104      	bne.n	800758a <HAL_TIM_PWM_Start+0xc6>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007588:	e01b      	b.n	80075c2 <HAL_TIM_PWM_Start+0xfe>
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b08      	cmp	r3, #8
 800758e:	d104      	bne.n	800759a <HAL_TIM_PWM_Start+0xd6>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2202      	movs	r2, #2
 8007594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007598:	e013      	b.n	80075c2 <HAL_TIM_PWM_Start+0xfe>
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b0c      	cmp	r3, #12
 800759e:	d104      	bne.n	80075aa <HAL_TIM_PWM_Start+0xe6>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2202      	movs	r2, #2
 80075a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075a8:	e00b      	b.n	80075c2 <HAL_TIM_PWM_Start+0xfe>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b10      	cmp	r3, #16
 80075ae:	d104      	bne.n	80075ba <HAL_TIM_PWM_Start+0xf6>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075b8:	e003      	b.n	80075c2 <HAL_TIM_PWM_Start+0xfe>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2202      	movs	r2, #2
 80075be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2201      	movs	r2, #1
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 fd9a 	bl	8008104 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a35      	ldr	r2, [pc, #212]	; (80076ac <HAL_TIM_PWM_Start+0x1e8>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d013      	beq.n	8007602 <HAL_TIM_PWM_Start+0x13e>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a34      	ldr	r2, [pc, #208]	; (80076b0 <HAL_TIM_PWM_Start+0x1ec>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d00e      	beq.n	8007602 <HAL_TIM_PWM_Start+0x13e>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a32      	ldr	r2, [pc, #200]	; (80076b4 <HAL_TIM_PWM_Start+0x1f0>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d009      	beq.n	8007602 <HAL_TIM_PWM_Start+0x13e>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a31      	ldr	r2, [pc, #196]	; (80076b8 <HAL_TIM_PWM_Start+0x1f4>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d004      	beq.n	8007602 <HAL_TIM_PWM_Start+0x13e>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a2f      	ldr	r2, [pc, #188]	; (80076bc <HAL_TIM_PWM_Start+0x1f8>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d101      	bne.n	8007606 <HAL_TIM_PWM_Start+0x142>
 8007602:	2301      	movs	r3, #1
 8007604:	e000      	b.n	8007608 <HAL_TIM_PWM_Start+0x144>
 8007606:	2300      	movs	r3, #0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d007      	beq.n	800761c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800761a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a22      	ldr	r2, [pc, #136]	; (80076ac <HAL_TIM_PWM_Start+0x1e8>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d01d      	beq.n	8007662 <HAL_TIM_PWM_Start+0x19e>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800762e:	d018      	beq.n	8007662 <HAL_TIM_PWM_Start+0x19e>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a22      	ldr	r2, [pc, #136]	; (80076c0 <HAL_TIM_PWM_Start+0x1fc>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d013      	beq.n	8007662 <HAL_TIM_PWM_Start+0x19e>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a21      	ldr	r2, [pc, #132]	; (80076c4 <HAL_TIM_PWM_Start+0x200>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d00e      	beq.n	8007662 <HAL_TIM_PWM_Start+0x19e>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a1f      	ldr	r2, [pc, #124]	; (80076c8 <HAL_TIM_PWM_Start+0x204>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d009      	beq.n	8007662 <HAL_TIM_PWM_Start+0x19e>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a17      	ldr	r2, [pc, #92]	; (80076b0 <HAL_TIM_PWM_Start+0x1ec>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d004      	beq.n	8007662 <HAL_TIM_PWM_Start+0x19e>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a15      	ldr	r2, [pc, #84]	; (80076b4 <HAL_TIM_PWM_Start+0x1f0>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d115      	bne.n	800768e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	689a      	ldr	r2, [r3, #8]
 8007668:	4b18      	ldr	r3, [pc, #96]	; (80076cc <HAL_TIM_PWM_Start+0x208>)
 800766a:	4013      	ands	r3, r2
 800766c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2b06      	cmp	r3, #6
 8007672:	d015      	beq.n	80076a0 <HAL_TIM_PWM_Start+0x1dc>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800767a:	d011      	beq.n	80076a0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f042 0201 	orr.w	r2, r2, #1
 800768a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800768c:	e008      	b.n	80076a0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f042 0201 	orr.w	r2, r2, #1
 800769c:	601a      	str	r2, [r3, #0]
 800769e:	e000      	b.n	80076a2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	40012c00 	.word	0x40012c00
 80076b0:	40013400 	.word	0x40013400
 80076b4:	40014000 	.word	0x40014000
 80076b8:	40014400 	.word	0x40014400
 80076bc:	40014800 	.word	0x40014800
 80076c0:	40000400 	.word	0x40000400
 80076c4:	40000800 	.word	0x40000800
 80076c8:	40000c00 	.word	0x40000c00
 80076cc:	00010007 	.word	0x00010007

080076d0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2200      	movs	r2, #0
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 fd0e 	bl	8008104 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a3e      	ldr	r2, [pc, #248]	; (80077e8 <HAL_TIM_PWM_Stop+0x118>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d013      	beq.n	800771a <HAL_TIM_PWM_Stop+0x4a>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a3d      	ldr	r2, [pc, #244]	; (80077ec <HAL_TIM_PWM_Stop+0x11c>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d00e      	beq.n	800771a <HAL_TIM_PWM_Stop+0x4a>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a3b      	ldr	r2, [pc, #236]	; (80077f0 <HAL_TIM_PWM_Stop+0x120>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d009      	beq.n	800771a <HAL_TIM_PWM_Stop+0x4a>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a3a      	ldr	r2, [pc, #232]	; (80077f4 <HAL_TIM_PWM_Stop+0x124>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d004      	beq.n	800771a <HAL_TIM_PWM_Stop+0x4a>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a38      	ldr	r2, [pc, #224]	; (80077f8 <HAL_TIM_PWM_Stop+0x128>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d101      	bne.n	800771e <HAL_TIM_PWM_Stop+0x4e>
 800771a:	2301      	movs	r3, #1
 800771c:	e000      	b.n	8007720 <HAL_TIM_PWM_Stop+0x50>
 800771e:	2300      	movs	r3, #0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d017      	beq.n	8007754 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6a1a      	ldr	r2, [r3, #32]
 800772a:	f241 1311 	movw	r3, #4369	; 0x1111
 800772e:	4013      	ands	r3, r2
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10f      	bne.n	8007754 <HAL_TIM_PWM_Stop+0x84>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6a1a      	ldr	r2, [r3, #32]
 800773a:	f240 4344 	movw	r3, #1092	; 0x444
 800773e:	4013      	ands	r3, r2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d107      	bne.n	8007754 <HAL_TIM_PWM_Stop+0x84>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007752:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6a1a      	ldr	r2, [r3, #32]
 800775a:	f241 1311 	movw	r3, #4369	; 0x1111
 800775e:	4013      	ands	r3, r2
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10f      	bne.n	8007784 <HAL_TIM_PWM_Stop+0xb4>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6a1a      	ldr	r2, [r3, #32]
 800776a:	f240 4344 	movw	r3, #1092	; 0x444
 800776e:	4013      	ands	r3, r2
 8007770:	2b00      	cmp	r3, #0
 8007772:	d107      	bne.n	8007784 <HAL_TIM_PWM_Stop+0xb4>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 0201 	bic.w	r2, r2, #1
 8007782:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d104      	bne.n	8007794 <HAL_TIM_PWM_Stop+0xc4>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007792:	e023      	b.n	80077dc <HAL_TIM_PWM_Stop+0x10c>
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2b04      	cmp	r3, #4
 8007798:	d104      	bne.n	80077a4 <HAL_TIM_PWM_Stop+0xd4>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077a2:	e01b      	b.n	80077dc <HAL_TIM_PWM_Stop+0x10c>
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2b08      	cmp	r3, #8
 80077a8:	d104      	bne.n	80077b4 <HAL_TIM_PWM_Stop+0xe4>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077b2:	e013      	b.n	80077dc <HAL_TIM_PWM_Stop+0x10c>
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2b0c      	cmp	r3, #12
 80077b8:	d104      	bne.n	80077c4 <HAL_TIM_PWM_Stop+0xf4>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077c2:	e00b      	b.n	80077dc <HAL_TIM_PWM_Stop+0x10c>
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	2b10      	cmp	r3, #16
 80077c8:	d104      	bne.n	80077d4 <HAL_TIM_PWM_Stop+0x104>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077d2:	e003      	b.n	80077dc <HAL_TIM_PWM_Stop+0x10c>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	40012c00 	.word	0x40012c00
 80077ec:	40013400 	.word	0x40013400
 80077f0:	40014000 	.word	0x40014000
 80077f4:	40014400 	.word	0x40014400
 80077f8:	40014800 	.word	0x40014800

080077fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007808:	2300      	movs	r3, #0
 800780a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007812:	2b01      	cmp	r3, #1
 8007814:	d101      	bne.n	800781a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007816:	2302      	movs	r3, #2
 8007818:	e0ff      	b.n	8007a1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b14      	cmp	r3, #20
 8007826:	f200 80f0 	bhi.w	8007a0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800782a:	a201      	add	r2, pc, #4	; (adr r2, 8007830 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800782c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007830:	08007885 	.word	0x08007885
 8007834:	08007a0b 	.word	0x08007a0b
 8007838:	08007a0b 	.word	0x08007a0b
 800783c:	08007a0b 	.word	0x08007a0b
 8007840:	080078c5 	.word	0x080078c5
 8007844:	08007a0b 	.word	0x08007a0b
 8007848:	08007a0b 	.word	0x08007a0b
 800784c:	08007a0b 	.word	0x08007a0b
 8007850:	08007907 	.word	0x08007907
 8007854:	08007a0b 	.word	0x08007a0b
 8007858:	08007a0b 	.word	0x08007a0b
 800785c:	08007a0b 	.word	0x08007a0b
 8007860:	08007947 	.word	0x08007947
 8007864:	08007a0b 	.word	0x08007a0b
 8007868:	08007a0b 	.word	0x08007a0b
 800786c:	08007a0b 	.word	0x08007a0b
 8007870:	08007989 	.word	0x08007989
 8007874:	08007a0b 	.word	0x08007a0b
 8007878:	08007a0b 	.word	0x08007a0b
 800787c:	08007a0b 	.word	0x08007a0b
 8007880:	080079c9 	.word	0x080079c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68b9      	ldr	r1, [r7, #8]
 800788a:	4618      	mov	r0, r3
 800788c:	f000 f964 	bl	8007b58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	699a      	ldr	r2, [r3, #24]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 0208 	orr.w	r2, r2, #8
 800789e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	699a      	ldr	r2, [r3, #24]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f022 0204 	bic.w	r2, r2, #4
 80078ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6999      	ldr	r1, [r3, #24]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	691a      	ldr	r2, [r3, #16]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	430a      	orrs	r2, r1
 80078c0:	619a      	str	r2, [r3, #24]
      break;
 80078c2:	e0a5      	b.n	8007a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68b9      	ldr	r1, [r7, #8]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 f9d4 	bl	8007c78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	699a      	ldr	r2, [r3, #24]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	699a      	ldr	r2, [r3, #24]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6999      	ldr	r1, [r3, #24]
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	021a      	lsls	r2, r3, #8
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	430a      	orrs	r2, r1
 8007902:	619a      	str	r2, [r3, #24]
      break;
 8007904:	e084      	b.n	8007a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68b9      	ldr	r1, [r7, #8]
 800790c:	4618      	mov	r0, r3
 800790e:	f000 fa3d 	bl	8007d8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	69da      	ldr	r2, [r3, #28]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f042 0208 	orr.w	r2, r2, #8
 8007920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	69da      	ldr	r2, [r3, #28]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f022 0204 	bic.w	r2, r2, #4
 8007930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	69d9      	ldr	r1, [r3, #28]
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	691a      	ldr	r2, [r3, #16]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	430a      	orrs	r2, r1
 8007942:	61da      	str	r2, [r3, #28]
      break;
 8007944:	e064      	b.n	8007a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68b9      	ldr	r1, [r7, #8]
 800794c:	4618      	mov	r0, r3
 800794e:	f000 faa5 	bl	8007e9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	69da      	ldr	r2, [r3, #28]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	69da      	ldr	r2, [r3, #28]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	69d9      	ldr	r1, [r3, #28]
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	021a      	lsls	r2, r3, #8
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	430a      	orrs	r2, r1
 8007984:	61da      	str	r2, [r3, #28]
      break;
 8007986:	e043      	b.n	8007a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68b9      	ldr	r1, [r7, #8]
 800798e:	4618      	mov	r0, r3
 8007990:	f000 faee 	bl	8007f70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f042 0208 	orr.w	r2, r2, #8
 80079a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f022 0204 	bic.w	r2, r2, #4
 80079b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	691a      	ldr	r2, [r3, #16]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80079c6:	e023      	b.n	8007a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68b9      	ldr	r1, [r7, #8]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 fb32 	bl	8008038 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	021a      	lsls	r2, r3, #8
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	430a      	orrs	r2, r1
 8007a06:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007a08:	e002      	b.n	8007a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3718      	adds	r7, #24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop

08007a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a40      	ldr	r2, [pc, #256]	; (8007b38 <TIM_Base_SetConfig+0x114>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d013      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a42:	d00f      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a3d      	ldr	r2, [pc, #244]	; (8007b3c <TIM_Base_SetConfig+0x118>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d00b      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a3c      	ldr	r2, [pc, #240]	; (8007b40 <TIM_Base_SetConfig+0x11c>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d007      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a3b      	ldr	r2, [pc, #236]	; (8007b44 <TIM_Base_SetConfig+0x120>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d003      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a3a      	ldr	r2, [pc, #232]	; (8007b48 <TIM_Base_SetConfig+0x124>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d108      	bne.n	8007a76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a2f      	ldr	r2, [pc, #188]	; (8007b38 <TIM_Base_SetConfig+0x114>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d01f      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a84:	d01b      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a2c      	ldr	r2, [pc, #176]	; (8007b3c <TIM_Base_SetConfig+0x118>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d017      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a2b      	ldr	r2, [pc, #172]	; (8007b40 <TIM_Base_SetConfig+0x11c>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d013      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a2a      	ldr	r2, [pc, #168]	; (8007b44 <TIM_Base_SetConfig+0x120>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d00f      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a29      	ldr	r2, [pc, #164]	; (8007b48 <TIM_Base_SetConfig+0x124>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d00b      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a28      	ldr	r2, [pc, #160]	; (8007b4c <TIM_Base_SetConfig+0x128>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d007      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a27      	ldr	r2, [pc, #156]	; (8007b50 <TIM_Base_SetConfig+0x12c>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d003      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a26      	ldr	r2, [pc, #152]	; (8007b54 <TIM_Base_SetConfig+0x130>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d108      	bne.n	8007ad0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	689a      	ldr	r2, [r3, #8]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a10      	ldr	r2, [pc, #64]	; (8007b38 <TIM_Base_SetConfig+0x114>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d00f      	beq.n	8007b1c <TIM_Base_SetConfig+0xf8>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a12      	ldr	r2, [pc, #72]	; (8007b48 <TIM_Base_SetConfig+0x124>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d00b      	beq.n	8007b1c <TIM_Base_SetConfig+0xf8>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a11      	ldr	r2, [pc, #68]	; (8007b4c <TIM_Base_SetConfig+0x128>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d007      	beq.n	8007b1c <TIM_Base_SetConfig+0xf8>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a10      	ldr	r2, [pc, #64]	; (8007b50 <TIM_Base_SetConfig+0x12c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d003      	beq.n	8007b1c <TIM_Base_SetConfig+0xf8>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a0f      	ldr	r2, [pc, #60]	; (8007b54 <TIM_Base_SetConfig+0x130>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d103      	bne.n	8007b24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	691a      	ldr	r2, [r3, #16]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	615a      	str	r2, [r3, #20]
}
 8007b2a:	bf00      	nop
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	40012c00 	.word	0x40012c00
 8007b3c:	40000400 	.word	0x40000400
 8007b40:	40000800 	.word	0x40000800
 8007b44:	40000c00 	.word	0x40000c00
 8007b48:	40013400 	.word	0x40013400
 8007b4c:	40014000 	.word	0x40014000
 8007b50:	40014400 	.word	0x40014400
 8007b54:	40014800 	.word	0x40014800

08007b58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b087      	sub	sp, #28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	f023 0201 	bic.w	r2, r3, #1
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f023 0303 	bic.w	r3, r3, #3
 8007b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	f023 0302 	bic.w	r3, r3, #2
 8007ba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a2c      	ldr	r2, [pc, #176]	; (8007c64 <TIM_OC1_SetConfig+0x10c>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d00f      	beq.n	8007bd8 <TIM_OC1_SetConfig+0x80>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a2b      	ldr	r2, [pc, #172]	; (8007c68 <TIM_OC1_SetConfig+0x110>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d00b      	beq.n	8007bd8 <TIM_OC1_SetConfig+0x80>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a2a      	ldr	r2, [pc, #168]	; (8007c6c <TIM_OC1_SetConfig+0x114>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d007      	beq.n	8007bd8 <TIM_OC1_SetConfig+0x80>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a29      	ldr	r2, [pc, #164]	; (8007c70 <TIM_OC1_SetConfig+0x118>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d003      	beq.n	8007bd8 <TIM_OC1_SetConfig+0x80>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a28      	ldr	r2, [pc, #160]	; (8007c74 <TIM_OC1_SetConfig+0x11c>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d10c      	bne.n	8007bf2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	f023 0308 	bic.w	r3, r3, #8
 8007bde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f023 0304 	bic.w	r3, r3, #4
 8007bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a1b      	ldr	r2, [pc, #108]	; (8007c64 <TIM_OC1_SetConfig+0x10c>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d00f      	beq.n	8007c1a <TIM_OC1_SetConfig+0xc2>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a1a      	ldr	r2, [pc, #104]	; (8007c68 <TIM_OC1_SetConfig+0x110>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d00b      	beq.n	8007c1a <TIM_OC1_SetConfig+0xc2>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a19      	ldr	r2, [pc, #100]	; (8007c6c <TIM_OC1_SetConfig+0x114>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d007      	beq.n	8007c1a <TIM_OC1_SetConfig+0xc2>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a18      	ldr	r2, [pc, #96]	; (8007c70 <TIM_OC1_SetConfig+0x118>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d003      	beq.n	8007c1a <TIM_OC1_SetConfig+0xc2>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a17      	ldr	r2, [pc, #92]	; (8007c74 <TIM_OC1_SetConfig+0x11c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d111      	bne.n	8007c3e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	621a      	str	r2, [r3, #32]
}
 8007c58:	bf00      	nop
 8007c5a:	371c      	adds	r7, #28
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr
 8007c64:	40012c00 	.word	0x40012c00
 8007c68:	40013400 	.word	0x40013400
 8007c6c:	40014000 	.word	0x40014000
 8007c70:	40014400 	.word	0x40014400
 8007c74:	40014800 	.word	0x40014800

08007c78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a1b      	ldr	r3, [r3, #32]
 8007c86:	f023 0210 	bic.w	r2, r3, #16
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	021b      	lsls	r3, r3, #8
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f023 0320 	bic.w	r3, r3, #32
 8007cc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	011b      	lsls	r3, r3, #4
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a28      	ldr	r2, [pc, #160]	; (8007d78 <TIM_OC2_SetConfig+0x100>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d003      	beq.n	8007ce4 <TIM_OC2_SetConfig+0x6c>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a27      	ldr	r2, [pc, #156]	; (8007d7c <TIM_OC2_SetConfig+0x104>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d10d      	bne.n	8007d00 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	011b      	lsls	r3, r3, #4
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a1d      	ldr	r2, [pc, #116]	; (8007d78 <TIM_OC2_SetConfig+0x100>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d00f      	beq.n	8007d28 <TIM_OC2_SetConfig+0xb0>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a1c      	ldr	r2, [pc, #112]	; (8007d7c <TIM_OC2_SetConfig+0x104>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d00b      	beq.n	8007d28 <TIM_OC2_SetConfig+0xb0>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a1b      	ldr	r2, [pc, #108]	; (8007d80 <TIM_OC2_SetConfig+0x108>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d007      	beq.n	8007d28 <TIM_OC2_SetConfig+0xb0>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a1a      	ldr	r2, [pc, #104]	; (8007d84 <TIM_OC2_SetConfig+0x10c>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d003      	beq.n	8007d28 <TIM_OC2_SetConfig+0xb0>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a19      	ldr	r2, [pc, #100]	; (8007d88 <TIM_OC2_SetConfig+0x110>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d113      	bne.n	8007d50 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	695b      	ldr	r3, [r3, #20]
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	621a      	str	r2, [r3, #32]
}
 8007d6a:	bf00      	nop
 8007d6c:	371c      	adds	r7, #28
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	40012c00 	.word	0x40012c00
 8007d7c:	40013400 	.word	0x40013400
 8007d80:	40014000 	.word	0x40014000
 8007d84:	40014400 	.word	0x40014400
 8007d88:	40014800 	.word	0x40014800

08007d8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b087      	sub	sp, #28
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f023 0303 	bic.w	r3, r3, #3
 8007dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	021b      	lsls	r3, r3, #8
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a27      	ldr	r2, [pc, #156]	; (8007e88 <TIM_OC3_SetConfig+0xfc>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d003      	beq.n	8007df6 <TIM_OC3_SetConfig+0x6a>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a26      	ldr	r2, [pc, #152]	; (8007e8c <TIM_OC3_SetConfig+0x100>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d10d      	bne.n	8007e12 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	021b      	lsls	r3, r3, #8
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a1c      	ldr	r2, [pc, #112]	; (8007e88 <TIM_OC3_SetConfig+0xfc>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d00f      	beq.n	8007e3a <TIM_OC3_SetConfig+0xae>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a1b      	ldr	r2, [pc, #108]	; (8007e8c <TIM_OC3_SetConfig+0x100>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d00b      	beq.n	8007e3a <TIM_OC3_SetConfig+0xae>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a1a      	ldr	r2, [pc, #104]	; (8007e90 <TIM_OC3_SetConfig+0x104>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d007      	beq.n	8007e3a <TIM_OC3_SetConfig+0xae>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a19      	ldr	r2, [pc, #100]	; (8007e94 <TIM_OC3_SetConfig+0x108>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d003      	beq.n	8007e3a <TIM_OC3_SetConfig+0xae>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a18      	ldr	r2, [pc, #96]	; (8007e98 <TIM_OC3_SetConfig+0x10c>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d113      	bne.n	8007e62 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	011b      	lsls	r3, r3, #4
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	011b      	lsls	r3, r3, #4
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	621a      	str	r2, [r3, #32]
}
 8007e7c:	bf00      	nop
 8007e7e:	371c      	adds	r7, #28
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr
 8007e88:	40012c00 	.word	0x40012c00
 8007e8c:	40013400 	.word	0x40013400
 8007e90:	40014000 	.word	0x40014000
 8007e94:	40014400 	.word	0x40014400
 8007e98:	40014800 	.word	0x40014800

08007e9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b087      	sub	sp, #28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	021b      	lsls	r3, r3, #8
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007eea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	031b      	lsls	r3, r3, #12
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a18      	ldr	r2, [pc, #96]	; (8007f5c <TIM_OC4_SetConfig+0xc0>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d00f      	beq.n	8007f20 <TIM_OC4_SetConfig+0x84>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a17      	ldr	r2, [pc, #92]	; (8007f60 <TIM_OC4_SetConfig+0xc4>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d00b      	beq.n	8007f20 <TIM_OC4_SetConfig+0x84>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a16      	ldr	r2, [pc, #88]	; (8007f64 <TIM_OC4_SetConfig+0xc8>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d007      	beq.n	8007f20 <TIM_OC4_SetConfig+0x84>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a15      	ldr	r2, [pc, #84]	; (8007f68 <TIM_OC4_SetConfig+0xcc>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d003      	beq.n	8007f20 <TIM_OC4_SetConfig+0x84>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a14      	ldr	r2, [pc, #80]	; (8007f6c <TIM_OC4_SetConfig+0xd0>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d109      	bne.n	8007f34 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	019b      	lsls	r3, r3, #6
 8007f2e:	697a      	ldr	r2, [r7, #20]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	693a      	ldr	r2, [r7, #16]
 8007f4c:	621a      	str	r2, [r3, #32]
}
 8007f4e:	bf00      	nop
 8007f50:	371c      	adds	r7, #28
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	40012c00 	.word	0x40012c00
 8007f60:	40013400 	.word	0x40013400
 8007f64:	40014000 	.word	0x40014000
 8007f68:	40014400 	.word	0x40014400
 8007f6c:	40014800 	.word	0x40014800

08007f70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007fb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	041b      	lsls	r3, r3, #16
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a17      	ldr	r2, [pc, #92]	; (8008024 <TIM_OC5_SetConfig+0xb4>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d00f      	beq.n	8007fea <TIM_OC5_SetConfig+0x7a>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a16      	ldr	r2, [pc, #88]	; (8008028 <TIM_OC5_SetConfig+0xb8>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d00b      	beq.n	8007fea <TIM_OC5_SetConfig+0x7a>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a15      	ldr	r2, [pc, #84]	; (800802c <TIM_OC5_SetConfig+0xbc>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d007      	beq.n	8007fea <TIM_OC5_SetConfig+0x7a>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a14      	ldr	r2, [pc, #80]	; (8008030 <TIM_OC5_SetConfig+0xc0>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d003      	beq.n	8007fea <TIM_OC5_SetConfig+0x7a>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a13      	ldr	r2, [pc, #76]	; (8008034 <TIM_OC5_SetConfig+0xc4>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d109      	bne.n	8007ffe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	021b      	lsls	r3, r3, #8
 8007ff8:	697a      	ldr	r2, [r7, #20]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	621a      	str	r2, [r3, #32]
}
 8008018:	bf00      	nop
 800801a:	371c      	adds	r7, #28
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr
 8008024:	40012c00 	.word	0x40012c00
 8008028:	40013400 	.word	0x40013400
 800802c:	40014000 	.word	0x40014000
 8008030:	40014400 	.word	0x40014400
 8008034:	40014800 	.word	0x40014800

08008038 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008038:	b480      	push	{r7}
 800803a:	b087      	sub	sp, #28
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800805e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800806a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	021b      	lsls	r3, r3, #8
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	4313      	orrs	r3, r2
 8008076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800807e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	051b      	lsls	r3, r3, #20
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	4313      	orrs	r3, r2
 800808a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a18      	ldr	r2, [pc, #96]	; (80080f0 <TIM_OC6_SetConfig+0xb8>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d00f      	beq.n	80080b4 <TIM_OC6_SetConfig+0x7c>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a17      	ldr	r2, [pc, #92]	; (80080f4 <TIM_OC6_SetConfig+0xbc>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d00b      	beq.n	80080b4 <TIM_OC6_SetConfig+0x7c>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a16      	ldr	r2, [pc, #88]	; (80080f8 <TIM_OC6_SetConfig+0xc0>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d007      	beq.n	80080b4 <TIM_OC6_SetConfig+0x7c>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a15      	ldr	r2, [pc, #84]	; (80080fc <TIM_OC6_SetConfig+0xc4>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d003      	beq.n	80080b4 <TIM_OC6_SetConfig+0x7c>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a14      	ldr	r2, [pc, #80]	; (8008100 <TIM_OC6_SetConfig+0xc8>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d109      	bne.n	80080c8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	695b      	ldr	r3, [r3, #20]
 80080c0:	029b      	lsls	r3, r3, #10
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	621a      	str	r2, [r3, #32]
}
 80080e2:	bf00      	nop
 80080e4:	371c      	adds	r7, #28
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	40012c00 	.word	0x40012c00
 80080f4:	40013400 	.word	0x40013400
 80080f8:	40014000 	.word	0x40014000
 80080fc:	40014400 	.word	0x40014400
 8008100:	40014800 	.word	0x40014800

08008104 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008104:	b480      	push	{r7}
 8008106:	b087      	sub	sp, #28
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	f003 031f 	and.w	r3, r3, #31
 8008116:	2201      	movs	r2, #1
 8008118:	fa02 f303 	lsl.w	r3, r2, r3
 800811c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6a1a      	ldr	r2, [r3, #32]
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	43db      	mvns	r3, r3
 8008126:	401a      	ands	r2, r3
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6a1a      	ldr	r2, [r3, #32]
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	f003 031f 	and.w	r3, r3, #31
 8008136:	6879      	ldr	r1, [r7, #4]
 8008138:	fa01 f303 	lsl.w	r3, r1, r3
 800813c:	431a      	orrs	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	621a      	str	r2, [r3, #32]
}
 8008142:	bf00      	nop
 8008144:	371c      	adds	r7, #28
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
	...

08008150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008160:	2b01      	cmp	r3, #1
 8008162:	d101      	bne.n	8008168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008164:	2302      	movs	r3, #2
 8008166:	e068      	b.n	800823a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2202      	movs	r2, #2
 8008174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a2e      	ldr	r2, [pc, #184]	; (8008248 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d004      	beq.n	800819c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a2d      	ldr	r2, [pc, #180]	; (800824c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d108      	bne.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	4313      	orrs	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a1e      	ldr	r2, [pc, #120]	; (8008248 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d01d      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081da:	d018      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a1b      	ldr	r2, [pc, #108]	; (8008250 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d013      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a1a      	ldr	r2, [pc, #104]	; (8008254 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d00e      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a18      	ldr	r2, [pc, #96]	; (8008258 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d009      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a13      	ldr	r2, [pc, #76]	; (800824c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d004      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a14      	ldr	r2, [pc, #80]	; (800825c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d10c      	bne.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008214:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	4313      	orrs	r3, r2
 800821e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	40012c00 	.word	0x40012c00
 800824c:	40013400 	.word	0x40013400
 8008250:	40000400 	.word	0x40000400
 8008254:	40000800 	.word	0x40000800
 8008258:	40000c00 	.word	0x40000c00
 800825c:	40014000 	.word	0x40014000

08008260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e040      	b.n	80082f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008276:	2b00      	cmp	r3, #0
 8008278:	d106      	bne.n	8008288 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7fa fc32 	bl	8002aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2224      	movs	r2, #36	; 0x24
 800828c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 0201 	bic.w	r2, r2, #1
 800829c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f992 	bl	80085c8 <UART_SetConfig>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d101      	bne.n	80082ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e022      	b.n	80082f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d002      	beq.n	80082bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fc3e 	bl	8008b38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685a      	ldr	r2, [r3, #4]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	689a      	ldr	r2, [r3, #8]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f042 0201 	orr.w	r2, r2, #1
 80082ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fcc5 	bl	8008c7c <UART_CheckIdleState>
 80082f2:	4603      	mov	r3, r0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b08a      	sub	sp, #40	; 0x28
 8008300:	af02      	add	r7, sp, #8
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	603b      	str	r3, [r7, #0]
 8008308:	4613      	mov	r3, r2
 800830a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008310:	2b20      	cmp	r3, #32
 8008312:	f040 8082 	bne.w	800841a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d002      	beq.n	8008322 <HAL_UART_Transmit+0x26>
 800831c:	88fb      	ldrh	r3, [r7, #6]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e07a      	b.n	800841c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800832c:	2b01      	cmp	r3, #1
 800832e:	d101      	bne.n	8008334 <HAL_UART_Transmit+0x38>
 8008330:	2302      	movs	r3, #2
 8008332:	e073      	b.n	800841c <HAL_UART_Transmit+0x120>
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2221      	movs	r2, #33	; 0x21
 8008348:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800834a:	f7fa fdc1 	bl	8002ed0 <HAL_GetTick>
 800834e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	88fa      	ldrh	r2, [r7, #6]
 8008354:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	88fa      	ldrh	r2, [r7, #6]
 800835c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008368:	d108      	bne.n	800837c <HAL_UART_Transmit+0x80>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d104      	bne.n	800837c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008372:	2300      	movs	r3, #0
 8008374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	61bb      	str	r3, [r7, #24]
 800837a:	e003      	b.n	8008384 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008380:	2300      	movs	r3, #0
 8008382:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2200      	movs	r2, #0
 8008388:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800838c:	e02d      	b.n	80083ea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	2200      	movs	r2, #0
 8008396:	2180      	movs	r1, #128	; 0x80
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f000 fcb8 	bl	8008d0e <UART_WaitOnFlagUntilTimeout>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80083a4:	2303      	movs	r3, #3
 80083a6:	e039      	b.n	800841c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10b      	bne.n	80083c6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	881a      	ldrh	r2, [r3, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083ba:	b292      	uxth	r2, r2
 80083bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	3302      	adds	r3, #2
 80083c2:	61bb      	str	r3, [r7, #24]
 80083c4:	e008      	b.n	80083d8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	781a      	ldrb	r2, [r3, #0]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	b292      	uxth	r2, r2
 80083d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	3301      	adds	r3, #1
 80083d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083de:	b29b      	uxth	r3, r3
 80083e0:	3b01      	subs	r3, #1
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1cb      	bne.n	800838e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2200      	movs	r2, #0
 80083fe:	2140      	movs	r1, #64	; 0x40
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f000 fc84 	bl	8008d0e <UART_WaitOnFlagUntilTimeout>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d001      	beq.n	8008410 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800840c:	2303      	movs	r3, #3
 800840e:	e005      	b.n	800841c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2220      	movs	r2, #32
 8008414:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008416:	2300      	movs	r3, #0
 8008418:	e000      	b.n	800841c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800841a:	2302      	movs	r3, #2
  }
}
 800841c:	4618      	mov	r0, r3
 800841e:	3720      	adds	r7, #32
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b08a      	sub	sp, #40	; 0x28
 8008428:	af02      	add	r7, sp, #8
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	603b      	str	r3, [r7, #0]
 8008430:	4613      	mov	r3, r2
 8008432:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008438:	2b20      	cmp	r3, #32
 800843a:	f040 80bf 	bne.w	80085bc <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <HAL_UART_Receive+0x26>
 8008444:	88fb      	ldrh	r3, [r7, #6]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e0b7      	b.n	80085be <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008454:	2b01      	cmp	r3, #1
 8008456:	d101      	bne.n	800845c <HAL_UART_Receive+0x38>
 8008458:	2302      	movs	r3, #2
 800845a:	e0b0      	b.n	80085be <HAL_UART_Receive+0x19a>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2222      	movs	r2, #34	; 0x22
 8008470:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008478:	f7fa fd2a 	bl	8002ed0 <HAL_GetTick>
 800847c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	88fa      	ldrh	r2, [r7, #6]
 8008482:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	88fa      	ldrh	r2, [r7, #6]
 800848a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008496:	d10e      	bne.n	80084b6 <HAL_UART_Receive+0x92>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d105      	bne.n	80084ac <HAL_UART_Receive+0x88>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80084a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084aa:	e02d      	b.n	8008508 <HAL_UART_Receive+0xe4>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	22ff      	movs	r2, #255	; 0xff
 80084b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084b4:	e028      	b.n	8008508 <HAL_UART_Receive+0xe4>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10d      	bne.n	80084da <HAL_UART_Receive+0xb6>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d104      	bne.n	80084d0 <HAL_UART_Receive+0xac>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	22ff      	movs	r2, #255	; 0xff
 80084ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084ce:	e01b      	b.n	8008508 <HAL_UART_Receive+0xe4>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	227f      	movs	r2, #127	; 0x7f
 80084d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084d8:	e016      	b.n	8008508 <HAL_UART_Receive+0xe4>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084e2:	d10d      	bne.n	8008500 <HAL_UART_Receive+0xdc>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d104      	bne.n	80084f6 <HAL_UART_Receive+0xd2>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	227f      	movs	r2, #127	; 0x7f
 80084f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084f4:	e008      	b.n	8008508 <HAL_UART_Receive+0xe4>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	223f      	movs	r2, #63	; 0x3f
 80084fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084fe:	e003      	b.n	8008508 <HAL_UART_Receive+0xe4>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2200      	movs	r2, #0
 8008504:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800850e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008518:	d108      	bne.n	800852c <HAL_UART_Receive+0x108>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d104      	bne.n	800852c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8008522:	2300      	movs	r3, #0
 8008524:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	61bb      	str	r3, [r7, #24]
 800852a:	e003      	b.n	8008534 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008530:	2300      	movs	r3, #0
 8008532:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800853c:	e033      	b.n	80085a6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	2200      	movs	r2, #0
 8008546:	2120      	movs	r1, #32
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f000 fbe0 	bl	8008d0e <UART_WaitOnFlagUntilTimeout>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d001      	beq.n	8008558 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8008554:	2303      	movs	r3, #3
 8008556:	e032      	b.n	80085be <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d10c      	bne.n	8008578 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008564:	b29a      	uxth	r2, r3
 8008566:	8a7b      	ldrh	r3, [r7, #18]
 8008568:	4013      	ands	r3, r2
 800856a:	b29a      	uxth	r2, r3
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	3302      	adds	r3, #2
 8008574:	61bb      	str	r3, [r7, #24]
 8008576:	e00d      	b.n	8008594 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800857e:	b29b      	uxth	r3, r3
 8008580:	b2da      	uxtb	r2, r3
 8008582:	8a7b      	ldrh	r3, [r7, #18]
 8008584:	b2db      	uxtb	r3, r3
 8008586:	4013      	ands	r3, r2
 8008588:	b2da      	uxtb	r2, r3
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	3301      	adds	r3, #1
 8008592:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800859a:	b29b      	uxth	r3, r3
 800859c:	3b01      	subs	r3, #1
 800859e:	b29a      	uxth	r2, r3
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1c5      	bne.n	800853e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2220      	movs	r2, #32
 80085b6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	e000      	b.n	80085be <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80085bc:	2302      	movs	r3, #2
  }
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3720      	adds	r7, #32
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
	...

080085c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085cc:	b08a      	sub	sp, #40	; 0x28
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	689a      	ldr	r2, [r3, #8]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	431a      	orrs	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	695b      	ldr	r3, [r3, #20]
 80085e6:	431a      	orrs	r2, r3
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	69db      	ldr	r3, [r3, #28]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	4ba4      	ldr	r3, [pc, #656]	; (8008888 <UART_SetConfig+0x2c0>)
 80085f8:	4013      	ands	r3, r2
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	6812      	ldr	r2, [r2, #0]
 80085fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008600:	430b      	orrs	r3, r1
 8008602:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	68da      	ldr	r2, [r3, #12]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	430a      	orrs	r2, r1
 8008618:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a99      	ldr	r2, [pc, #612]	; (800888c <UART_SetConfig+0x2c4>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d004      	beq.n	8008634 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008630:	4313      	orrs	r3, r2
 8008632:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008644:	430a      	orrs	r2, r1
 8008646:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a90      	ldr	r2, [pc, #576]	; (8008890 <UART_SetConfig+0x2c8>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d126      	bne.n	80086a0 <UART_SetConfig+0xd8>
 8008652:	4b90      	ldr	r3, [pc, #576]	; (8008894 <UART_SetConfig+0x2cc>)
 8008654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008658:	f003 0303 	and.w	r3, r3, #3
 800865c:	2b03      	cmp	r3, #3
 800865e:	d81b      	bhi.n	8008698 <UART_SetConfig+0xd0>
 8008660:	a201      	add	r2, pc, #4	; (adr r2, 8008668 <UART_SetConfig+0xa0>)
 8008662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008666:	bf00      	nop
 8008668:	08008679 	.word	0x08008679
 800866c:	08008689 	.word	0x08008689
 8008670:	08008681 	.word	0x08008681
 8008674:	08008691 	.word	0x08008691
 8008678:	2301      	movs	r3, #1
 800867a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800867e:	e116      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008680:	2302      	movs	r3, #2
 8008682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008686:	e112      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008688:	2304      	movs	r3, #4
 800868a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800868e:	e10e      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008690:	2308      	movs	r3, #8
 8008692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008696:	e10a      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008698:	2310      	movs	r3, #16
 800869a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800869e:	e106      	b.n	80088ae <UART_SetConfig+0x2e6>
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a7c      	ldr	r2, [pc, #496]	; (8008898 <UART_SetConfig+0x2d0>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d138      	bne.n	800871c <UART_SetConfig+0x154>
 80086aa:	4b7a      	ldr	r3, [pc, #488]	; (8008894 <UART_SetConfig+0x2cc>)
 80086ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086b0:	f003 030c 	and.w	r3, r3, #12
 80086b4:	2b0c      	cmp	r3, #12
 80086b6:	d82d      	bhi.n	8008714 <UART_SetConfig+0x14c>
 80086b8:	a201      	add	r2, pc, #4	; (adr r2, 80086c0 <UART_SetConfig+0xf8>)
 80086ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086be:	bf00      	nop
 80086c0:	080086f5 	.word	0x080086f5
 80086c4:	08008715 	.word	0x08008715
 80086c8:	08008715 	.word	0x08008715
 80086cc:	08008715 	.word	0x08008715
 80086d0:	08008705 	.word	0x08008705
 80086d4:	08008715 	.word	0x08008715
 80086d8:	08008715 	.word	0x08008715
 80086dc:	08008715 	.word	0x08008715
 80086e0:	080086fd 	.word	0x080086fd
 80086e4:	08008715 	.word	0x08008715
 80086e8:	08008715 	.word	0x08008715
 80086ec:	08008715 	.word	0x08008715
 80086f0:	0800870d 	.word	0x0800870d
 80086f4:	2300      	movs	r3, #0
 80086f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086fa:	e0d8      	b.n	80088ae <UART_SetConfig+0x2e6>
 80086fc:	2302      	movs	r3, #2
 80086fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008702:	e0d4      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008704:	2304      	movs	r3, #4
 8008706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800870a:	e0d0      	b.n	80088ae <UART_SetConfig+0x2e6>
 800870c:	2308      	movs	r3, #8
 800870e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008712:	e0cc      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008714:	2310      	movs	r3, #16
 8008716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800871a:	e0c8      	b.n	80088ae <UART_SetConfig+0x2e6>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a5e      	ldr	r2, [pc, #376]	; (800889c <UART_SetConfig+0x2d4>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d125      	bne.n	8008772 <UART_SetConfig+0x1aa>
 8008726:	4b5b      	ldr	r3, [pc, #364]	; (8008894 <UART_SetConfig+0x2cc>)
 8008728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800872c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008730:	2b30      	cmp	r3, #48	; 0x30
 8008732:	d016      	beq.n	8008762 <UART_SetConfig+0x19a>
 8008734:	2b30      	cmp	r3, #48	; 0x30
 8008736:	d818      	bhi.n	800876a <UART_SetConfig+0x1a2>
 8008738:	2b20      	cmp	r3, #32
 800873a:	d00a      	beq.n	8008752 <UART_SetConfig+0x18a>
 800873c:	2b20      	cmp	r3, #32
 800873e:	d814      	bhi.n	800876a <UART_SetConfig+0x1a2>
 8008740:	2b00      	cmp	r3, #0
 8008742:	d002      	beq.n	800874a <UART_SetConfig+0x182>
 8008744:	2b10      	cmp	r3, #16
 8008746:	d008      	beq.n	800875a <UART_SetConfig+0x192>
 8008748:	e00f      	b.n	800876a <UART_SetConfig+0x1a2>
 800874a:	2300      	movs	r3, #0
 800874c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008750:	e0ad      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008752:	2302      	movs	r3, #2
 8008754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008758:	e0a9      	b.n	80088ae <UART_SetConfig+0x2e6>
 800875a:	2304      	movs	r3, #4
 800875c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008760:	e0a5      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008762:	2308      	movs	r3, #8
 8008764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008768:	e0a1      	b.n	80088ae <UART_SetConfig+0x2e6>
 800876a:	2310      	movs	r3, #16
 800876c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008770:	e09d      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a4a      	ldr	r2, [pc, #296]	; (80088a0 <UART_SetConfig+0x2d8>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d125      	bne.n	80087c8 <UART_SetConfig+0x200>
 800877c:	4b45      	ldr	r3, [pc, #276]	; (8008894 <UART_SetConfig+0x2cc>)
 800877e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008782:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008786:	2bc0      	cmp	r3, #192	; 0xc0
 8008788:	d016      	beq.n	80087b8 <UART_SetConfig+0x1f0>
 800878a:	2bc0      	cmp	r3, #192	; 0xc0
 800878c:	d818      	bhi.n	80087c0 <UART_SetConfig+0x1f8>
 800878e:	2b80      	cmp	r3, #128	; 0x80
 8008790:	d00a      	beq.n	80087a8 <UART_SetConfig+0x1e0>
 8008792:	2b80      	cmp	r3, #128	; 0x80
 8008794:	d814      	bhi.n	80087c0 <UART_SetConfig+0x1f8>
 8008796:	2b00      	cmp	r3, #0
 8008798:	d002      	beq.n	80087a0 <UART_SetConfig+0x1d8>
 800879a:	2b40      	cmp	r3, #64	; 0x40
 800879c:	d008      	beq.n	80087b0 <UART_SetConfig+0x1e8>
 800879e:	e00f      	b.n	80087c0 <UART_SetConfig+0x1f8>
 80087a0:	2300      	movs	r3, #0
 80087a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087a6:	e082      	b.n	80088ae <UART_SetConfig+0x2e6>
 80087a8:	2302      	movs	r3, #2
 80087aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087ae:	e07e      	b.n	80088ae <UART_SetConfig+0x2e6>
 80087b0:	2304      	movs	r3, #4
 80087b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087b6:	e07a      	b.n	80088ae <UART_SetConfig+0x2e6>
 80087b8:	2308      	movs	r3, #8
 80087ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087be:	e076      	b.n	80088ae <UART_SetConfig+0x2e6>
 80087c0:	2310      	movs	r3, #16
 80087c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087c6:	e072      	b.n	80088ae <UART_SetConfig+0x2e6>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a35      	ldr	r2, [pc, #212]	; (80088a4 <UART_SetConfig+0x2dc>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d12a      	bne.n	8008828 <UART_SetConfig+0x260>
 80087d2:	4b30      	ldr	r3, [pc, #192]	; (8008894 <UART_SetConfig+0x2cc>)
 80087d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087e0:	d01a      	beq.n	8008818 <UART_SetConfig+0x250>
 80087e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087e6:	d81b      	bhi.n	8008820 <UART_SetConfig+0x258>
 80087e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087ec:	d00c      	beq.n	8008808 <UART_SetConfig+0x240>
 80087ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087f2:	d815      	bhi.n	8008820 <UART_SetConfig+0x258>
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d003      	beq.n	8008800 <UART_SetConfig+0x238>
 80087f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087fc:	d008      	beq.n	8008810 <UART_SetConfig+0x248>
 80087fe:	e00f      	b.n	8008820 <UART_SetConfig+0x258>
 8008800:	2300      	movs	r3, #0
 8008802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008806:	e052      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008808:	2302      	movs	r3, #2
 800880a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800880e:	e04e      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008810:	2304      	movs	r3, #4
 8008812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008816:	e04a      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008818:	2308      	movs	r3, #8
 800881a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800881e:	e046      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008820:	2310      	movs	r3, #16
 8008822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008826:	e042      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a17      	ldr	r2, [pc, #92]	; (800888c <UART_SetConfig+0x2c4>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d13a      	bne.n	80088a8 <UART_SetConfig+0x2e0>
 8008832:	4b18      	ldr	r3, [pc, #96]	; (8008894 <UART_SetConfig+0x2cc>)
 8008834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008838:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800883c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008840:	d01a      	beq.n	8008878 <UART_SetConfig+0x2b0>
 8008842:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008846:	d81b      	bhi.n	8008880 <UART_SetConfig+0x2b8>
 8008848:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800884c:	d00c      	beq.n	8008868 <UART_SetConfig+0x2a0>
 800884e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008852:	d815      	bhi.n	8008880 <UART_SetConfig+0x2b8>
 8008854:	2b00      	cmp	r3, #0
 8008856:	d003      	beq.n	8008860 <UART_SetConfig+0x298>
 8008858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800885c:	d008      	beq.n	8008870 <UART_SetConfig+0x2a8>
 800885e:	e00f      	b.n	8008880 <UART_SetConfig+0x2b8>
 8008860:	2300      	movs	r3, #0
 8008862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008866:	e022      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008868:	2302      	movs	r3, #2
 800886a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800886e:	e01e      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008870:	2304      	movs	r3, #4
 8008872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008876:	e01a      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008878:	2308      	movs	r3, #8
 800887a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800887e:	e016      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008880:	2310      	movs	r3, #16
 8008882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008886:	e012      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008888:	efff69f3 	.word	0xefff69f3
 800888c:	40008000 	.word	0x40008000
 8008890:	40013800 	.word	0x40013800
 8008894:	40021000 	.word	0x40021000
 8008898:	40004400 	.word	0x40004400
 800889c:	40004800 	.word	0x40004800
 80088a0:	40004c00 	.word	0x40004c00
 80088a4:	40005000 	.word	0x40005000
 80088a8:	2310      	movs	r3, #16
 80088aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a9f      	ldr	r2, [pc, #636]	; (8008b30 <UART_SetConfig+0x568>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d17a      	bne.n	80089ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80088b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088bc:	2b08      	cmp	r3, #8
 80088be:	d824      	bhi.n	800890a <UART_SetConfig+0x342>
 80088c0:	a201      	add	r2, pc, #4	; (adr r2, 80088c8 <UART_SetConfig+0x300>)
 80088c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c6:	bf00      	nop
 80088c8:	080088ed 	.word	0x080088ed
 80088cc:	0800890b 	.word	0x0800890b
 80088d0:	080088f5 	.word	0x080088f5
 80088d4:	0800890b 	.word	0x0800890b
 80088d8:	080088fb 	.word	0x080088fb
 80088dc:	0800890b 	.word	0x0800890b
 80088e0:	0800890b 	.word	0x0800890b
 80088e4:	0800890b 	.word	0x0800890b
 80088e8:	08008903 	.word	0x08008903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088ec:	f7fd ffbc 	bl	8006868 <HAL_RCC_GetPCLK1Freq>
 80088f0:	61f8      	str	r0, [r7, #28]
        break;
 80088f2:	e010      	b.n	8008916 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088f4:	4b8f      	ldr	r3, [pc, #572]	; (8008b34 <UART_SetConfig+0x56c>)
 80088f6:	61fb      	str	r3, [r7, #28]
        break;
 80088f8:	e00d      	b.n	8008916 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088fa:	f7fd ff1d 	bl	8006738 <HAL_RCC_GetSysClockFreq>
 80088fe:	61f8      	str	r0, [r7, #28]
        break;
 8008900:	e009      	b.n	8008916 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008906:	61fb      	str	r3, [r7, #28]
        break;
 8008908:	e005      	b.n	8008916 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800890a:	2300      	movs	r3, #0
 800890c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008914:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	2b00      	cmp	r3, #0
 800891a:	f000 80fb 	beq.w	8008b14 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	685a      	ldr	r2, [r3, #4]
 8008922:	4613      	mov	r3, r2
 8008924:	005b      	lsls	r3, r3, #1
 8008926:	4413      	add	r3, r2
 8008928:	69fa      	ldr	r2, [r7, #28]
 800892a:	429a      	cmp	r2, r3
 800892c:	d305      	bcc.n	800893a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008934:	69fa      	ldr	r2, [r7, #28]
 8008936:	429a      	cmp	r2, r3
 8008938:	d903      	bls.n	8008942 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008940:	e0e8      	b.n	8008b14 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	2200      	movs	r2, #0
 8008946:	461c      	mov	r4, r3
 8008948:	4615      	mov	r5, r2
 800894a:	f04f 0200 	mov.w	r2, #0
 800894e:	f04f 0300 	mov.w	r3, #0
 8008952:	022b      	lsls	r3, r5, #8
 8008954:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008958:	0222      	lsls	r2, r4, #8
 800895a:	68f9      	ldr	r1, [r7, #12]
 800895c:	6849      	ldr	r1, [r1, #4]
 800895e:	0849      	lsrs	r1, r1, #1
 8008960:	2000      	movs	r0, #0
 8008962:	4688      	mov	r8, r1
 8008964:	4681      	mov	r9, r0
 8008966:	eb12 0a08 	adds.w	sl, r2, r8
 800896a:	eb43 0b09 	adc.w	fp, r3, r9
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	603b      	str	r3, [r7, #0]
 8008976:	607a      	str	r2, [r7, #4]
 8008978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800897c:	4650      	mov	r0, sl
 800897e:	4659      	mov	r1, fp
 8008980:	f7f8 f884 	bl	8000a8c <__aeabi_uldivmod>
 8008984:	4602      	mov	r2, r0
 8008986:	460b      	mov	r3, r1
 8008988:	4613      	mov	r3, r2
 800898a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008992:	d308      	bcc.n	80089a6 <UART_SetConfig+0x3de>
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800899a:	d204      	bcs.n	80089a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	60da      	str	r2, [r3, #12]
 80089a4:	e0b6      	b.n	8008b14 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80089ac:	e0b2      	b.n	8008b14 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089b6:	d15e      	bne.n	8008a76 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80089b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089bc:	2b08      	cmp	r3, #8
 80089be:	d828      	bhi.n	8008a12 <UART_SetConfig+0x44a>
 80089c0:	a201      	add	r2, pc, #4	; (adr r2, 80089c8 <UART_SetConfig+0x400>)
 80089c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c6:	bf00      	nop
 80089c8:	080089ed 	.word	0x080089ed
 80089cc:	080089f5 	.word	0x080089f5
 80089d0:	080089fd 	.word	0x080089fd
 80089d4:	08008a13 	.word	0x08008a13
 80089d8:	08008a03 	.word	0x08008a03
 80089dc:	08008a13 	.word	0x08008a13
 80089e0:	08008a13 	.word	0x08008a13
 80089e4:	08008a13 	.word	0x08008a13
 80089e8:	08008a0b 	.word	0x08008a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089ec:	f7fd ff3c 	bl	8006868 <HAL_RCC_GetPCLK1Freq>
 80089f0:	61f8      	str	r0, [r7, #28]
        break;
 80089f2:	e014      	b.n	8008a1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089f4:	f7fd ff4e 	bl	8006894 <HAL_RCC_GetPCLK2Freq>
 80089f8:	61f8      	str	r0, [r7, #28]
        break;
 80089fa:	e010      	b.n	8008a1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089fc:	4b4d      	ldr	r3, [pc, #308]	; (8008b34 <UART_SetConfig+0x56c>)
 80089fe:	61fb      	str	r3, [r7, #28]
        break;
 8008a00:	e00d      	b.n	8008a1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a02:	f7fd fe99 	bl	8006738 <HAL_RCC_GetSysClockFreq>
 8008a06:	61f8      	str	r0, [r7, #28]
        break;
 8008a08:	e009      	b.n	8008a1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a0e:	61fb      	str	r3, [r7, #28]
        break;
 8008a10:	e005      	b.n	8008a1e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008a1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d077      	beq.n	8008b14 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	005a      	lsls	r2, r3, #1
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	085b      	lsrs	r3, r3, #1
 8008a2e:	441a      	add	r2, r3
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a38:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	2b0f      	cmp	r3, #15
 8008a3e:	d916      	bls.n	8008a6e <UART_SetConfig+0x4a6>
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a46:	d212      	bcs.n	8008a6e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	f023 030f 	bic.w	r3, r3, #15
 8008a50:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	085b      	lsrs	r3, r3, #1
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	f003 0307 	and.w	r3, r3, #7
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	8afb      	ldrh	r3, [r7, #22]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	8afa      	ldrh	r2, [r7, #22]
 8008a6a:	60da      	str	r2, [r3, #12]
 8008a6c:	e052      	b.n	8008b14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008a74:	e04e      	b.n	8008b14 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a7a:	2b08      	cmp	r3, #8
 8008a7c:	d827      	bhi.n	8008ace <UART_SetConfig+0x506>
 8008a7e:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <UART_SetConfig+0x4bc>)
 8008a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a84:	08008aa9 	.word	0x08008aa9
 8008a88:	08008ab1 	.word	0x08008ab1
 8008a8c:	08008ab9 	.word	0x08008ab9
 8008a90:	08008acf 	.word	0x08008acf
 8008a94:	08008abf 	.word	0x08008abf
 8008a98:	08008acf 	.word	0x08008acf
 8008a9c:	08008acf 	.word	0x08008acf
 8008aa0:	08008acf 	.word	0x08008acf
 8008aa4:	08008ac7 	.word	0x08008ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008aa8:	f7fd fede 	bl	8006868 <HAL_RCC_GetPCLK1Freq>
 8008aac:	61f8      	str	r0, [r7, #28]
        break;
 8008aae:	e014      	b.n	8008ada <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ab0:	f7fd fef0 	bl	8006894 <HAL_RCC_GetPCLK2Freq>
 8008ab4:	61f8      	str	r0, [r7, #28]
        break;
 8008ab6:	e010      	b.n	8008ada <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ab8:	4b1e      	ldr	r3, [pc, #120]	; (8008b34 <UART_SetConfig+0x56c>)
 8008aba:	61fb      	str	r3, [r7, #28]
        break;
 8008abc:	e00d      	b.n	8008ada <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008abe:	f7fd fe3b 	bl	8006738 <HAL_RCC_GetSysClockFreq>
 8008ac2:	61f8      	str	r0, [r7, #28]
        break;
 8008ac4:	e009      	b.n	8008ada <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008aca:	61fb      	str	r3, [r7, #28]
        break;
 8008acc:	e005      	b.n	8008ada <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008ad8:	bf00      	nop
    }

    if (pclk != 0U)
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d019      	beq.n	8008b14 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	085a      	lsrs	r2, r3, #1
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	441a      	add	r2, r3
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008af2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	2b0f      	cmp	r3, #15
 8008af8:	d909      	bls.n	8008b0e <UART_SetConfig+0x546>
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b00:	d205      	bcs.n	8008b0e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	b29a      	uxth	r2, r3
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	60da      	str	r2, [r3, #12]
 8008b0c:	e002      	b.n	8008b14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008b20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3728      	adds	r7, #40	; 0x28
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b2e:	bf00      	nop
 8008b30:	40008000 	.word	0x40008000
 8008b34:	00f42400 	.word	0x00f42400

08008b38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00a      	beq.n	8008b62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b66:	f003 0302 	and.w	r3, r3, #2
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00a      	beq.n	8008b84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	430a      	orrs	r2, r1
 8008b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	f003 0304 	and.w	r3, r3, #4
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00a      	beq.n	8008ba6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	430a      	orrs	r2, r1
 8008ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008baa:	f003 0308 	and.w	r3, r3, #8
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00a      	beq.n	8008bc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	430a      	orrs	r2, r1
 8008bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bcc:	f003 0310 	and.w	r3, r3, #16
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00a      	beq.n	8008bea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	430a      	orrs	r2, r1
 8008be8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bee:	f003 0320 	and.w	r3, r3, #32
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00a      	beq.n	8008c0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d01a      	beq.n	8008c4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	430a      	orrs	r2, r1
 8008c2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c36:	d10a      	bne.n	8008c4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00a      	beq.n	8008c70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	430a      	orrs	r2, r1
 8008c6e:	605a      	str	r2, [r3, #4]
  }
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b086      	sub	sp, #24
 8008c80:	af02      	add	r7, sp, #8
 8008c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c8c:	f7fa f920 	bl	8002ed0 <HAL_GetTick>
 8008c90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0308 	and.w	r3, r3, #8
 8008c9c:	2b08      	cmp	r3, #8
 8008c9e:	d10e      	bne.n	8008cbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ca0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f82d 	bl	8008d0e <UART_WaitOnFlagUntilTimeout>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d001      	beq.n	8008cbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e023      	b.n	8008d06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 0304 	and.w	r3, r3, #4
 8008cc8:	2b04      	cmp	r3, #4
 8008cca:	d10e      	bne.n	8008cea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ccc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f817 	bl	8008d0e <UART_WaitOnFlagUntilTimeout>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d001      	beq.n	8008cea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e00d      	b.n	8008d06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2220      	movs	r2, #32
 8008cee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2220      	movs	r2, #32
 8008cf4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b09c      	sub	sp, #112	; 0x70
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	60f8      	str	r0, [r7, #12]
 8008d16:	60b9      	str	r1, [r7, #8]
 8008d18:	603b      	str	r3, [r7, #0]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d1e:	e0a5      	b.n	8008e6c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d26:	f000 80a1 	beq.w	8008e6c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d2a:	f7fa f8d1 	bl	8002ed0 <HAL_GetTick>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d302      	bcc.n	8008d40 <UART_WaitOnFlagUntilTimeout+0x32>
 8008d3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d13e      	bne.n	8008dbe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d48:	e853 3f00 	ldrex	r3, [r3]
 8008d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d54:	667b      	str	r3, [r7, #100]	; 0x64
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d60:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d66:	e841 2300 	strex	r3, r2, [r1]
 8008d6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1e6      	bne.n	8008d40 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	3308      	adds	r3, #8
 8008d78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d7c:	e853 3f00 	ldrex	r3, [r3]
 8008d80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d84:	f023 0301 	bic.w	r3, r3, #1
 8008d88:	663b      	str	r3, [r7, #96]	; 0x60
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	3308      	adds	r3, #8
 8008d90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d92:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d9a:	e841 2300 	strex	r3, r2, [r1]
 8008d9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1e5      	bne.n	8008d72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2220      	movs	r2, #32
 8008daa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2220      	movs	r2, #32
 8008db0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	e067      	b.n	8008e8e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 0304 	and.w	r3, r3, #4
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d04f      	beq.n	8008e6c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	69db      	ldr	r3, [r3, #28]
 8008dd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dda:	d147      	bne.n	8008e6c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008de4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	e853 3f00 	ldrex	r3, [r3]
 8008df2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008dfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	461a      	mov	r2, r3
 8008e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e04:	637b      	str	r3, [r7, #52]	; 0x34
 8008e06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e0c:	e841 2300 	strex	r3, r2, [r1]
 8008e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e6      	bne.n	8008de6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	3308      	adds	r3, #8
 8008e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	e853 3f00 	ldrex	r3, [r3]
 8008e26:	613b      	str	r3, [r7, #16]
   return(result);
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	f023 0301 	bic.w	r3, r3, #1
 8008e2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	3308      	adds	r3, #8
 8008e36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e38:	623a      	str	r2, [r7, #32]
 8008e3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3c:	69f9      	ldr	r1, [r7, #28]
 8008e3e:	6a3a      	ldr	r2, [r7, #32]
 8008e40:	e841 2300 	strex	r3, r2, [r1]
 8008e44:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1e5      	bne.n	8008e18 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2220      	movs	r2, #32
 8008e50:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2220      	movs	r2, #32
 8008e56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008e68:	2303      	movs	r3, #3
 8008e6a:	e010      	b.n	8008e8e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	69da      	ldr	r2, [r3, #28]
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	4013      	ands	r3, r2
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	bf0c      	ite	eq
 8008e7c:	2301      	moveq	r3, #1
 8008e7e:	2300      	movne	r3, #0
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	461a      	mov	r2, r3
 8008e84:	79fb      	ldrb	r3, [r7, #7]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	f43f af4a 	beq.w	8008d20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3770      	adds	r7, #112	; 0x70
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
	...

08008e98 <__NVIC_SetPriority>:
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	6039      	str	r1, [r7, #0]
 8008ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	db0a      	blt.n	8008ec2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	490c      	ldr	r1, [pc, #48]	; (8008ee4 <__NVIC_SetPriority+0x4c>)
 8008eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eb6:	0112      	lsls	r2, r2, #4
 8008eb8:	b2d2      	uxtb	r2, r2
 8008eba:	440b      	add	r3, r1
 8008ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008ec0:	e00a      	b.n	8008ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	4908      	ldr	r1, [pc, #32]	; (8008ee8 <__NVIC_SetPriority+0x50>)
 8008ec8:	79fb      	ldrb	r3, [r7, #7]
 8008eca:	f003 030f 	and.w	r3, r3, #15
 8008ece:	3b04      	subs	r3, #4
 8008ed0:	0112      	lsls	r2, r2, #4
 8008ed2:	b2d2      	uxtb	r2, r2
 8008ed4:	440b      	add	r3, r1
 8008ed6:	761a      	strb	r2, [r3, #24]
}
 8008ed8:	bf00      	nop
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr
 8008ee4:	e000e100 	.word	0xe000e100
 8008ee8:	e000ed00 	.word	0xe000ed00

08008eec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008eec:	b580      	push	{r7, lr}
 8008eee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	f06f 0004 	mvn.w	r0, #4
 8008ef6:	f7ff ffcf 	bl	8008e98 <__NVIC_SetPriority>
#endif
}
 8008efa:	bf00      	nop
 8008efc:	bd80      	pop	{r7, pc}
	...

08008f00 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f06:	f3ef 8305 	mrs	r3, IPSR
 8008f0a:	603b      	str	r3, [r7, #0]
  return(result);
 8008f0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d003      	beq.n	8008f1a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008f12:	f06f 0305 	mvn.w	r3, #5
 8008f16:	607b      	str	r3, [r7, #4]
 8008f18:	e00c      	b.n	8008f34 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008f1a:	4b0a      	ldr	r3, [pc, #40]	; (8008f44 <osKernelInitialize+0x44>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d105      	bne.n	8008f2e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008f22:	4b08      	ldr	r3, [pc, #32]	; (8008f44 <osKernelInitialize+0x44>)
 8008f24:	2201      	movs	r2, #1
 8008f26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	607b      	str	r3, [r7, #4]
 8008f2c:	e002      	b.n	8008f34 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f34:	687b      	ldr	r3, [r7, #4]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	370c      	adds	r7, #12
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	20000620 	.word	0x20000620

08008f48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f4e:	f3ef 8305 	mrs	r3, IPSR
 8008f52:	603b      	str	r3, [r7, #0]
  return(result);
 8008f54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d003      	beq.n	8008f62 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008f5a:	f06f 0305 	mvn.w	r3, #5
 8008f5e:	607b      	str	r3, [r7, #4]
 8008f60:	e010      	b.n	8008f84 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008f62:	4b0b      	ldr	r3, [pc, #44]	; (8008f90 <osKernelStart+0x48>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d109      	bne.n	8008f7e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008f6a:	f7ff ffbf 	bl	8008eec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008f6e:	4b08      	ldr	r3, [pc, #32]	; (8008f90 <osKernelStart+0x48>)
 8008f70:	2202      	movs	r2, #2
 8008f72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008f74:	f001 fba8 	bl	800a6c8 <vTaskStartScheduler>
      stat = osOK;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	607b      	str	r3, [r7, #4]
 8008f7c:	e002      	b.n	8008f84 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f84:	687b      	ldr	r3, [r7, #4]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	20000620 	.word	0x20000620

08008f94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b08e      	sub	sp, #56	; 0x38
 8008f98:	af04      	add	r7, sp, #16
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fa4:	f3ef 8305 	mrs	r3, IPSR
 8008fa8:	617b      	str	r3, [r7, #20]
  return(result);
 8008faa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d17e      	bne.n	80090ae <osThreadNew+0x11a>
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d07b      	beq.n	80090ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008fb6:	2380      	movs	r3, #128	; 0x80
 8008fb8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008fba:	2318      	movs	r3, #24
 8008fbc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8008fc6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d045      	beq.n	800905a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d002      	beq.n	8008fdc <osThreadNew+0x48>
        name = attr->name;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d002      	beq.n	8008fea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d008      	beq.n	8009002 <osThreadNew+0x6e>
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	2b38      	cmp	r3, #56	; 0x38
 8008ff4:	d805      	bhi.n	8009002 <osThreadNew+0x6e>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	f003 0301 	and.w	r3, r3, #1
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d001      	beq.n	8009006 <osThreadNew+0x72>
        return (NULL);
 8009002:	2300      	movs	r3, #0
 8009004:	e054      	b.n	80090b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d003      	beq.n	8009016 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	695b      	ldr	r3, [r3, #20]
 8009012:	089b      	lsrs	r3, r3, #2
 8009014:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00e      	beq.n	800903c <osThreadNew+0xa8>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	2b5b      	cmp	r3, #91	; 0x5b
 8009024:	d90a      	bls.n	800903c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800902a:	2b00      	cmp	r3, #0
 800902c:	d006      	beq.n	800903c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	695b      	ldr	r3, [r3, #20]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d002      	beq.n	800903c <osThreadNew+0xa8>
        mem = 1;
 8009036:	2301      	movs	r3, #1
 8009038:	61bb      	str	r3, [r7, #24]
 800903a:	e010      	b.n	800905e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d10c      	bne.n	800905e <osThreadNew+0xca>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d108      	bne.n	800905e <osThreadNew+0xca>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d104      	bne.n	800905e <osThreadNew+0xca>
          mem = 0;
 8009054:	2300      	movs	r3, #0
 8009056:	61bb      	str	r3, [r7, #24]
 8009058:	e001      	b.n	800905e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	2b01      	cmp	r3, #1
 8009062:	d110      	bne.n	8009086 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800906c:	9202      	str	r2, [sp, #8]
 800906e:	9301      	str	r3, [sp, #4]
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	9300      	str	r3, [sp, #0]
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	6a3a      	ldr	r2, [r7, #32]
 8009078:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f001 f94e 	bl	800a31c <xTaskCreateStatic>
 8009080:	4603      	mov	r3, r0
 8009082:	613b      	str	r3, [r7, #16]
 8009084:	e013      	b.n	80090ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d110      	bne.n	80090ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800908c:	6a3b      	ldr	r3, [r7, #32]
 800908e:	b29a      	uxth	r2, r3
 8009090:	f107 0310 	add.w	r3, r7, #16
 8009094:	9301      	str	r3, [sp, #4]
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	f001 f999 	bl	800a3d6 <xTaskCreate>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d001      	beq.n	80090ae <osThreadNew+0x11a>
            hTask = NULL;
 80090aa:	2300      	movs	r3, #0
 80090ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80090ae:	693b      	ldr	r3, [r7, #16]
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3728      	adds	r7, #40	; 0x28
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090be:	f3ef 8305 	mrs	r3, IPSR
 80090c2:	603b      	str	r3, [r7, #0]
  return(result);
 80090c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d003      	beq.n	80090d2 <osThreadYield+0x1a>
    stat = osErrorISR;
 80090ca:	f06f 0305 	mvn.w	r3, #5
 80090ce:	607b      	str	r3, [r7, #4]
 80090d0:	e009      	b.n	80090e6 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80090d2:	2300      	movs	r3, #0
 80090d4:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80090d6:	4b07      	ldr	r3, [pc, #28]	; (80090f4 <osThreadYield+0x3c>)
 80090d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090dc:	601a      	str	r2, [r3, #0]
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80090e6:	687b      	ldr	r3, [r7, #4]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr
 80090f4:	e000ed04 	.word	0xe000ed04

080090f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009100:	f3ef 8305 	mrs	r3, IPSR
 8009104:	60bb      	str	r3, [r7, #8]
  return(result);
 8009106:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009108:	2b00      	cmp	r3, #0
 800910a:	d003      	beq.n	8009114 <osDelay+0x1c>
    stat = osErrorISR;
 800910c:	f06f 0305 	mvn.w	r3, #5
 8009110:	60fb      	str	r3, [r7, #12]
 8009112:	e007      	b.n	8009124 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009114:	2300      	movs	r3, #0
 8009116:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d002      	beq.n	8009124 <osDelay+0x2c>
      vTaskDelay(ticks);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f001 fa9e 	bl	800a660 <vTaskDelay>
    }
  }

  return (stat);
 8009124:	68fb      	ldr	r3, [r7, #12]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800912e:	b580      	push	{r7, lr}
 8009130:	b088      	sub	sp, #32
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009136:	2300      	movs	r3, #0
 8009138:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800913a:	f3ef 8305 	mrs	r3, IPSR
 800913e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009140:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009142:	2b00      	cmp	r3, #0
 8009144:	d174      	bne.n	8009230 <osMutexNew+0x102>
    if (attr != NULL) {
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d003      	beq.n	8009154 <osMutexNew+0x26>
      type = attr->attr_bits;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	61bb      	str	r3, [r7, #24]
 8009152:	e001      	b.n	8009158 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009154:	2300      	movs	r3, #0
 8009156:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	f003 0301 	and.w	r3, r3, #1
 800915e:	2b00      	cmp	r3, #0
 8009160:	d002      	beq.n	8009168 <osMutexNew+0x3a>
      rmtx = 1U;
 8009162:	2301      	movs	r3, #1
 8009164:	617b      	str	r3, [r7, #20]
 8009166:	e001      	b.n	800916c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009168:	2300      	movs	r3, #0
 800916a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	f003 0308 	and.w	r3, r3, #8
 8009172:	2b00      	cmp	r3, #0
 8009174:	d15c      	bne.n	8009230 <osMutexNew+0x102>
      mem = -1;
 8009176:	f04f 33ff 	mov.w	r3, #4294967295
 800917a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d015      	beq.n	80091ae <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d006      	beq.n	8009198 <osMutexNew+0x6a>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	2b4f      	cmp	r3, #79	; 0x4f
 8009190:	d902      	bls.n	8009198 <osMutexNew+0x6a>
          mem = 1;
 8009192:	2301      	movs	r3, #1
 8009194:	613b      	str	r3, [r7, #16]
 8009196:	e00c      	b.n	80091b2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d108      	bne.n	80091b2 <osMutexNew+0x84>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d104      	bne.n	80091b2 <osMutexNew+0x84>
            mem = 0;
 80091a8:	2300      	movs	r3, #0
 80091aa:	613b      	str	r3, [r7, #16]
 80091ac:	e001      	b.n	80091b2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80091ae:	2300      	movs	r3, #0
 80091b0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d112      	bne.n	80091de <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d007      	beq.n	80091ce <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	4619      	mov	r1, r3
 80091c4:	2004      	movs	r0, #4
 80091c6:	f000 fb18 	bl	80097fa <xQueueCreateMutexStatic>
 80091ca:	61f8      	str	r0, [r7, #28]
 80091cc:	e016      	b.n	80091fc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	4619      	mov	r1, r3
 80091d4:	2001      	movs	r0, #1
 80091d6:	f000 fb10 	bl	80097fa <xQueueCreateMutexStatic>
 80091da:	61f8      	str	r0, [r7, #28]
 80091dc:	e00e      	b.n	80091fc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d10b      	bne.n	80091fc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d004      	beq.n	80091f4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80091ea:	2004      	movs	r0, #4
 80091ec:	f000 faed 	bl	80097ca <xQueueCreateMutex>
 80091f0:	61f8      	str	r0, [r7, #28]
 80091f2:	e003      	b.n	80091fc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80091f4:	2001      	movs	r0, #1
 80091f6:	f000 fae8 	bl	80097ca <xQueueCreateMutex>
 80091fa:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00c      	beq.n	800921c <osMutexNew+0xee>
        if (attr != NULL) {
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d003      	beq.n	8009210 <osMutexNew+0xe2>
          name = attr->name;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	60fb      	str	r3, [r7, #12]
 800920e:	e001      	b.n	8009214 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009210:	2300      	movs	r3, #0
 8009212:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009214:	68f9      	ldr	r1, [r7, #12]
 8009216:	69f8      	ldr	r0, [r7, #28]
 8009218:	f001 f822 	bl	800a260 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d006      	beq.n	8009230 <osMutexNew+0x102>
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d003      	beq.n	8009230 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	f043 0301 	orr.w	r3, r3, #1
 800922e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009230:	69fb      	ldr	r3, [r7, #28]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3720      	adds	r7, #32
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800923a:	b580      	push	{r7, lr}
 800923c:	b086      	sub	sp, #24
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f023 0301 	bic.w	r3, r3, #1
 800924a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f003 0301 	and.w	r3, r3, #1
 8009252:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009254:	2300      	movs	r3, #0
 8009256:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009258:	f3ef 8305 	mrs	r3, IPSR
 800925c:	60bb      	str	r3, [r7, #8]
  return(result);
 800925e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009260:	2b00      	cmp	r3, #0
 8009262:	d003      	beq.n	800926c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8009264:	f06f 0305 	mvn.w	r3, #5
 8009268:	617b      	str	r3, [r7, #20]
 800926a:	e02c      	b.n	80092c6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d103      	bne.n	800927a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8009272:	f06f 0303 	mvn.w	r3, #3
 8009276:	617b      	str	r3, [r7, #20]
 8009278:	e025      	b.n	80092c6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d011      	beq.n	80092a4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009280:	6839      	ldr	r1, [r7, #0]
 8009282:	6938      	ldr	r0, [r7, #16]
 8009284:	f000 fb08 	bl	8009898 <xQueueTakeMutexRecursive>
 8009288:	4603      	mov	r3, r0
 800928a:	2b01      	cmp	r3, #1
 800928c:	d01b      	beq.n	80092c6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d003      	beq.n	800929c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8009294:	f06f 0301 	mvn.w	r3, #1
 8009298:	617b      	str	r3, [r7, #20]
 800929a:	e014      	b.n	80092c6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800929c:	f06f 0302 	mvn.w	r3, #2
 80092a0:	617b      	str	r3, [r7, #20]
 80092a2:	e010      	b.n	80092c6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80092a4:	6839      	ldr	r1, [r7, #0]
 80092a6:	6938      	ldr	r0, [r7, #16]
 80092a8:	f000 fda6 	bl	8009df8 <xQueueSemaphoreTake>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d009      	beq.n	80092c6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d003      	beq.n	80092c0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80092b8:	f06f 0301 	mvn.w	r3, #1
 80092bc:	617b      	str	r3, [r7, #20]
 80092be:	e002      	b.n	80092c6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80092c0:	f06f 0302 	mvn.w	r3, #2
 80092c4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80092c6:	697b      	ldr	r3, [r7, #20]
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3718      	adds	r7, #24
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f023 0301 	bic.w	r3, r3, #1
 80092de:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f003 0301 	and.w	r3, r3, #1
 80092e6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092ec:	f3ef 8305 	mrs	r3, IPSR
 80092f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80092f2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d003      	beq.n	8009300 <osMutexRelease+0x30>
    stat = osErrorISR;
 80092f8:	f06f 0305 	mvn.w	r3, #5
 80092fc:	617b      	str	r3, [r7, #20]
 80092fe:	e01f      	b.n	8009340 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d103      	bne.n	800930e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8009306:	f06f 0303 	mvn.w	r3, #3
 800930a:	617b      	str	r3, [r7, #20]
 800930c:	e018      	b.n	8009340 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d009      	beq.n	8009328 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009314:	6938      	ldr	r0, [r7, #16]
 8009316:	f000 fa8b 	bl	8009830 <xQueueGiveMutexRecursive>
 800931a:	4603      	mov	r3, r0
 800931c:	2b01      	cmp	r3, #1
 800931e:	d00f      	beq.n	8009340 <osMutexRelease+0x70>
        stat = osErrorResource;
 8009320:	f06f 0302 	mvn.w	r3, #2
 8009324:	617b      	str	r3, [r7, #20]
 8009326:	e00b      	b.n	8009340 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009328:	2300      	movs	r3, #0
 800932a:	2200      	movs	r2, #0
 800932c:	2100      	movs	r1, #0
 800932e:	6938      	ldr	r0, [r7, #16]
 8009330:	f000 fae8 	bl	8009904 <xQueueGenericSend>
 8009334:	4603      	mov	r3, r0
 8009336:	2b01      	cmp	r3, #1
 8009338:	d002      	beq.n	8009340 <osMutexRelease+0x70>
        stat = osErrorResource;
 800933a:	f06f 0302 	mvn.w	r3, #2
 800933e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009340:	697b      	ldr	r3, [r7, #20]
}
 8009342:	4618      	mov	r0, r3
 8009344:	3718      	adds	r7, #24
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
	...

0800934c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	4a07      	ldr	r2, [pc, #28]	; (8009378 <vApplicationGetIdleTaskMemory+0x2c>)
 800935c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	4a06      	ldr	r2, [pc, #24]	; (800937c <vApplicationGetIdleTaskMemory+0x30>)
 8009362:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2280      	movs	r2, #128	; 0x80
 8009368:	601a      	str	r2, [r3, #0]
}
 800936a:	bf00      	nop
 800936c:	3714      	adds	r7, #20
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	20000624 	.word	0x20000624
 800937c:	20000680 	.word	0x20000680

08009380 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	4a07      	ldr	r2, [pc, #28]	; (80093ac <vApplicationGetTimerTaskMemory+0x2c>)
 8009390:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	4a06      	ldr	r2, [pc, #24]	; (80093b0 <vApplicationGetTimerTaskMemory+0x30>)
 8009396:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800939e:	601a      	str	r2, [r3, #0]
}
 80093a0:	bf00      	nop
 80093a2:	3714      	adds	r7, #20
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr
 80093ac:	20000880 	.word	0x20000880
 80093b0:	200008dc 	.word	0x200008dc

080093b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f103 0208 	add.w	r2, r3, #8
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f04f 32ff 	mov.w	r2, #4294967295
 80093cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f103 0208 	add.w	r2, r3, #8
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f103 0208 	add.w	r2, r3, #8
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80093e8:	bf00      	nop
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009402:	bf00      	nop
 8009404:	370c      	adds	r7, #12
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr

0800940e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800940e:	b480      	push	{r7}
 8009410:	b085      	sub	sp, #20
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
 8009416:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	689a      	ldr	r2, [r3, #8]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	683a      	ldr	r2, [r7, #0]
 8009432:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	683a      	ldr	r2, [r7, #0]
 8009438:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	1c5a      	adds	r2, r3, #1
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	601a      	str	r2, [r3, #0]
}
 800944a:	bf00      	nop
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009456:	b480      	push	{r7}
 8009458:	b085      	sub	sp, #20
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800946c:	d103      	bne.n	8009476 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	e00c      	b.n	8009490 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	3308      	adds	r3, #8
 800947a:	60fb      	str	r3, [r7, #12]
 800947c:	e002      	b.n	8009484 <vListInsert+0x2e>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	60fb      	str	r3, [r7, #12]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	429a      	cmp	r2, r3
 800948e:	d2f6      	bcs.n	800947e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	683a      	ldr	r2, [r7, #0]
 800949e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	1c5a      	adds	r2, r3, #1
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	601a      	str	r2, [r3, #0]
}
 80094bc:	bf00      	nop
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	6892      	ldr	r2, [r2, #8]
 80094de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	6852      	ldr	r2, [r2, #4]
 80094e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d103      	bne.n	80094fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	689a      	ldr	r2, [r3, #8]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	1e5a      	subs	r2, r3, #1
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
}
 8009510:	4618      	mov	r0, r3
 8009512:	3714      	adds	r7, #20
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10a      	bne.n	8009546 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009542:	bf00      	nop
 8009544:	e7fe      	b.n	8009544 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009546:	f002 fb6d 	bl	800bc24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009552:	68f9      	ldr	r1, [r7, #12]
 8009554:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009556:	fb01 f303 	mul.w	r3, r1, r3
 800955a:	441a      	add	r2, r3
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009576:	3b01      	subs	r3, #1
 8009578:	68f9      	ldr	r1, [r7, #12]
 800957a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800957c:	fb01 f303 	mul.w	r3, r1, r3
 8009580:	441a      	add	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	22ff      	movs	r2, #255	; 0xff
 800958a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	22ff      	movs	r2, #255	; 0xff
 8009592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d114      	bne.n	80095c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d01a      	beq.n	80095da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	3310      	adds	r3, #16
 80095a8:	4618      	mov	r0, r3
 80095aa:	f001 fb17 	bl	800abdc <xTaskRemoveFromEventList>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d012      	beq.n	80095da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80095b4:	4b0c      	ldr	r3, [pc, #48]	; (80095e8 <xQueueGenericReset+0xcc>)
 80095b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ba:	601a      	str	r2, [r3, #0]
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	f3bf 8f6f 	isb	sy
 80095c4:	e009      	b.n	80095da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	3310      	adds	r3, #16
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7ff fef2 	bl	80093b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	3324      	adds	r3, #36	; 0x24
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7ff feed 	bl	80093b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80095da:	f002 fb53 	bl	800bc84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80095de:	2301      	movs	r3, #1
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	e000ed04 	.word	0xe000ed04

080095ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b08e      	sub	sp, #56	; 0x38
 80095f0:	af02      	add	r7, sp, #8
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
 80095f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10a      	bne.n	8009616 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009612:	bf00      	nop
 8009614:	e7fe      	b.n	8009614 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d10a      	bne.n	8009632 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800961c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800962e:	bf00      	nop
 8009630:	e7fe      	b.n	8009630 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d002      	beq.n	800963e <xQueueGenericCreateStatic+0x52>
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d001      	beq.n	8009642 <xQueueGenericCreateStatic+0x56>
 800963e:	2301      	movs	r3, #1
 8009640:	e000      	b.n	8009644 <xQueueGenericCreateStatic+0x58>
 8009642:	2300      	movs	r3, #0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d10a      	bne.n	800965e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964c:	f383 8811 	msr	BASEPRI, r3
 8009650:	f3bf 8f6f 	isb	sy
 8009654:	f3bf 8f4f 	dsb	sy
 8009658:	623b      	str	r3, [r7, #32]
}
 800965a:	bf00      	nop
 800965c:	e7fe      	b.n	800965c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d102      	bne.n	800966a <xQueueGenericCreateStatic+0x7e>
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d101      	bne.n	800966e <xQueueGenericCreateStatic+0x82>
 800966a:	2301      	movs	r3, #1
 800966c:	e000      	b.n	8009670 <xQueueGenericCreateStatic+0x84>
 800966e:	2300      	movs	r3, #0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10a      	bne.n	800968a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	61fb      	str	r3, [r7, #28]
}
 8009686:	bf00      	nop
 8009688:	e7fe      	b.n	8009688 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800968a:	2350      	movs	r3, #80	; 0x50
 800968c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	2b50      	cmp	r3, #80	; 0x50
 8009692:	d00a      	beq.n	80096aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009698:	f383 8811 	msr	BASEPRI, r3
 800969c:	f3bf 8f6f 	isb	sy
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	61bb      	str	r3, [r7, #24]
}
 80096a6:	bf00      	nop
 80096a8:	e7fe      	b.n	80096a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80096aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80096b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00d      	beq.n	80096d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80096b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b8:	2201      	movs	r2, #1
 80096ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80096be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80096c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c4:	9300      	str	r3, [sp, #0]
 80096c6:	4613      	mov	r3, r2
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	68b9      	ldr	r1, [r7, #8]
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f000 f83f 	bl	8009750 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80096d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3730      	adds	r7, #48	; 0x30
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b08a      	sub	sp, #40	; 0x28
 80096e0:	af02      	add	r7, sp, #8
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	4613      	mov	r3, r2
 80096e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d10a      	bne.n	8009706 <xQueueGenericCreate+0x2a>
	__asm volatile
 80096f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f4:	f383 8811 	msr	BASEPRI, r3
 80096f8:	f3bf 8f6f 	isb	sy
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	613b      	str	r3, [r7, #16]
}
 8009702:	bf00      	nop
 8009704:	e7fe      	b.n	8009704 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	fb02 f303 	mul.w	r3, r2, r3
 800970e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	3350      	adds	r3, #80	; 0x50
 8009714:	4618      	mov	r0, r3
 8009716:	f002 fba7 	bl	800be68 <pvPortMalloc>
 800971a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d011      	beq.n	8009746 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	3350      	adds	r3, #80	; 0x50
 800972a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009734:	79fa      	ldrb	r2, [r7, #7]
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	9300      	str	r3, [sp, #0]
 800973a:	4613      	mov	r3, r2
 800973c:	697a      	ldr	r2, [r7, #20]
 800973e:	68b9      	ldr	r1, [r7, #8]
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	f000 f805 	bl	8009750 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009746:	69bb      	ldr	r3, [r7, #24]
	}
 8009748:	4618      	mov	r0, r3
 800974a:	3720      	adds	r7, #32
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	607a      	str	r2, [r7, #4]
 800975c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d103      	bne.n	800976c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009764:	69bb      	ldr	r3, [r7, #24]
 8009766:	69ba      	ldr	r2, [r7, #24]
 8009768:	601a      	str	r2, [r3, #0]
 800976a:	e002      	b.n	8009772 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800977e:	2101      	movs	r1, #1
 8009780:	69b8      	ldr	r0, [r7, #24]
 8009782:	f7ff fecb 	bl	800951c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	78fa      	ldrb	r2, [r7, #3]
 800978a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800978e:	bf00      	nop
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009796:	b580      	push	{r7, lr}
 8009798:	b082      	sub	sp, #8
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d00e      	beq.n	80097c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80097b6:	2300      	movs	r3, #0
 80097b8:	2200      	movs	r2, #0
 80097ba:	2100      	movs	r1, #0
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f8a1 	bl	8009904 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80097c2:	bf00      	nop
 80097c4:	3708      	adds	r7, #8
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b086      	sub	sp, #24
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	4603      	mov	r3, r0
 80097d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80097d4:	2301      	movs	r3, #1
 80097d6:	617b      	str	r3, [r7, #20]
 80097d8:	2300      	movs	r3, #0
 80097da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80097dc:	79fb      	ldrb	r3, [r7, #7]
 80097de:	461a      	mov	r2, r3
 80097e0:	6939      	ldr	r1, [r7, #16]
 80097e2:	6978      	ldr	r0, [r7, #20]
 80097e4:	f7ff ff7a 	bl	80096dc <xQueueGenericCreate>
 80097e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	f7ff ffd3 	bl	8009796 <prvInitialiseMutex>

		return xNewQueue;
 80097f0:	68fb      	ldr	r3, [r7, #12]
	}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3718      	adds	r7, #24
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b088      	sub	sp, #32
 80097fe:	af02      	add	r7, sp, #8
 8009800:	4603      	mov	r3, r0
 8009802:	6039      	str	r1, [r7, #0]
 8009804:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009806:	2301      	movs	r3, #1
 8009808:	617b      	str	r3, [r7, #20]
 800980a:	2300      	movs	r3, #0
 800980c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800980e:	79fb      	ldrb	r3, [r7, #7]
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	2200      	movs	r2, #0
 8009816:	6939      	ldr	r1, [r7, #16]
 8009818:	6978      	ldr	r0, [r7, #20]
 800981a:	f7ff fee7 	bl	80095ec <xQueueGenericCreateStatic>
 800981e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	f7ff ffb8 	bl	8009796 <prvInitialiseMutex>

		return xNewQueue;
 8009826:	68fb      	ldr	r3, [r7, #12]
	}
 8009828:	4618      	mov	r0, r3
 800982a:	3718      	adds	r7, #24
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009830:	b590      	push	{r4, r7, lr}
 8009832:	b087      	sub	sp, #28
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d10a      	bne.n	8009858 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8009842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009846:	f383 8811 	msr	BASEPRI, r3
 800984a:	f3bf 8f6f 	isb	sy
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	60fb      	str	r3, [r7, #12]
}
 8009854:	bf00      	nop
 8009856:	e7fe      	b.n	8009856 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	689c      	ldr	r4, [r3, #8]
 800985c:	f001 fb7c 	bl	800af58 <xTaskGetCurrentTaskHandle>
 8009860:	4603      	mov	r3, r0
 8009862:	429c      	cmp	r4, r3
 8009864:	d111      	bne.n	800988a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	1e5a      	subs	r2, r3, #1
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d105      	bne.n	8009884 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009878:	2300      	movs	r3, #0
 800987a:	2200      	movs	r2, #0
 800987c:	2100      	movs	r1, #0
 800987e:	6938      	ldr	r0, [r7, #16]
 8009880:	f000 f840 	bl	8009904 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009884:	2301      	movs	r3, #1
 8009886:	617b      	str	r3, [r7, #20]
 8009888:	e001      	b.n	800988e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800988a:	2300      	movs	r3, #0
 800988c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800988e:	697b      	ldr	r3, [r7, #20]
	}
 8009890:	4618      	mov	r0, r3
 8009892:	371c      	adds	r7, #28
 8009894:	46bd      	mov	sp, r7
 8009896:	bd90      	pop	{r4, r7, pc}

08009898 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009898:	b590      	push	{r4, r7, lr}
 800989a:	b087      	sub	sp, #28
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d10a      	bne.n	80098c2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80098ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b0:	f383 8811 	msr	BASEPRI, r3
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	60fb      	str	r3, [r7, #12]
}
 80098be:	bf00      	nop
 80098c0:	e7fe      	b.n	80098c0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	689c      	ldr	r4, [r3, #8]
 80098c6:	f001 fb47 	bl	800af58 <xTaskGetCurrentTaskHandle>
 80098ca:	4603      	mov	r3, r0
 80098cc:	429c      	cmp	r4, r3
 80098ce:	d107      	bne.n	80098e0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	1c5a      	adds	r2, r3, #1
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80098da:	2301      	movs	r3, #1
 80098dc:	617b      	str	r3, [r7, #20]
 80098de:	e00c      	b.n	80098fa <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80098e0:	6839      	ldr	r1, [r7, #0]
 80098e2:	6938      	ldr	r0, [r7, #16]
 80098e4:	f000 fa88 	bl	8009df8 <xQueueSemaphoreTake>
 80098e8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d004      	beq.n	80098fa <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	1c5a      	adds	r2, r3, #1
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80098fa:	697b      	ldr	r3, [r7, #20]
	}
 80098fc:	4618      	mov	r0, r3
 80098fe:	371c      	adds	r7, #28
 8009900:	46bd      	mov	sp, r7
 8009902:	bd90      	pop	{r4, r7, pc}

08009904 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b08e      	sub	sp, #56	; 0x38
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	607a      	str	r2, [r7, #4]
 8009910:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009912:	2300      	movs	r3, #0
 8009914:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800991a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10a      	bne.n	8009936 <xQueueGenericSend+0x32>
	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009932:	bf00      	nop
 8009934:	e7fe      	b.n	8009934 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d103      	bne.n	8009944 <xQueueGenericSend+0x40>
 800993c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009940:	2b00      	cmp	r3, #0
 8009942:	d101      	bne.n	8009948 <xQueueGenericSend+0x44>
 8009944:	2301      	movs	r3, #1
 8009946:	e000      	b.n	800994a <xQueueGenericSend+0x46>
 8009948:	2300      	movs	r3, #0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d10a      	bne.n	8009964 <xQueueGenericSend+0x60>
	__asm volatile
 800994e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009960:	bf00      	nop
 8009962:	e7fe      	b.n	8009962 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	2b02      	cmp	r3, #2
 8009968:	d103      	bne.n	8009972 <xQueueGenericSend+0x6e>
 800996a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800996e:	2b01      	cmp	r3, #1
 8009970:	d101      	bne.n	8009976 <xQueueGenericSend+0x72>
 8009972:	2301      	movs	r3, #1
 8009974:	e000      	b.n	8009978 <xQueueGenericSend+0x74>
 8009976:	2300      	movs	r3, #0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10a      	bne.n	8009992 <xQueueGenericSend+0x8e>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	623b      	str	r3, [r7, #32]
}
 800998e:	bf00      	nop
 8009990:	e7fe      	b.n	8009990 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009992:	f001 faf1 	bl	800af78 <xTaskGetSchedulerState>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d102      	bne.n	80099a2 <xQueueGenericSend+0x9e>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d101      	bne.n	80099a6 <xQueueGenericSend+0xa2>
 80099a2:	2301      	movs	r3, #1
 80099a4:	e000      	b.n	80099a8 <xQueueGenericSend+0xa4>
 80099a6:	2300      	movs	r3, #0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10a      	bne.n	80099c2 <xQueueGenericSend+0xbe>
	__asm volatile
 80099ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b0:	f383 8811 	msr	BASEPRI, r3
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	f3bf 8f4f 	dsb	sy
 80099bc:	61fb      	str	r3, [r7, #28]
}
 80099be:	bf00      	nop
 80099c0:	e7fe      	b.n	80099c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099c2:	f002 f92f 	bl	800bc24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80099c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d302      	bcc.n	80099d8 <xQueueGenericSend+0xd4>
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	2b02      	cmp	r3, #2
 80099d6:	d129      	bne.n	8009a2c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	68b9      	ldr	r1, [r7, #8]
 80099dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099de:	f000 fb2f 	bl	800a040 <prvCopyDataToQueue>
 80099e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d010      	beq.n	8009a0e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ee:	3324      	adds	r3, #36	; 0x24
 80099f0:	4618      	mov	r0, r3
 80099f2:	f001 f8f3 	bl	800abdc <xTaskRemoveFromEventList>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d013      	beq.n	8009a24 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80099fc:	4b3f      	ldr	r3, [pc, #252]	; (8009afc <xQueueGenericSend+0x1f8>)
 80099fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a02:	601a      	str	r2, [r3, #0]
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	e00a      	b.n	8009a24 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d007      	beq.n	8009a24 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009a14:	4b39      	ldr	r3, [pc, #228]	; (8009afc <xQueueGenericSend+0x1f8>)
 8009a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a1a:	601a      	str	r2, [r3, #0]
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009a24:	f002 f92e 	bl	800bc84 <vPortExitCritical>
				return pdPASS;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e063      	b.n	8009af4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d103      	bne.n	8009a3a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009a32:	f002 f927 	bl	800bc84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009a36:	2300      	movs	r3, #0
 8009a38:	e05c      	b.n	8009af4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d106      	bne.n	8009a4e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a40:	f107 0314 	add.w	r3, r7, #20
 8009a44:	4618      	mov	r0, r3
 8009a46:	f001 f92d 	bl	800aca4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a4e:	f002 f919 	bl	800bc84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a52:	f000 fe9f 	bl	800a794 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a56:	f002 f8e5 	bl	800bc24 <vPortEnterCritical>
 8009a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a60:	b25b      	sxtb	r3, r3
 8009a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a66:	d103      	bne.n	8009a70 <xQueueGenericSend+0x16c>
 8009a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a76:	b25b      	sxtb	r3, r3
 8009a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a7c:	d103      	bne.n	8009a86 <xQueueGenericSend+0x182>
 8009a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a80:	2200      	movs	r2, #0
 8009a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a86:	f002 f8fd 	bl	800bc84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a8a:	1d3a      	adds	r2, r7, #4
 8009a8c:	f107 0314 	add.w	r3, r7, #20
 8009a90:	4611      	mov	r1, r2
 8009a92:	4618      	mov	r0, r3
 8009a94:	f001 f91c 	bl	800acd0 <xTaskCheckForTimeOut>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d124      	bne.n	8009ae8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009a9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009aa0:	f000 fbc6 	bl	800a230 <prvIsQueueFull>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d018      	beq.n	8009adc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aac:	3310      	adds	r3, #16
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	4611      	mov	r1, r2
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f001 f842 	bl	800ab3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009aba:	f000 fb51 	bl	800a160 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009abe:	f000 fe77 	bl	800a7b0 <xTaskResumeAll>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f47f af7c 	bne.w	80099c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009aca:	4b0c      	ldr	r3, [pc, #48]	; (8009afc <xQueueGenericSend+0x1f8>)
 8009acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ad0:	601a      	str	r2, [r3, #0]
 8009ad2:	f3bf 8f4f 	dsb	sy
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	e772      	b.n	80099c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ade:	f000 fb3f 	bl	800a160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ae2:	f000 fe65 	bl	800a7b0 <xTaskResumeAll>
 8009ae6:	e76c      	b.n	80099c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009aea:	f000 fb39 	bl	800a160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009aee:	f000 fe5f 	bl	800a7b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009af2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3738      	adds	r7, #56	; 0x38
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	e000ed04 	.word	0xe000ed04

08009b00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b090      	sub	sp, #64	; 0x40
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
 8009b0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10a      	bne.n	8009b2e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1c:	f383 8811 	msr	BASEPRI, r3
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b2a:	bf00      	nop
 8009b2c:	e7fe      	b.n	8009b2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d103      	bne.n	8009b3c <xQueueGenericSendFromISR+0x3c>
 8009b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d101      	bne.n	8009b40 <xQueueGenericSendFromISR+0x40>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e000      	b.n	8009b42 <xQueueGenericSendFromISR+0x42>
 8009b40:	2300      	movs	r3, #0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d10a      	bne.n	8009b5c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4a:	f383 8811 	msr	BASEPRI, r3
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f3bf 8f4f 	dsb	sy
 8009b56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b58:	bf00      	nop
 8009b5a:	e7fe      	b.n	8009b5a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d103      	bne.n	8009b6a <xQueueGenericSendFromISR+0x6a>
 8009b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d101      	bne.n	8009b6e <xQueueGenericSendFromISR+0x6e>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e000      	b.n	8009b70 <xQueueGenericSendFromISR+0x70>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10a      	bne.n	8009b8a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	623b      	str	r3, [r7, #32]
}
 8009b86:	bf00      	nop
 8009b88:	e7fe      	b.n	8009b88 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b8a:	f002 f92d 	bl	800bde8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009b8e:	f3ef 8211 	mrs	r2, BASEPRI
 8009b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b96:	f383 8811 	msr	BASEPRI, r3
 8009b9a:	f3bf 8f6f 	isb	sy
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	61fa      	str	r2, [r7, #28]
 8009ba4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009ba6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ba8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d302      	bcc.n	8009bbc <xQueueGenericSendFromISR+0xbc>
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d12f      	bne.n	8009c1c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009bcc:	683a      	ldr	r2, [r7, #0]
 8009bce:	68b9      	ldr	r1, [r7, #8]
 8009bd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009bd2:	f000 fa35 	bl	800a040 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009bd6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bde:	d112      	bne.n	8009c06 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d016      	beq.n	8009c16 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bea:	3324      	adds	r3, #36	; 0x24
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 fff5 	bl	800abdc <xTaskRemoveFromEventList>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00e      	beq.n	8009c16 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00b      	beq.n	8009c16 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	601a      	str	r2, [r3, #0]
 8009c04:	e007      	b.n	8009c16 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009c06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	b25a      	sxtb	r2, r3
 8009c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009c16:	2301      	movs	r3, #1
 8009c18:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009c1a:	e001      	b.n	8009c20 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c22:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009c2a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3740      	adds	r7, #64	; 0x40
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
	...

08009c38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b08c      	sub	sp, #48	; 0x30
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009c44:	2300      	movs	r3, #0
 8009c46:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d10a      	bne.n	8009c68 <xQueueReceive+0x30>
	__asm volatile
 8009c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c56:	f383 8811 	msr	BASEPRI, r3
 8009c5a:	f3bf 8f6f 	isb	sy
 8009c5e:	f3bf 8f4f 	dsb	sy
 8009c62:	623b      	str	r3, [r7, #32]
}
 8009c64:	bf00      	nop
 8009c66:	e7fe      	b.n	8009c66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d103      	bne.n	8009c76 <xQueueReceive+0x3e>
 8009c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d101      	bne.n	8009c7a <xQueueReceive+0x42>
 8009c76:	2301      	movs	r3, #1
 8009c78:	e000      	b.n	8009c7c <xQueueReceive+0x44>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10a      	bne.n	8009c96 <xQueueReceive+0x5e>
	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	61fb      	str	r3, [r7, #28]
}
 8009c92:	bf00      	nop
 8009c94:	e7fe      	b.n	8009c94 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c96:	f001 f96f 	bl	800af78 <xTaskGetSchedulerState>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d102      	bne.n	8009ca6 <xQueueReceive+0x6e>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d101      	bne.n	8009caa <xQueueReceive+0x72>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e000      	b.n	8009cac <xQueueReceive+0x74>
 8009caa:	2300      	movs	r3, #0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d10a      	bne.n	8009cc6 <xQueueReceive+0x8e>
	__asm volatile
 8009cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	f3bf 8f6f 	isb	sy
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	61bb      	str	r3, [r7, #24]
}
 8009cc2:	bf00      	nop
 8009cc4:	e7fe      	b.n	8009cc4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009cc6:	f001 ffad 	bl	800bc24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d01f      	beq.n	8009d16 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009cd6:	68b9      	ldr	r1, [r7, #8]
 8009cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cda:	f000 fa1b 	bl	800a114 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce0:	1e5a      	subs	r2, r3, #1
 8009ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00f      	beq.n	8009d0e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf0:	3310      	adds	r3, #16
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f000 ff72 	bl	800abdc <xTaskRemoveFromEventList>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d007      	beq.n	8009d0e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009cfe:	4b3d      	ldr	r3, [pc, #244]	; (8009df4 <xQueueReceive+0x1bc>)
 8009d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d04:	601a      	str	r2, [r3, #0]
 8009d06:	f3bf 8f4f 	dsb	sy
 8009d0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009d0e:	f001 ffb9 	bl	800bc84 <vPortExitCritical>
				return pdPASS;
 8009d12:	2301      	movs	r3, #1
 8009d14:	e069      	b.n	8009dea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d103      	bne.n	8009d24 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d1c:	f001 ffb2 	bl	800bc84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009d20:	2300      	movs	r3, #0
 8009d22:	e062      	b.n	8009dea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d106      	bne.n	8009d38 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d2a:	f107 0310 	add.w	r3, r7, #16
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f000 ffb8 	bl	800aca4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d34:	2301      	movs	r3, #1
 8009d36:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d38:	f001 ffa4 	bl	800bc84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d3c:	f000 fd2a 	bl	800a794 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d40:	f001 ff70 	bl	800bc24 <vPortEnterCritical>
 8009d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d4a:	b25b      	sxtb	r3, r3
 8009d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d50:	d103      	bne.n	8009d5a <xQueueReceive+0x122>
 8009d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d54:	2200      	movs	r2, #0
 8009d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d60:	b25b      	sxtb	r3, r3
 8009d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d66:	d103      	bne.n	8009d70 <xQueueReceive+0x138>
 8009d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d70:	f001 ff88 	bl	800bc84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d74:	1d3a      	adds	r2, r7, #4
 8009d76:	f107 0310 	add.w	r3, r7, #16
 8009d7a:	4611      	mov	r1, r2
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f000 ffa7 	bl	800acd0 <xTaskCheckForTimeOut>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d123      	bne.n	8009dd0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d8a:	f000 fa3b 	bl	800a204 <prvIsQueueEmpty>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d017      	beq.n	8009dc4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d96:	3324      	adds	r3, #36	; 0x24
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	4611      	mov	r1, r2
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f000 fecd 	bl	800ab3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009da2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009da4:	f000 f9dc 	bl	800a160 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009da8:	f000 fd02 	bl	800a7b0 <xTaskResumeAll>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d189      	bne.n	8009cc6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009db2:	4b10      	ldr	r3, [pc, #64]	; (8009df4 <xQueueReceive+0x1bc>)
 8009db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009db8:	601a      	str	r2, [r3, #0]
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	f3bf 8f6f 	isb	sy
 8009dc2:	e780      	b.n	8009cc6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dc6:	f000 f9cb 	bl	800a160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009dca:	f000 fcf1 	bl	800a7b0 <xTaskResumeAll>
 8009dce:	e77a      	b.n	8009cc6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009dd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dd2:	f000 f9c5 	bl	800a160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009dd6:	f000 fceb 	bl	800a7b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ddc:	f000 fa12 	bl	800a204 <prvIsQueueEmpty>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	f43f af6f 	beq.w	8009cc6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009de8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3730      	adds	r7, #48	; 0x30
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	e000ed04 	.word	0xe000ed04

08009df8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b08e      	sub	sp, #56	; 0x38
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e02:	2300      	movs	r3, #0
 8009e04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d10a      	bne.n	8009e2a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e18:	f383 8811 	msr	BASEPRI, r3
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	623b      	str	r3, [r7, #32]
}
 8009e26:	bf00      	nop
 8009e28:	e7fe      	b.n	8009e28 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00a      	beq.n	8009e48 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	61fb      	str	r3, [r7, #28]
}
 8009e44:	bf00      	nop
 8009e46:	e7fe      	b.n	8009e46 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e48:	f001 f896 	bl	800af78 <xTaskGetSchedulerState>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d102      	bne.n	8009e58 <xQueueSemaphoreTake+0x60>
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d101      	bne.n	8009e5c <xQueueSemaphoreTake+0x64>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e000      	b.n	8009e5e <xQueueSemaphoreTake+0x66>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d10a      	bne.n	8009e78 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e66:	f383 8811 	msr	BASEPRI, r3
 8009e6a:	f3bf 8f6f 	isb	sy
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	61bb      	str	r3, [r7, #24]
}
 8009e74:	bf00      	nop
 8009e76:	e7fe      	b.n	8009e76 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e78:	f001 fed4 	bl	800bc24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e80:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d024      	beq.n	8009ed2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8a:	1e5a      	subs	r2, r3, #1
 8009e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d104      	bne.n	8009ea2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009e98:	f001 f9e4 	bl	800b264 <pvTaskIncrementMutexHeldCount>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00f      	beq.n	8009eca <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eac:	3310      	adds	r3, #16
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f000 fe94 	bl	800abdc <xTaskRemoveFromEventList>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d007      	beq.n	8009eca <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009eba:	4b54      	ldr	r3, [pc, #336]	; (800a00c <xQueueSemaphoreTake+0x214>)
 8009ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec0:	601a      	str	r2, [r3, #0]
 8009ec2:	f3bf 8f4f 	dsb	sy
 8009ec6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009eca:	f001 fedb 	bl	800bc84 <vPortExitCritical>
				return pdPASS;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e097      	b.n	800a002 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d111      	bne.n	8009efc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00a      	beq.n	8009ef4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee2:	f383 8811 	msr	BASEPRI, r3
 8009ee6:	f3bf 8f6f 	isb	sy
 8009eea:	f3bf 8f4f 	dsb	sy
 8009eee:	617b      	str	r3, [r7, #20]
}
 8009ef0:	bf00      	nop
 8009ef2:	e7fe      	b.n	8009ef2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009ef4:	f001 fec6 	bl	800bc84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	e082      	b.n	800a002 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d106      	bne.n	8009f10 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f02:	f107 030c 	add.w	r3, r7, #12
 8009f06:	4618      	mov	r0, r3
 8009f08:	f000 fecc 	bl	800aca4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f10:	f001 feb8 	bl	800bc84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f14:	f000 fc3e 	bl	800a794 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f18:	f001 fe84 	bl	800bc24 <vPortEnterCritical>
 8009f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f22:	b25b      	sxtb	r3, r3
 8009f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f28:	d103      	bne.n	8009f32 <xQueueSemaphoreTake+0x13a>
 8009f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f38:	b25b      	sxtb	r3, r3
 8009f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f3e:	d103      	bne.n	8009f48 <xQueueSemaphoreTake+0x150>
 8009f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f42:	2200      	movs	r2, #0
 8009f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f48:	f001 fe9c 	bl	800bc84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f4c:	463a      	mov	r2, r7
 8009f4e:	f107 030c 	add.w	r3, r7, #12
 8009f52:	4611      	mov	r1, r2
 8009f54:	4618      	mov	r0, r3
 8009f56:	f000 febb 	bl	800acd0 <xTaskCheckForTimeOut>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d132      	bne.n	8009fc6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f62:	f000 f94f 	bl	800a204 <prvIsQueueEmpty>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d026      	beq.n	8009fba <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d109      	bne.n	8009f88 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009f74:	f001 fe56 	bl	800bc24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f001 f819 	bl	800afb4 <xTaskPriorityInherit>
 8009f82:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009f84:	f001 fe7e 	bl	800bc84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8a:	3324      	adds	r3, #36	; 0x24
 8009f8c:	683a      	ldr	r2, [r7, #0]
 8009f8e:	4611      	mov	r1, r2
 8009f90:	4618      	mov	r0, r3
 8009f92:	f000 fdd3 	bl	800ab3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f98:	f000 f8e2 	bl	800a160 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f9c:	f000 fc08 	bl	800a7b0 <xTaskResumeAll>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f47f af68 	bne.w	8009e78 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009fa8:	4b18      	ldr	r3, [pc, #96]	; (800a00c <xQueueSemaphoreTake+0x214>)
 8009faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fae:	601a      	str	r2, [r3, #0]
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	e75e      	b.n	8009e78 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009fba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009fbc:	f000 f8d0 	bl	800a160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fc0:	f000 fbf6 	bl	800a7b0 <xTaskResumeAll>
 8009fc4:	e758      	b.n	8009e78 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009fc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009fc8:	f000 f8ca 	bl	800a160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fcc:	f000 fbf0 	bl	800a7b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009fd2:	f000 f917 	bl	800a204 <prvIsQueueEmpty>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f43f af4d 	beq.w	8009e78 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d00d      	beq.n	800a000 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009fe4:	f001 fe1e 	bl	800bc24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009fe8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009fea:	f000 f811 	bl	800a010 <prvGetDisinheritPriorityAfterTimeout>
 8009fee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f001 f8b2 	bl	800b160 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009ffc:	f001 fe42 	bl	800bc84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a000:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a002:	4618      	mov	r0, r3
 800a004:	3738      	adds	r7, #56	; 0x38
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	e000ed04 	.word	0xe000ed04

0800a010 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d006      	beq.n	800a02e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a02a:	60fb      	str	r3, [r7, #12]
 800a02c:	e001      	b.n	800a032 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a02e:	2300      	movs	r3, #0
 800a030:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a032:	68fb      	ldr	r3, [r7, #12]
	}
 800a034:	4618      	mov	r0, r3
 800a036:	3714      	adds	r7, #20
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b086      	sub	sp, #24
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a04c:	2300      	movs	r3, #0
 800a04e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a054:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10d      	bne.n	800a07a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d14d      	bne.n	800a102 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	4618      	mov	r0, r3
 800a06c:	f001 f80a 	bl	800b084 <xTaskPriorityDisinherit>
 800a070:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2200      	movs	r2, #0
 800a076:	609a      	str	r2, [r3, #8]
 800a078:	e043      	b.n	800a102 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d119      	bne.n	800a0b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6858      	ldr	r0, [r3, #4]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a088:	461a      	mov	r2, r3
 800a08a:	68b9      	ldr	r1, [r7, #8]
 800a08c:	f002 f904 	bl	800c298 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	685a      	ldr	r2, [r3, #4]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a098:	441a      	add	r2, r3
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	685a      	ldr	r2, [r3, #4]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d32b      	bcc.n	800a102 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	605a      	str	r2, [r3, #4]
 800a0b2:	e026      	b.n	800a102 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	68d8      	ldr	r0, [r3, #12]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0bc:	461a      	mov	r2, r3
 800a0be:	68b9      	ldr	r1, [r7, #8]
 800a0c0:	f002 f8ea 	bl	800c298 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	68da      	ldr	r2, [r3, #12]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0cc:	425b      	negs	r3, r3
 800a0ce:	441a      	add	r2, r3
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	68da      	ldr	r2, [r3, #12]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d207      	bcs.n	800a0f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	689a      	ldr	r2, [r3, #8]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e8:	425b      	negs	r3, r3
 800a0ea:	441a      	add	r2, r3
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b02      	cmp	r3, #2
 800a0f4:	d105      	bne.n	800a102 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d002      	beq.n	800a102 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	3b01      	subs	r3, #1
 800a100:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	1c5a      	adds	r2, r3, #1
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a10a:	697b      	ldr	r3, [r7, #20]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3718      	adds	r7, #24
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a122:	2b00      	cmp	r3, #0
 800a124:	d018      	beq.n	800a158 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	68da      	ldr	r2, [r3, #12]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12e:	441a      	add	r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	68da      	ldr	r2, [r3, #12]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d303      	bcc.n	800a148 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	68d9      	ldr	r1, [r3, #12]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a150:	461a      	mov	r2, r3
 800a152:	6838      	ldr	r0, [r7, #0]
 800a154:	f002 f8a0 	bl	800c298 <memcpy>
	}
}
 800a158:	bf00      	nop
 800a15a:	3708      	adds	r7, #8
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a168:	f001 fd5c 	bl	800bc24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a172:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a174:	e011      	b.n	800a19a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d012      	beq.n	800a1a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	3324      	adds	r3, #36	; 0x24
 800a182:	4618      	mov	r0, r3
 800a184:	f000 fd2a 	bl	800abdc <xTaskRemoveFromEventList>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d001      	beq.n	800a192 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a18e:	f000 fe01 	bl	800ad94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a192:	7bfb      	ldrb	r3, [r7, #15]
 800a194:	3b01      	subs	r3, #1
 800a196:	b2db      	uxtb	r3, r3
 800a198:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a19a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	dce9      	bgt.n	800a176 <prvUnlockQueue+0x16>
 800a1a2:	e000      	b.n	800a1a6 <prvUnlockQueue+0x46>
					break;
 800a1a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	22ff      	movs	r2, #255	; 0xff
 800a1aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a1ae:	f001 fd69 	bl	800bc84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a1b2:	f001 fd37 	bl	800bc24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a1be:	e011      	b.n	800a1e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	691b      	ldr	r3, [r3, #16]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d012      	beq.n	800a1ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	3310      	adds	r3, #16
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f000 fd05 	bl	800abdc <xTaskRemoveFromEventList>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d001      	beq.n	800a1dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a1d8:	f000 fddc 	bl	800ad94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a1dc:	7bbb      	ldrb	r3, [r7, #14]
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a1e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	dce9      	bgt.n	800a1c0 <prvUnlockQueue+0x60>
 800a1ec:	e000      	b.n	800a1f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a1ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	22ff      	movs	r2, #255	; 0xff
 800a1f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a1f8:	f001 fd44 	bl	800bc84 <vPortExitCritical>
}
 800a1fc:	bf00      	nop
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a20c:	f001 fd0a 	bl	800bc24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a214:	2b00      	cmp	r3, #0
 800a216:	d102      	bne.n	800a21e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a218:	2301      	movs	r3, #1
 800a21a:	60fb      	str	r3, [r7, #12]
 800a21c:	e001      	b.n	800a222 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a21e:	2300      	movs	r3, #0
 800a220:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a222:	f001 fd2f 	bl	800bc84 <vPortExitCritical>

	return xReturn;
 800a226:	68fb      	ldr	r3, [r7, #12]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3710      	adds	r7, #16
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a238:	f001 fcf4 	bl	800bc24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a244:	429a      	cmp	r2, r3
 800a246:	d102      	bne.n	800a24e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a248:	2301      	movs	r3, #1
 800a24a:	60fb      	str	r3, [r7, #12]
 800a24c:	e001      	b.n	800a252 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a24e:	2300      	movs	r3, #0
 800a250:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a252:	f001 fd17 	bl	800bc84 <vPortExitCritical>

	return xReturn;
 800a256:	68fb      	ldr	r3, [r7, #12]
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3710      	adds	r7, #16
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a260:	b480      	push	{r7}
 800a262:	b085      	sub	sp, #20
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a26a:	2300      	movs	r3, #0
 800a26c:	60fb      	str	r3, [r7, #12]
 800a26e:	e014      	b.n	800a29a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a270:	4a0f      	ldr	r2, [pc, #60]	; (800a2b0 <vQueueAddToRegistry+0x50>)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10b      	bne.n	800a294 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a27c:	490c      	ldr	r1, [pc, #48]	; (800a2b0 <vQueueAddToRegistry+0x50>)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	683a      	ldr	r2, [r7, #0]
 800a282:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a286:	4a0a      	ldr	r2, [pc, #40]	; (800a2b0 <vQueueAddToRegistry+0x50>)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	00db      	lsls	r3, r3, #3
 800a28c:	4413      	add	r3, r2
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a292:	e006      	b.n	800a2a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	3301      	adds	r3, #1
 800a298:	60fb      	str	r3, [r7, #12]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2b07      	cmp	r3, #7
 800a29e:	d9e7      	bls.n	800a270 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a2a0:	bf00      	nop
 800a2a2:	bf00      	nop
 800a2a4:	3714      	adds	r7, #20
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	20000cdc 	.word	0x20000cdc

0800a2b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a2c4:	f001 fcae 	bl	800bc24 <vPortEnterCritical>
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2ce:	b25b      	sxtb	r3, r3
 800a2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d4:	d103      	bne.n	800a2de <vQueueWaitForMessageRestricted+0x2a>
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2e4:	b25b      	sxtb	r3, r3
 800a2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ea:	d103      	bne.n	800a2f4 <vQueueWaitForMessageRestricted+0x40>
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2f4:	f001 fcc6 	bl	800bc84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d106      	bne.n	800a30e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	3324      	adds	r3, #36	; 0x24
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	68b9      	ldr	r1, [r7, #8]
 800a308:	4618      	mov	r0, r3
 800a30a:	f000 fc3b 	bl	800ab84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a30e:	6978      	ldr	r0, [r7, #20]
 800a310:	f7ff ff26 	bl	800a160 <prvUnlockQueue>
	}
 800a314:	bf00      	nop
 800a316:	3718      	adds	r7, #24
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b08e      	sub	sp, #56	; 0x38
 800a320:	af04      	add	r7, sp, #16
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
 800a328:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a32a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10a      	bne.n	800a346 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	623b      	str	r3, [r7, #32]
}
 800a342:	bf00      	nop
 800a344:	e7fe      	b.n	800a344 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d10a      	bne.n	800a362 <xTaskCreateStatic+0x46>
	__asm volatile
 800a34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a350:	f383 8811 	msr	BASEPRI, r3
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	f3bf 8f4f 	dsb	sy
 800a35c:	61fb      	str	r3, [r7, #28]
}
 800a35e:	bf00      	nop
 800a360:	e7fe      	b.n	800a360 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a362:	235c      	movs	r3, #92	; 0x5c
 800a364:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	2b5c      	cmp	r3, #92	; 0x5c
 800a36a:	d00a      	beq.n	800a382 <xTaskCreateStatic+0x66>
	__asm volatile
 800a36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a370:	f383 8811 	msr	BASEPRI, r3
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	61bb      	str	r3, [r7, #24]
}
 800a37e:	bf00      	nop
 800a380:	e7fe      	b.n	800a380 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a382:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a386:	2b00      	cmp	r3, #0
 800a388:	d01e      	beq.n	800a3c8 <xTaskCreateStatic+0xac>
 800a38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d01b      	beq.n	800a3c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a392:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a398:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39c:	2202      	movs	r2, #2
 800a39e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	9303      	str	r3, [sp, #12]
 800a3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a8:	9302      	str	r3, [sp, #8]
 800a3aa:	f107 0314 	add.w	r3, r7, #20
 800a3ae:	9301      	str	r3, [sp, #4]
 800a3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b2:	9300      	str	r3, [sp, #0]
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	68b9      	ldr	r1, [r7, #8]
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f000 f850 	bl	800a460 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a3c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3c2:	f000 f8dd 	bl	800a580 <prvAddNewTaskToReadyList>
 800a3c6:	e001      	b.n	800a3cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a3cc:	697b      	ldr	r3, [r7, #20]
	}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3728      	adds	r7, #40	; 0x28
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b08c      	sub	sp, #48	; 0x30
 800a3da:	af04      	add	r7, sp, #16
 800a3dc:	60f8      	str	r0, [r7, #12]
 800a3de:	60b9      	str	r1, [r7, #8]
 800a3e0:	603b      	str	r3, [r7, #0]
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a3e6:	88fb      	ldrh	r3, [r7, #6]
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f001 fd3c 	bl	800be68 <pvPortMalloc>
 800a3f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00e      	beq.n	800a416 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a3f8:	205c      	movs	r0, #92	; 0x5c
 800a3fa:	f001 fd35 	bl	800be68 <pvPortMalloc>
 800a3fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d003      	beq.n	800a40e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	697a      	ldr	r2, [r7, #20]
 800a40a:	631a      	str	r2, [r3, #48]	; 0x30
 800a40c:	e005      	b.n	800a41a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a40e:	6978      	ldr	r0, [r7, #20]
 800a410:	f001 fdf6 	bl	800c000 <vPortFree>
 800a414:	e001      	b.n	800a41a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a416:	2300      	movs	r3, #0
 800a418:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d017      	beq.n	800a450 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	2200      	movs	r2, #0
 800a424:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a428:	88fa      	ldrh	r2, [r7, #6]
 800a42a:	2300      	movs	r3, #0
 800a42c:	9303      	str	r3, [sp, #12]
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	9302      	str	r3, [sp, #8]
 800a432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a434:	9301      	str	r3, [sp, #4]
 800a436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a438:	9300      	str	r3, [sp, #0]
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	68b9      	ldr	r1, [r7, #8]
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f000 f80e 	bl	800a460 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a444:	69f8      	ldr	r0, [r7, #28]
 800a446:	f000 f89b 	bl	800a580 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a44a:	2301      	movs	r3, #1
 800a44c:	61bb      	str	r3, [r7, #24]
 800a44e:	e002      	b.n	800a456 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a450:	f04f 33ff 	mov.w	r3, #4294967295
 800a454:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a456:	69bb      	ldr	r3, [r7, #24]
	}
 800a458:	4618      	mov	r0, r3
 800a45a:	3720      	adds	r7, #32
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b088      	sub	sp, #32
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
 800a46c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a470:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	461a      	mov	r2, r3
 800a478:	21a5      	movs	r1, #165	; 0xa5
 800a47a:	f001 ff1b 	bl	800c2b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a488:	3b01      	subs	r3, #1
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	4413      	add	r3, r2
 800a48e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	f023 0307 	bic.w	r3, r3, #7
 800a496:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	f003 0307 	and.w	r3, r3, #7
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d00a      	beq.n	800a4b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	617b      	str	r3, [r7, #20]
}
 800a4b4:	bf00      	nop
 800a4b6:	e7fe      	b.n	800a4b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d01f      	beq.n	800a4fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a4be:	2300      	movs	r3, #0
 800a4c0:	61fb      	str	r3, [r7, #28]
 800a4c2:	e012      	b.n	800a4ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a4c4:	68ba      	ldr	r2, [r7, #8]
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	7819      	ldrb	r1, [r3, #0]
 800a4cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	3334      	adds	r3, #52	; 0x34
 800a4d4:	460a      	mov	r2, r1
 800a4d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	69fb      	ldr	r3, [r7, #28]
 800a4dc:	4413      	add	r3, r2
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d006      	beq.n	800a4f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	61fb      	str	r3, [r7, #28]
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	2b0f      	cmp	r3, #15
 800a4ee:	d9e9      	bls.n	800a4c4 <prvInitialiseNewTask+0x64>
 800a4f0:	e000      	b.n	800a4f4 <prvInitialiseNewTask+0x94>
			{
				break;
 800a4f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a4fc:	e003      	b.n	800a506 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a500:	2200      	movs	r2, #0
 800a502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a508:	2b37      	cmp	r3, #55	; 0x37
 800a50a:	d901      	bls.n	800a510 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a50c:	2337      	movs	r3, #55	; 0x37
 800a50e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a514:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a51a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51e:	2200      	movs	r2, #0
 800a520:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a524:	3304      	adds	r3, #4
 800a526:	4618      	mov	r0, r3
 800a528:	f7fe ff64 	bl	80093f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52e:	3318      	adds	r3, #24
 800a530:	4618      	mov	r0, r3
 800a532:	f7fe ff5f 	bl	80093f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a53a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a544:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a54a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54e:	2200      	movs	r2, #0
 800a550:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a554:	2200      	movs	r2, #0
 800a556:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a55a:	683a      	ldr	r2, [r7, #0]
 800a55c:	68f9      	ldr	r1, [r7, #12]
 800a55e:	69b8      	ldr	r0, [r7, #24]
 800a560:	f001 fa36 	bl	800b9d0 <pxPortInitialiseStack>
 800a564:	4602      	mov	r2, r0
 800a566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a568:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d002      	beq.n	800a576 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a576:	bf00      	nop
 800a578:	3720      	adds	r7, #32
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
	...

0800a580 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a588:	f001 fb4c 	bl	800bc24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a58c:	4b2d      	ldr	r3, [pc, #180]	; (800a644 <prvAddNewTaskToReadyList+0xc4>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	3301      	adds	r3, #1
 800a592:	4a2c      	ldr	r2, [pc, #176]	; (800a644 <prvAddNewTaskToReadyList+0xc4>)
 800a594:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a596:	4b2c      	ldr	r3, [pc, #176]	; (800a648 <prvAddNewTaskToReadyList+0xc8>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d109      	bne.n	800a5b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a59e:	4a2a      	ldr	r2, [pc, #168]	; (800a648 <prvAddNewTaskToReadyList+0xc8>)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a5a4:	4b27      	ldr	r3, [pc, #156]	; (800a644 <prvAddNewTaskToReadyList+0xc4>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d110      	bne.n	800a5ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a5ac:	f000 fc16 	bl	800addc <prvInitialiseTaskLists>
 800a5b0:	e00d      	b.n	800a5ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a5b2:	4b26      	ldr	r3, [pc, #152]	; (800a64c <prvAddNewTaskToReadyList+0xcc>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d109      	bne.n	800a5ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a5ba:	4b23      	ldr	r3, [pc, #140]	; (800a648 <prvAddNewTaskToReadyList+0xc8>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d802      	bhi.n	800a5ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a5c8:	4a1f      	ldr	r2, [pc, #124]	; (800a648 <prvAddNewTaskToReadyList+0xc8>)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a5ce:	4b20      	ldr	r3, [pc, #128]	; (800a650 <prvAddNewTaskToReadyList+0xd0>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	4a1e      	ldr	r2, [pc, #120]	; (800a650 <prvAddNewTaskToReadyList+0xd0>)
 800a5d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a5d8:	4b1d      	ldr	r3, [pc, #116]	; (800a650 <prvAddNewTaskToReadyList+0xd0>)
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5e4:	4b1b      	ldr	r3, [pc, #108]	; (800a654 <prvAddNewTaskToReadyList+0xd4>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d903      	bls.n	800a5f4 <prvAddNewTaskToReadyList+0x74>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f0:	4a18      	ldr	r2, [pc, #96]	; (800a654 <prvAddNewTaskToReadyList+0xd4>)
 800a5f2:	6013      	str	r3, [r2, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	4413      	add	r3, r2
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	4a15      	ldr	r2, [pc, #84]	; (800a658 <prvAddNewTaskToReadyList+0xd8>)
 800a602:	441a      	add	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	3304      	adds	r3, #4
 800a608:	4619      	mov	r1, r3
 800a60a:	4610      	mov	r0, r2
 800a60c:	f7fe feff 	bl	800940e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a610:	f001 fb38 	bl	800bc84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a614:	4b0d      	ldr	r3, [pc, #52]	; (800a64c <prvAddNewTaskToReadyList+0xcc>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00e      	beq.n	800a63a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a61c:	4b0a      	ldr	r3, [pc, #40]	; (800a648 <prvAddNewTaskToReadyList+0xc8>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a626:	429a      	cmp	r2, r3
 800a628:	d207      	bcs.n	800a63a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a62a:	4b0c      	ldr	r3, [pc, #48]	; (800a65c <prvAddNewTaskToReadyList+0xdc>)
 800a62c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a630:	601a      	str	r2, [r3, #0]
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a63a:	bf00      	nop
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	200011f0 	.word	0x200011f0
 800a648:	20000d1c 	.word	0x20000d1c
 800a64c:	200011fc 	.word	0x200011fc
 800a650:	2000120c 	.word	0x2000120c
 800a654:	200011f8 	.word	0x200011f8
 800a658:	20000d20 	.word	0x20000d20
 800a65c:	e000ed04 	.word	0xe000ed04

0800a660 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a668:	2300      	movs	r3, #0
 800a66a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d017      	beq.n	800a6a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a672:	4b13      	ldr	r3, [pc, #76]	; (800a6c0 <vTaskDelay+0x60>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00a      	beq.n	800a690 <vTaskDelay+0x30>
	__asm volatile
 800a67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67e:	f383 8811 	msr	BASEPRI, r3
 800a682:	f3bf 8f6f 	isb	sy
 800a686:	f3bf 8f4f 	dsb	sy
 800a68a:	60bb      	str	r3, [r7, #8]
}
 800a68c:	bf00      	nop
 800a68e:	e7fe      	b.n	800a68e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a690:	f000 f880 	bl	800a794 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a694:	2100      	movs	r1, #0
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 fdf8 	bl	800b28c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a69c:	f000 f888 	bl	800a7b0 <xTaskResumeAll>
 800a6a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d107      	bne.n	800a6b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a6a8:	4b06      	ldr	r3, [pc, #24]	; (800a6c4 <vTaskDelay+0x64>)
 800a6aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6ae:	601a      	str	r2, [r3, #0]
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a6b8:	bf00      	nop
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	20001218 	.word	0x20001218
 800a6c4:	e000ed04 	.word	0xe000ed04

0800a6c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b08a      	sub	sp, #40	; 0x28
 800a6cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a6d6:	463a      	mov	r2, r7
 800a6d8:	1d39      	adds	r1, r7, #4
 800a6da:	f107 0308 	add.w	r3, r7, #8
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7fe fe34 	bl	800934c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a6e4:	6839      	ldr	r1, [r7, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	68ba      	ldr	r2, [r7, #8]
 800a6ea:	9202      	str	r2, [sp, #8]
 800a6ec:	9301      	str	r3, [sp, #4]
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	9300      	str	r3, [sp, #0]
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	460a      	mov	r2, r1
 800a6f6:	4921      	ldr	r1, [pc, #132]	; (800a77c <vTaskStartScheduler+0xb4>)
 800a6f8:	4821      	ldr	r0, [pc, #132]	; (800a780 <vTaskStartScheduler+0xb8>)
 800a6fa:	f7ff fe0f 	bl	800a31c <xTaskCreateStatic>
 800a6fe:	4603      	mov	r3, r0
 800a700:	4a20      	ldr	r2, [pc, #128]	; (800a784 <vTaskStartScheduler+0xbc>)
 800a702:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a704:	4b1f      	ldr	r3, [pc, #124]	; (800a784 <vTaskStartScheduler+0xbc>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d002      	beq.n	800a712 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a70c:	2301      	movs	r3, #1
 800a70e:	617b      	str	r3, [r7, #20]
 800a710:	e001      	b.n	800a716 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a712:	2300      	movs	r3, #0
 800a714:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d102      	bne.n	800a722 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a71c:	f000 fe0a 	bl	800b334 <xTimerCreateTimerTask>
 800a720:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	2b01      	cmp	r3, #1
 800a726:	d116      	bne.n	800a756 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	613b      	str	r3, [r7, #16]
}
 800a73a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a73c:	4b12      	ldr	r3, [pc, #72]	; (800a788 <vTaskStartScheduler+0xc0>)
 800a73e:	f04f 32ff 	mov.w	r2, #4294967295
 800a742:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a744:	4b11      	ldr	r3, [pc, #68]	; (800a78c <vTaskStartScheduler+0xc4>)
 800a746:	2201      	movs	r2, #1
 800a748:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a74a:	4b11      	ldr	r3, [pc, #68]	; (800a790 <vTaskStartScheduler+0xc8>)
 800a74c:	2200      	movs	r2, #0
 800a74e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a750:	f001 f9c6 	bl	800bae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a754:	e00e      	b.n	800a774 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a75c:	d10a      	bne.n	800a774 <vTaskStartScheduler+0xac>
	__asm volatile
 800a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	60fb      	str	r3, [r7, #12]
}
 800a770:	bf00      	nop
 800a772:	e7fe      	b.n	800a772 <vTaskStartScheduler+0xaa>
}
 800a774:	bf00      	nop
 800a776:	3718      	adds	r7, #24
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	0800d9a4 	.word	0x0800d9a4
 800a780:	0800adad 	.word	0x0800adad
 800a784:	20001214 	.word	0x20001214
 800a788:	20001210 	.word	0x20001210
 800a78c:	200011fc 	.word	0x200011fc
 800a790:	200011f4 	.word	0x200011f4

0800a794 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a794:	b480      	push	{r7}
 800a796:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a798:	4b04      	ldr	r3, [pc, #16]	; (800a7ac <vTaskSuspendAll+0x18>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	3301      	adds	r3, #1
 800a79e:	4a03      	ldr	r2, [pc, #12]	; (800a7ac <vTaskSuspendAll+0x18>)
 800a7a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a7a2:	bf00      	nop
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr
 800a7ac:	20001218 	.word	0x20001218

0800a7b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a7be:	4b42      	ldr	r3, [pc, #264]	; (800a8c8 <xTaskResumeAll+0x118>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10a      	bne.n	800a7dc <xTaskResumeAll+0x2c>
	__asm volatile
 800a7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ca:	f383 8811 	msr	BASEPRI, r3
 800a7ce:	f3bf 8f6f 	isb	sy
 800a7d2:	f3bf 8f4f 	dsb	sy
 800a7d6:	603b      	str	r3, [r7, #0]
}
 800a7d8:	bf00      	nop
 800a7da:	e7fe      	b.n	800a7da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a7dc:	f001 fa22 	bl	800bc24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a7e0:	4b39      	ldr	r3, [pc, #228]	; (800a8c8 <xTaskResumeAll+0x118>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	4a38      	ldr	r2, [pc, #224]	; (800a8c8 <xTaskResumeAll+0x118>)
 800a7e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7ea:	4b37      	ldr	r3, [pc, #220]	; (800a8c8 <xTaskResumeAll+0x118>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d162      	bne.n	800a8b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a7f2:	4b36      	ldr	r3, [pc, #216]	; (800a8cc <xTaskResumeAll+0x11c>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d05e      	beq.n	800a8b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a7fa:	e02f      	b.n	800a85c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7fc:	4b34      	ldr	r3, [pc, #208]	; (800a8d0 <xTaskResumeAll+0x120>)
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	3318      	adds	r3, #24
 800a808:	4618      	mov	r0, r3
 800a80a:	f7fe fe5d 	bl	80094c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	3304      	adds	r3, #4
 800a812:	4618      	mov	r0, r3
 800a814:	f7fe fe58 	bl	80094c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a81c:	4b2d      	ldr	r3, [pc, #180]	; (800a8d4 <xTaskResumeAll+0x124>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	429a      	cmp	r2, r3
 800a822:	d903      	bls.n	800a82c <xTaskResumeAll+0x7c>
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a828:	4a2a      	ldr	r2, [pc, #168]	; (800a8d4 <xTaskResumeAll+0x124>)
 800a82a:	6013      	str	r3, [r2, #0]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a830:	4613      	mov	r3, r2
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	4413      	add	r3, r2
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	4a27      	ldr	r2, [pc, #156]	; (800a8d8 <xTaskResumeAll+0x128>)
 800a83a:	441a      	add	r2, r3
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	3304      	adds	r3, #4
 800a840:	4619      	mov	r1, r3
 800a842:	4610      	mov	r0, r2
 800a844:	f7fe fde3 	bl	800940e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a84c:	4b23      	ldr	r3, [pc, #140]	; (800a8dc <xTaskResumeAll+0x12c>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a852:	429a      	cmp	r2, r3
 800a854:	d302      	bcc.n	800a85c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a856:	4b22      	ldr	r3, [pc, #136]	; (800a8e0 <xTaskResumeAll+0x130>)
 800a858:	2201      	movs	r2, #1
 800a85a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a85c:	4b1c      	ldr	r3, [pc, #112]	; (800a8d0 <xTaskResumeAll+0x120>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d1cb      	bne.n	800a7fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d001      	beq.n	800a86e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a86a:	f000 fb55 	bl	800af18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a86e:	4b1d      	ldr	r3, [pc, #116]	; (800a8e4 <xTaskResumeAll+0x134>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d010      	beq.n	800a89c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a87a:	f000 f847 	bl	800a90c <xTaskIncrementTick>
 800a87e:	4603      	mov	r3, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d002      	beq.n	800a88a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a884:	4b16      	ldr	r3, [pc, #88]	; (800a8e0 <xTaskResumeAll+0x130>)
 800a886:	2201      	movs	r2, #1
 800a888:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	3b01      	subs	r3, #1
 800a88e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1f1      	bne.n	800a87a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a896:	4b13      	ldr	r3, [pc, #76]	; (800a8e4 <xTaskResumeAll+0x134>)
 800a898:	2200      	movs	r2, #0
 800a89a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a89c:	4b10      	ldr	r3, [pc, #64]	; (800a8e0 <xTaskResumeAll+0x130>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d009      	beq.n	800a8b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a8a8:	4b0f      	ldr	r3, [pc, #60]	; (800a8e8 <xTaskResumeAll+0x138>)
 800a8aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ae:	601a      	str	r2, [r3, #0]
 800a8b0:	f3bf 8f4f 	dsb	sy
 800a8b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a8b8:	f001 f9e4 	bl	800bc84 <vPortExitCritical>

	return xAlreadyYielded;
 800a8bc:	68bb      	ldr	r3, [r7, #8]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	20001218 	.word	0x20001218
 800a8cc:	200011f0 	.word	0x200011f0
 800a8d0:	200011b0 	.word	0x200011b0
 800a8d4:	200011f8 	.word	0x200011f8
 800a8d8:	20000d20 	.word	0x20000d20
 800a8dc:	20000d1c 	.word	0x20000d1c
 800a8e0:	20001204 	.word	0x20001204
 800a8e4:	20001200 	.word	0x20001200
 800a8e8:	e000ed04 	.word	0xe000ed04

0800a8ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b083      	sub	sp, #12
 800a8f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a8f2:	4b05      	ldr	r3, [pc, #20]	; (800a908 <xTaskGetTickCount+0x1c>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a8f8:	687b      	ldr	r3, [r7, #4]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	370c      	adds	r7, #12
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	200011f4 	.word	0x200011f4

0800a90c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b086      	sub	sp, #24
 800a910:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a912:	2300      	movs	r3, #0
 800a914:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a916:	4b4f      	ldr	r3, [pc, #316]	; (800aa54 <xTaskIncrementTick+0x148>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	f040 808f 	bne.w	800aa3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a920:	4b4d      	ldr	r3, [pc, #308]	; (800aa58 <xTaskIncrementTick+0x14c>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	3301      	adds	r3, #1
 800a926:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a928:	4a4b      	ldr	r2, [pc, #300]	; (800aa58 <xTaskIncrementTick+0x14c>)
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d120      	bne.n	800a976 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a934:	4b49      	ldr	r3, [pc, #292]	; (800aa5c <xTaskIncrementTick+0x150>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00a      	beq.n	800a954 <xTaskIncrementTick+0x48>
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	603b      	str	r3, [r7, #0]
}
 800a950:	bf00      	nop
 800a952:	e7fe      	b.n	800a952 <xTaskIncrementTick+0x46>
 800a954:	4b41      	ldr	r3, [pc, #260]	; (800aa5c <xTaskIncrementTick+0x150>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	60fb      	str	r3, [r7, #12]
 800a95a:	4b41      	ldr	r3, [pc, #260]	; (800aa60 <xTaskIncrementTick+0x154>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a3f      	ldr	r2, [pc, #252]	; (800aa5c <xTaskIncrementTick+0x150>)
 800a960:	6013      	str	r3, [r2, #0]
 800a962:	4a3f      	ldr	r2, [pc, #252]	; (800aa60 <xTaskIncrementTick+0x154>)
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	6013      	str	r3, [r2, #0]
 800a968:	4b3e      	ldr	r3, [pc, #248]	; (800aa64 <xTaskIncrementTick+0x158>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	3301      	adds	r3, #1
 800a96e:	4a3d      	ldr	r2, [pc, #244]	; (800aa64 <xTaskIncrementTick+0x158>)
 800a970:	6013      	str	r3, [r2, #0]
 800a972:	f000 fad1 	bl	800af18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a976:	4b3c      	ldr	r3, [pc, #240]	; (800aa68 <xTaskIncrementTick+0x15c>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	693a      	ldr	r2, [r7, #16]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d349      	bcc.n	800aa14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a980:	4b36      	ldr	r3, [pc, #216]	; (800aa5c <xTaskIncrementTick+0x150>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d104      	bne.n	800a994 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a98a:	4b37      	ldr	r3, [pc, #220]	; (800aa68 <xTaskIncrementTick+0x15c>)
 800a98c:	f04f 32ff 	mov.w	r2, #4294967295
 800a990:	601a      	str	r2, [r3, #0]
					break;
 800a992:	e03f      	b.n	800aa14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a994:	4b31      	ldr	r3, [pc, #196]	; (800aa5c <xTaskIncrementTick+0x150>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a9a4:	693a      	ldr	r2, [r7, #16]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d203      	bcs.n	800a9b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a9ac:	4a2e      	ldr	r2, [pc, #184]	; (800aa68 <xTaskIncrementTick+0x15c>)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a9b2:	e02f      	b.n	800aa14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	3304      	adds	r3, #4
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7fe fd85 	bl	80094c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d004      	beq.n	800a9d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	3318      	adds	r3, #24
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fe fd7c 	bl	80094c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d4:	4b25      	ldr	r3, [pc, #148]	; (800aa6c <xTaskIncrementTick+0x160>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d903      	bls.n	800a9e4 <xTaskIncrementTick+0xd8>
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e0:	4a22      	ldr	r2, [pc, #136]	; (800aa6c <xTaskIncrementTick+0x160>)
 800a9e2:	6013      	str	r3, [r2, #0]
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	4413      	add	r3, r2
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	4a1f      	ldr	r2, [pc, #124]	; (800aa70 <xTaskIncrementTick+0x164>)
 800a9f2:	441a      	add	r2, r3
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	3304      	adds	r3, #4
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	4610      	mov	r0, r2
 800a9fc:	f7fe fd07 	bl	800940e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa04:	4b1b      	ldr	r3, [pc, #108]	; (800aa74 <xTaskIncrementTick+0x168>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d3b8      	bcc.n	800a980 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa12:	e7b5      	b.n	800a980 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa14:	4b17      	ldr	r3, [pc, #92]	; (800aa74 <xTaskIncrementTick+0x168>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa1a:	4915      	ldr	r1, [pc, #84]	; (800aa70 <xTaskIncrementTick+0x164>)
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	4413      	add	r3, r2
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	440b      	add	r3, r1
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	d901      	bls.n	800aa30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aa30:	4b11      	ldr	r3, [pc, #68]	; (800aa78 <xTaskIncrementTick+0x16c>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d007      	beq.n	800aa48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	617b      	str	r3, [r7, #20]
 800aa3c:	e004      	b.n	800aa48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aa3e:	4b0f      	ldr	r3, [pc, #60]	; (800aa7c <xTaskIncrementTick+0x170>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	3301      	adds	r3, #1
 800aa44:	4a0d      	ldr	r2, [pc, #52]	; (800aa7c <xTaskIncrementTick+0x170>)
 800aa46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aa48:	697b      	ldr	r3, [r7, #20]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3718      	adds	r7, #24
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	20001218 	.word	0x20001218
 800aa58:	200011f4 	.word	0x200011f4
 800aa5c:	200011a8 	.word	0x200011a8
 800aa60:	200011ac 	.word	0x200011ac
 800aa64:	20001208 	.word	0x20001208
 800aa68:	20001210 	.word	0x20001210
 800aa6c:	200011f8 	.word	0x200011f8
 800aa70:	20000d20 	.word	0x20000d20
 800aa74:	20000d1c 	.word	0x20000d1c
 800aa78:	20001204 	.word	0x20001204
 800aa7c:	20001200 	.word	0x20001200

0800aa80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aa80:	b480      	push	{r7}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa86:	4b28      	ldr	r3, [pc, #160]	; (800ab28 <vTaskSwitchContext+0xa8>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d003      	beq.n	800aa96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aa8e:	4b27      	ldr	r3, [pc, #156]	; (800ab2c <vTaskSwitchContext+0xac>)
 800aa90:	2201      	movs	r2, #1
 800aa92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aa94:	e041      	b.n	800ab1a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800aa96:	4b25      	ldr	r3, [pc, #148]	; (800ab2c <vTaskSwitchContext+0xac>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa9c:	4b24      	ldr	r3, [pc, #144]	; (800ab30 <vTaskSwitchContext+0xb0>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	60fb      	str	r3, [r7, #12]
 800aaa2:	e010      	b.n	800aac6 <vTaskSwitchContext+0x46>
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d10a      	bne.n	800aac0 <vTaskSwitchContext+0x40>
	__asm volatile
 800aaaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaae:	f383 8811 	msr	BASEPRI, r3
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	607b      	str	r3, [r7, #4]
}
 800aabc:	bf00      	nop
 800aabe:	e7fe      	b.n	800aabe <vTaskSwitchContext+0x3e>
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	3b01      	subs	r3, #1
 800aac4:	60fb      	str	r3, [r7, #12]
 800aac6:	491b      	ldr	r1, [pc, #108]	; (800ab34 <vTaskSwitchContext+0xb4>)
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	4613      	mov	r3, r2
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	4413      	add	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	440b      	add	r3, r1
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d0e4      	beq.n	800aaa4 <vTaskSwitchContext+0x24>
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	4613      	mov	r3, r2
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	4413      	add	r3, r2
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	4a13      	ldr	r2, [pc, #76]	; (800ab34 <vTaskSwitchContext+0xb4>)
 800aae6:	4413      	add	r3, r2
 800aae8:	60bb      	str	r3, [r7, #8]
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	685a      	ldr	r2, [r3, #4]
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	605a      	str	r2, [r3, #4]
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	685a      	ldr	r2, [r3, #4]
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	3308      	adds	r3, #8
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d104      	bne.n	800ab0a <vTaskSwitchContext+0x8a>
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	685a      	ldr	r2, [r3, #4]
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	605a      	str	r2, [r3, #4]
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	4a09      	ldr	r2, [pc, #36]	; (800ab38 <vTaskSwitchContext+0xb8>)
 800ab12:	6013      	str	r3, [r2, #0]
 800ab14:	4a06      	ldr	r2, [pc, #24]	; (800ab30 <vTaskSwitchContext+0xb0>)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	6013      	str	r3, [r2, #0]
}
 800ab1a:	bf00      	nop
 800ab1c:	3714      	adds	r7, #20
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	20001218 	.word	0x20001218
 800ab2c:	20001204 	.word	0x20001204
 800ab30:	200011f8 	.word	0x200011f8
 800ab34:	20000d20 	.word	0x20000d20
 800ab38:	20000d1c 	.word	0x20000d1c

0800ab3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d10a      	bne.n	800ab62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ab4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab50:	f383 8811 	msr	BASEPRI, r3
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	60fb      	str	r3, [r7, #12]
}
 800ab5e:	bf00      	nop
 800ab60:	e7fe      	b.n	800ab60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab62:	4b07      	ldr	r3, [pc, #28]	; (800ab80 <vTaskPlaceOnEventList+0x44>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	3318      	adds	r3, #24
 800ab68:	4619      	mov	r1, r3
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f7fe fc73 	bl	8009456 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab70:	2101      	movs	r1, #1
 800ab72:	6838      	ldr	r0, [r7, #0]
 800ab74:	f000 fb8a 	bl	800b28c <prvAddCurrentTaskToDelayedList>
}
 800ab78:	bf00      	nop
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	20000d1c 	.word	0x20000d1c

0800ab84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d10a      	bne.n	800abac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ab96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9a:	f383 8811 	msr	BASEPRI, r3
 800ab9e:	f3bf 8f6f 	isb	sy
 800aba2:	f3bf 8f4f 	dsb	sy
 800aba6:	617b      	str	r3, [r7, #20]
}
 800aba8:	bf00      	nop
 800abaa:	e7fe      	b.n	800abaa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800abac:	4b0a      	ldr	r3, [pc, #40]	; (800abd8 <vTaskPlaceOnEventListRestricted+0x54>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	3318      	adds	r3, #24
 800abb2:	4619      	mov	r1, r3
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	f7fe fc2a 	bl	800940e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d002      	beq.n	800abc6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800abc0:	f04f 33ff 	mov.w	r3, #4294967295
 800abc4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800abc6:	6879      	ldr	r1, [r7, #4]
 800abc8:	68b8      	ldr	r0, [r7, #8]
 800abca:	f000 fb5f 	bl	800b28c <prvAddCurrentTaskToDelayedList>
	}
 800abce:	bf00      	nop
 800abd0:	3718      	adds	r7, #24
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	20000d1c 	.word	0x20000d1c

0800abdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b086      	sub	sp, #24
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d10a      	bne.n	800ac08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800abf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf6:	f383 8811 	msr	BASEPRI, r3
 800abfa:	f3bf 8f6f 	isb	sy
 800abfe:	f3bf 8f4f 	dsb	sy
 800ac02:	60fb      	str	r3, [r7, #12]
}
 800ac04:	bf00      	nop
 800ac06:	e7fe      	b.n	800ac06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	3318      	adds	r3, #24
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7fe fc5b 	bl	80094c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac12:	4b1e      	ldr	r3, [pc, #120]	; (800ac8c <xTaskRemoveFromEventList+0xb0>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d11d      	bne.n	800ac56 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	3304      	adds	r3, #4
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7fe fc52 	bl	80094c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac28:	4b19      	ldr	r3, [pc, #100]	; (800ac90 <xTaskRemoveFromEventList+0xb4>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d903      	bls.n	800ac38 <xTaskRemoveFromEventList+0x5c>
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac34:	4a16      	ldr	r2, [pc, #88]	; (800ac90 <xTaskRemoveFromEventList+0xb4>)
 800ac36:	6013      	str	r3, [r2, #0]
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac3c:	4613      	mov	r3, r2
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	4413      	add	r3, r2
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	4a13      	ldr	r2, [pc, #76]	; (800ac94 <xTaskRemoveFromEventList+0xb8>)
 800ac46:	441a      	add	r2, r3
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	3304      	adds	r3, #4
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	4610      	mov	r0, r2
 800ac50:	f7fe fbdd 	bl	800940e <vListInsertEnd>
 800ac54:	e005      	b.n	800ac62 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	3318      	adds	r3, #24
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	480e      	ldr	r0, [pc, #56]	; (800ac98 <xTaskRemoveFromEventList+0xbc>)
 800ac5e:	f7fe fbd6 	bl	800940e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac66:	4b0d      	ldr	r3, [pc, #52]	; (800ac9c <xTaskRemoveFromEventList+0xc0>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d905      	bls.n	800ac7c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ac70:	2301      	movs	r3, #1
 800ac72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ac74:	4b0a      	ldr	r3, [pc, #40]	; (800aca0 <xTaskRemoveFromEventList+0xc4>)
 800ac76:	2201      	movs	r2, #1
 800ac78:	601a      	str	r2, [r3, #0]
 800ac7a:	e001      	b.n	800ac80 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ac80:	697b      	ldr	r3, [r7, #20]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3718      	adds	r7, #24
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	20001218 	.word	0x20001218
 800ac90:	200011f8 	.word	0x200011f8
 800ac94:	20000d20 	.word	0x20000d20
 800ac98:	200011b0 	.word	0x200011b0
 800ac9c:	20000d1c 	.word	0x20000d1c
 800aca0:	20001204 	.word	0x20001204

0800aca4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800acac:	4b06      	ldr	r3, [pc, #24]	; (800acc8 <vTaskInternalSetTimeOutState+0x24>)
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800acb4:	4b05      	ldr	r3, [pc, #20]	; (800accc <vTaskInternalSetTimeOutState+0x28>)
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	605a      	str	r2, [r3, #4]
}
 800acbc:	bf00      	nop
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr
 800acc8:	20001208 	.word	0x20001208
 800accc:	200011f4 	.word	0x200011f4

0800acd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b088      	sub	sp, #32
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d10a      	bne.n	800acf6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ace0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace4:	f383 8811 	msr	BASEPRI, r3
 800ace8:	f3bf 8f6f 	isb	sy
 800acec:	f3bf 8f4f 	dsb	sy
 800acf0:	613b      	str	r3, [r7, #16]
}
 800acf2:	bf00      	nop
 800acf4:	e7fe      	b.n	800acf4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10a      	bne.n	800ad12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800acfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad00:	f383 8811 	msr	BASEPRI, r3
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	60fb      	str	r3, [r7, #12]
}
 800ad0e:	bf00      	nop
 800ad10:	e7fe      	b.n	800ad10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ad12:	f000 ff87 	bl	800bc24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ad16:	4b1d      	ldr	r3, [pc, #116]	; (800ad8c <xTaskCheckForTimeOut+0xbc>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	69ba      	ldr	r2, [r7, #24]
 800ad22:	1ad3      	subs	r3, r2, r3
 800ad24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad2e:	d102      	bne.n	800ad36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ad30:	2300      	movs	r3, #0
 800ad32:	61fb      	str	r3, [r7, #28]
 800ad34:	e023      	b.n	800ad7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	4b15      	ldr	r3, [pc, #84]	; (800ad90 <xTaskCheckForTimeOut+0xc0>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d007      	beq.n	800ad52 <xTaskCheckForTimeOut+0x82>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	69ba      	ldr	r2, [r7, #24]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d302      	bcc.n	800ad52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	61fb      	str	r3, [r7, #28]
 800ad50:	e015      	b.n	800ad7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	697a      	ldr	r2, [r7, #20]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d20b      	bcs.n	800ad74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	1ad2      	subs	r2, r2, r3
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f7ff ff9b 	bl	800aca4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	61fb      	str	r3, [r7, #28]
 800ad72:	e004      	b.n	800ad7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	2200      	movs	r2, #0
 800ad78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ad7e:	f000 ff81 	bl	800bc84 <vPortExitCritical>

	return xReturn;
 800ad82:	69fb      	ldr	r3, [r7, #28]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3720      	adds	r7, #32
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	200011f4 	.word	0x200011f4
 800ad90:	20001208 	.word	0x20001208

0800ad94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ad94:	b480      	push	{r7}
 800ad96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ad98:	4b03      	ldr	r3, [pc, #12]	; (800ada8 <vTaskMissedYield+0x14>)
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	601a      	str	r2, [r3, #0]
}
 800ad9e:	bf00      	nop
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr
 800ada8:	20001204 	.word	0x20001204

0800adac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800adb4:	f000 f852 	bl	800ae5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800adb8:	4b06      	ldr	r3, [pc, #24]	; (800add4 <prvIdleTask+0x28>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d9f9      	bls.n	800adb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800adc0:	4b05      	ldr	r3, [pc, #20]	; (800add8 <prvIdleTask+0x2c>)
 800adc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adc6:	601a      	str	r2, [r3, #0]
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800add0:	e7f0      	b.n	800adb4 <prvIdleTask+0x8>
 800add2:	bf00      	nop
 800add4:	20000d20 	.word	0x20000d20
 800add8:	e000ed04 	.word	0xe000ed04

0800addc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ade2:	2300      	movs	r3, #0
 800ade4:	607b      	str	r3, [r7, #4]
 800ade6:	e00c      	b.n	800ae02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	4613      	mov	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	4413      	add	r3, r2
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	4a12      	ldr	r2, [pc, #72]	; (800ae3c <prvInitialiseTaskLists+0x60>)
 800adf4:	4413      	add	r3, r2
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7fe fadc 	bl	80093b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	3301      	adds	r3, #1
 800ae00:	607b      	str	r3, [r7, #4]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2b37      	cmp	r3, #55	; 0x37
 800ae06:	d9ef      	bls.n	800ade8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ae08:	480d      	ldr	r0, [pc, #52]	; (800ae40 <prvInitialiseTaskLists+0x64>)
 800ae0a:	f7fe fad3 	bl	80093b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ae0e:	480d      	ldr	r0, [pc, #52]	; (800ae44 <prvInitialiseTaskLists+0x68>)
 800ae10:	f7fe fad0 	bl	80093b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ae14:	480c      	ldr	r0, [pc, #48]	; (800ae48 <prvInitialiseTaskLists+0x6c>)
 800ae16:	f7fe facd 	bl	80093b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ae1a:	480c      	ldr	r0, [pc, #48]	; (800ae4c <prvInitialiseTaskLists+0x70>)
 800ae1c:	f7fe faca 	bl	80093b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ae20:	480b      	ldr	r0, [pc, #44]	; (800ae50 <prvInitialiseTaskLists+0x74>)
 800ae22:	f7fe fac7 	bl	80093b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ae26:	4b0b      	ldr	r3, [pc, #44]	; (800ae54 <prvInitialiseTaskLists+0x78>)
 800ae28:	4a05      	ldr	r2, [pc, #20]	; (800ae40 <prvInitialiseTaskLists+0x64>)
 800ae2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ae2c:	4b0a      	ldr	r3, [pc, #40]	; (800ae58 <prvInitialiseTaskLists+0x7c>)
 800ae2e:	4a05      	ldr	r2, [pc, #20]	; (800ae44 <prvInitialiseTaskLists+0x68>)
 800ae30:	601a      	str	r2, [r3, #0]
}
 800ae32:	bf00      	nop
 800ae34:	3708      	adds	r7, #8
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	20000d20 	.word	0x20000d20
 800ae40:	20001180 	.word	0x20001180
 800ae44:	20001194 	.word	0x20001194
 800ae48:	200011b0 	.word	0x200011b0
 800ae4c:	200011c4 	.word	0x200011c4
 800ae50:	200011dc 	.word	0x200011dc
 800ae54:	200011a8 	.word	0x200011a8
 800ae58:	200011ac 	.word	0x200011ac

0800ae5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae62:	e019      	b.n	800ae98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ae64:	f000 fede 	bl	800bc24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae68:	4b10      	ldr	r3, [pc, #64]	; (800aeac <prvCheckTasksWaitingTermination+0x50>)
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	3304      	adds	r3, #4
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7fe fb27 	bl	80094c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ae7a:	4b0d      	ldr	r3, [pc, #52]	; (800aeb0 <prvCheckTasksWaitingTermination+0x54>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	4a0b      	ldr	r2, [pc, #44]	; (800aeb0 <prvCheckTasksWaitingTermination+0x54>)
 800ae82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ae84:	4b0b      	ldr	r3, [pc, #44]	; (800aeb4 <prvCheckTasksWaitingTermination+0x58>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	4a0a      	ldr	r2, [pc, #40]	; (800aeb4 <prvCheckTasksWaitingTermination+0x58>)
 800ae8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ae8e:	f000 fef9 	bl	800bc84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 f810 	bl	800aeb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae98:	4b06      	ldr	r3, [pc, #24]	; (800aeb4 <prvCheckTasksWaitingTermination+0x58>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d1e1      	bne.n	800ae64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aea0:	bf00      	nop
 800aea2:	bf00      	nop
 800aea4:	3708      	adds	r7, #8
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	200011c4 	.word	0x200011c4
 800aeb0:	200011f0 	.word	0x200011f0
 800aeb4:	200011d8 	.word	0x200011d8

0800aeb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d108      	bne.n	800aedc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aece:	4618      	mov	r0, r3
 800aed0:	f001 f896 	bl	800c000 <vPortFree>
				vPortFree( pxTCB );
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f001 f893 	bl	800c000 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aeda:	e018      	b.n	800af0e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d103      	bne.n	800aeee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f001 f88a 	bl	800c000 <vPortFree>
	}
 800aeec:	e00f      	b.n	800af0e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d00a      	beq.n	800af0e <prvDeleteTCB+0x56>
	__asm volatile
 800aef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefc:	f383 8811 	msr	BASEPRI, r3
 800af00:	f3bf 8f6f 	isb	sy
 800af04:	f3bf 8f4f 	dsb	sy
 800af08:	60fb      	str	r3, [r7, #12]
}
 800af0a:	bf00      	nop
 800af0c:	e7fe      	b.n	800af0c <prvDeleteTCB+0x54>
	}
 800af0e:	bf00      	nop
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
	...

0800af18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af1e:	4b0c      	ldr	r3, [pc, #48]	; (800af50 <prvResetNextTaskUnblockTime+0x38>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d104      	bne.n	800af32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800af28:	4b0a      	ldr	r3, [pc, #40]	; (800af54 <prvResetNextTaskUnblockTime+0x3c>)
 800af2a:	f04f 32ff 	mov.w	r2, #4294967295
 800af2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800af30:	e008      	b.n	800af44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af32:	4b07      	ldr	r3, [pc, #28]	; (800af50 <prvResetNextTaskUnblockTime+0x38>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	4a04      	ldr	r2, [pc, #16]	; (800af54 <prvResetNextTaskUnblockTime+0x3c>)
 800af42:	6013      	str	r3, [r2, #0]
}
 800af44:	bf00      	nop
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr
 800af50:	200011a8 	.word	0x200011a8
 800af54:	20001210 	.word	0x20001210

0800af58 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800af5e:	4b05      	ldr	r3, [pc, #20]	; (800af74 <xTaskGetCurrentTaskHandle+0x1c>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	607b      	str	r3, [r7, #4]

		return xReturn;
 800af64:	687b      	ldr	r3, [r7, #4]
	}
 800af66:	4618      	mov	r0, r3
 800af68:	370c      	adds	r7, #12
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop
 800af74:	20000d1c 	.word	0x20000d1c

0800af78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800af7e:	4b0b      	ldr	r3, [pc, #44]	; (800afac <xTaskGetSchedulerState+0x34>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d102      	bne.n	800af8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800af86:	2301      	movs	r3, #1
 800af88:	607b      	str	r3, [r7, #4]
 800af8a:	e008      	b.n	800af9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af8c:	4b08      	ldr	r3, [pc, #32]	; (800afb0 <xTaskGetSchedulerState+0x38>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d102      	bne.n	800af9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800af94:	2302      	movs	r3, #2
 800af96:	607b      	str	r3, [r7, #4]
 800af98:	e001      	b.n	800af9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800af9a:	2300      	movs	r3, #0
 800af9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800af9e:	687b      	ldr	r3, [r7, #4]
	}
 800afa0:	4618      	mov	r0, r3
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr
 800afac:	200011fc 	.word	0x200011fc
 800afb0:	20001218 	.word	0x20001218

0800afb4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800afc0:	2300      	movs	r3, #0
 800afc2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d051      	beq.n	800b06e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afce:	4b2a      	ldr	r3, [pc, #168]	; (800b078 <xTaskPriorityInherit+0xc4>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d241      	bcs.n	800b05c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	699b      	ldr	r3, [r3, #24]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	db06      	blt.n	800afee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afe0:	4b25      	ldr	r3, [pc, #148]	; (800b078 <xTaskPriorityInherit+0xc4>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	6959      	ldr	r1, [r3, #20]
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aff6:	4613      	mov	r3, r2
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	4413      	add	r3, r2
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	4a1f      	ldr	r2, [pc, #124]	; (800b07c <xTaskPriorityInherit+0xc8>)
 800b000:	4413      	add	r3, r2
 800b002:	4299      	cmp	r1, r3
 800b004:	d122      	bne.n	800b04c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	3304      	adds	r3, #4
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7fe fa5c 	bl	80094c8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b010:	4b19      	ldr	r3, [pc, #100]	; (800b078 <xTaskPriorityInherit+0xc4>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b01e:	4b18      	ldr	r3, [pc, #96]	; (800b080 <xTaskPriorityInherit+0xcc>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	429a      	cmp	r2, r3
 800b024:	d903      	bls.n	800b02e <xTaskPriorityInherit+0x7a>
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b02a:	4a15      	ldr	r2, [pc, #84]	; (800b080 <xTaskPriorityInherit+0xcc>)
 800b02c:	6013      	str	r3, [r2, #0]
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b032:	4613      	mov	r3, r2
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	4413      	add	r3, r2
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	4a10      	ldr	r2, [pc, #64]	; (800b07c <xTaskPriorityInherit+0xc8>)
 800b03c:	441a      	add	r2, r3
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	3304      	adds	r3, #4
 800b042:	4619      	mov	r1, r3
 800b044:	4610      	mov	r0, r2
 800b046:	f7fe f9e2 	bl	800940e <vListInsertEnd>
 800b04a:	e004      	b.n	800b056 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b04c:	4b0a      	ldr	r3, [pc, #40]	; (800b078 <xTaskPriorityInherit+0xc4>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b056:	2301      	movs	r3, #1
 800b058:	60fb      	str	r3, [r7, #12]
 800b05a:	e008      	b.n	800b06e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b060:	4b05      	ldr	r3, [pc, #20]	; (800b078 <xTaskPriorityInherit+0xc4>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b066:	429a      	cmp	r2, r3
 800b068:	d201      	bcs.n	800b06e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b06a:	2301      	movs	r3, #1
 800b06c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b06e:	68fb      	ldr	r3, [r7, #12]
	}
 800b070:	4618      	mov	r0, r3
 800b072:	3710      	adds	r7, #16
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}
 800b078:	20000d1c 	.word	0x20000d1c
 800b07c:	20000d20 	.word	0x20000d20
 800b080:	200011f8 	.word	0x200011f8

0800b084 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b084:	b580      	push	{r7, lr}
 800b086:	b086      	sub	sp, #24
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b090:	2300      	movs	r3, #0
 800b092:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d056      	beq.n	800b148 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b09a:	4b2e      	ldr	r3, [pc, #184]	; (800b154 <xTaskPriorityDisinherit+0xd0>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	693a      	ldr	r2, [r7, #16]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d00a      	beq.n	800b0ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a8:	f383 8811 	msr	BASEPRI, r3
 800b0ac:	f3bf 8f6f 	isb	sy
 800b0b0:	f3bf 8f4f 	dsb	sy
 800b0b4:	60fb      	str	r3, [r7, #12]
}
 800b0b6:	bf00      	nop
 800b0b8:	e7fe      	b.n	800b0b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d10a      	bne.n	800b0d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c6:	f383 8811 	msr	BASEPRI, r3
 800b0ca:	f3bf 8f6f 	isb	sy
 800b0ce:	f3bf 8f4f 	dsb	sy
 800b0d2:	60bb      	str	r3, [r7, #8]
}
 800b0d4:	bf00      	nop
 800b0d6:	e7fe      	b.n	800b0d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0dc:	1e5a      	subs	r2, r3, #1
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d02c      	beq.n	800b148 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d128      	bne.n	800b148 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	3304      	adds	r3, #4
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7fe f9e4 	bl	80094c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b118:	4b0f      	ldr	r3, [pc, #60]	; (800b158 <xTaskPriorityDisinherit+0xd4>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d903      	bls.n	800b128 <xTaskPriorityDisinherit+0xa4>
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b124:	4a0c      	ldr	r2, [pc, #48]	; (800b158 <xTaskPriorityDisinherit+0xd4>)
 800b126:	6013      	str	r3, [r2, #0]
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b12c:	4613      	mov	r3, r2
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	4413      	add	r3, r2
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	4a09      	ldr	r2, [pc, #36]	; (800b15c <xTaskPriorityDisinherit+0xd8>)
 800b136:	441a      	add	r2, r3
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	3304      	adds	r3, #4
 800b13c:	4619      	mov	r1, r3
 800b13e:	4610      	mov	r0, r2
 800b140:	f7fe f965 	bl	800940e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b144:	2301      	movs	r3, #1
 800b146:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b148:	697b      	ldr	r3, [r7, #20]
	}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3718      	adds	r7, #24
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	20000d1c 	.word	0x20000d1c
 800b158:	200011f8 	.word	0x200011f8
 800b15c:	20000d20 	.word	0x20000d20

0800b160 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b160:	b580      	push	{r7, lr}
 800b162:	b088      	sub	sp, #32
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b16e:	2301      	movs	r3, #1
 800b170:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d06a      	beq.n	800b24e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d10a      	bne.n	800b196 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b184:	f383 8811 	msr	BASEPRI, r3
 800b188:	f3bf 8f6f 	isb	sy
 800b18c:	f3bf 8f4f 	dsb	sy
 800b190:	60fb      	str	r3, [r7, #12]
}
 800b192:	bf00      	nop
 800b194:	e7fe      	b.n	800b194 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b19a:	683a      	ldr	r2, [r7, #0]
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d902      	bls.n	800b1a6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	61fb      	str	r3, [r7, #28]
 800b1a4:	e002      	b.n	800b1ac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b1ac:	69bb      	ldr	r3, [r7, #24]
 800b1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b0:	69fa      	ldr	r2, [r7, #28]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d04b      	beq.n	800b24e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ba:	697a      	ldr	r2, [r7, #20]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d146      	bne.n	800b24e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b1c0:	4b25      	ldr	r3, [pc, #148]	; (800b258 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	69ba      	ldr	r2, [r7, #24]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d10a      	bne.n	800b1e0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ce:	f383 8811 	msr	BASEPRI, r3
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	60bb      	str	r3, [r7, #8]
}
 800b1dc:	bf00      	nop
 800b1de:	e7fe      	b.n	800b1de <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	69fa      	ldr	r2, [r7, #28]
 800b1ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	699b      	ldr	r3, [r3, #24]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	db04      	blt.n	800b1fe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	6959      	ldr	r1, [r3, #20]
 800b202:	693a      	ldr	r2, [r7, #16]
 800b204:	4613      	mov	r3, r2
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	4413      	add	r3, r2
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	4a13      	ldr	r2, [pc, #76]	; (800b25c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b20e:	4413      	add	r3, r2
 800b210:	4299      	cmp	r1, r3
 800b212:	d11c      	bne.n	800b24e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b214:	69bb      	ldr	r3, [r7, #24]
 800b216:	3304      	adds	r3, #4
 800b218:	4618      	mov	r0, r3
 800b21a:	f7fe f955 	bl	80094c8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b222:	4b0f      	ldr	r3, [pc, #60]	; (800b260 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	429a      	cmp	r2, r3
 800b228:	d903      	bls.n	800b232 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22e:	4a0c      	ldr	r2, [pc, #48]	; (800b260 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b230:	6013      	str	r3, [r2, #0]
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b236:	4613      	mov	r3, r2
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4413      	add	r3, r2
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	4a07      	ldr	r2, [pc, #28]	; (800b25c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b240:	441a      	add	r2, r3
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	3304      	adds	r3, #4
 800b246:	4619      	mov	r1, r3
 800b248:	4610      	mov	r0, r2
 800b24a:	f7fe f8e0 	bl	800940e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b24e:	bf00      	nop
 800b250:	3720      	adds	r7, #32
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	20000d1c 	.word	0x20000d1c
 800b25c:	20000d20 	.word	0x20000d20
 800b260:	200011f8 	.word	0x200011f8

0800b264 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b264:	b480      	push	{r7}
 800b266:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b268:	4b07      	ldr	r3, [pc, #28]	; (800b288 <pvTaskIncrementMutexHeldCount+0x24>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d004      	beq.n	800b27a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b270:	4b05      	ldr	r3, [pc, #20]	; (800b288 <pvTaskIncrementMutexHeldCount+0x24>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b276:	3201      	adds	r2, #1
 800b278:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b27a:	4b03      	ldr	r3, [pc, #12]	; (800b288 <pvTaskIncrementMutexHeldCount+0x24>)
 800b27c:	681b      	ldr	r3, [r3, #0]
	}
 800b27e:	4618      	mov	r0, r3
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr
 800b288:	20000d1c 	.word	0x20000d1c

0800b28c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b296:	4b21      	ldr	r3, [pc, #132]	; (800b31c <prvAddCurrentTaskToDelayedList+0x90>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b29c:	4b20      	ldr	r3, [pc, #128]	; (800b320 <prvAddCurrentTaskToDelayedList+0x94>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	3304      	adds	r3, #4
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7fe f910 	bl	80094c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ae:	d10a      	bne.n	800b2c6 <prvAddCurrentTaskToDelayedList+0x3a>
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d007      	beq.n	800b2c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2b6:	4b1a      	ldr	r3, [pc, #104]	; (800b320 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	3304      	adds	r3, #4
 800b2bc:	4619      	mov	r1, r3
 800b2be:	4819      	ldr	r0, [pc, #100]	; (800b324 <prvAddCurrentTaskToDelayedList+0x98>)
 800b2c0:	f7fe f8a5 	bl	800940e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b2c4:	e026      	b.n	800b314 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b2c6:	68fa      	ldr	r2, [r7, #12]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4413      	add	r3, r2
 800b2cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b2ce:	4b14      	ldr	r3, [pc, #80]	; (800b320 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	68ba      	ldr	r2, [r7, #8]
 800b2d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b2d6:	68ba      	ldr	r2, [r7, #8]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d209      	bcs.n	800b2f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2de:	4b12      	ldr	r3, [pc, #72]	; (800b328 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	4b0f      	ldr	r3, [pc, #60]	; (800b320 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	3304      	adds	r3, #4
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	4610      	mov	r0, r2
 800b2ec:	f7fe f8b3 	bl	8009456 <vListInsert>
}
 800b2f0:	e010      	b.n	800b314 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2f2:	4b0e      	ldr	r3, [pc, #56]	; (800b32c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	4b0a      	ldr	r3, [pc, #40]	; (800b320 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	3304      	adds	r3, #4
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	4610      	mov	r0, r2
 800b300:	f7fe f8a9 	bl	8009456 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b304:	4b0a      	ldr	r3, [pc, #40]	; (800b330 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	68ba      	ldr	r2, [r7, #8]
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d202      	bcs.n	800b314 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b30e:	4a08      	ldr	r2, [pc, #32]	; (800b330 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	6013      	str	r3, [r2, #0]
}
 800b314:	bf00      	nop
 800b316:	3710      	adds	r7, #16
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	200011f4 	.word	0x200011f4
 800b320:	20000d1c 	.word	0x20000d1c
 800b324:	200011dc 	.word	0x200011dc
 800b328:	200011ac 	.word	0x200011ac
 800b32c:	200011a8 	.word	0x200011a8
 800b330:	20001210 	.word	0x20001210

0800b334 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b08a      	sub	sp, #40	; 0x28
 800b338:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b33a:	2300      	movs	r3, #0
 800b33c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b33e:	f000 fb07 	bl	800b950 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b342:	4b1c      	ldr	r3, [pc, #112]	; (800b3b4 <xTimerCreateTimerTask+0x80>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d021      	beq.n	800b38e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b34a:	2300      	movs	r3, #0
 800b34c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b34e:	2300      	movs	r3, #0
 800b350:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b352:	1d3a      	adds	r2, r7, #4
 800b354:	f107 0108 	add.w	r1, r7, #8
 800b358:	f107 030c 	add.w	r3, r7, #12
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7fe f80f 	bl	8009380 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b362:	6879      	ldr	r1, [r7, #4]
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	68fa      	ldr	r2, [r7, #12]
 800b368:	9202      	str	r2, [sp, #8]
 800b36a:	9301      	str	r3, [sp, #4]
 800b36c:	2302      	movs	r3, #2
 800b36e:	9300      	str	r3, [sp, #0]
 800b370:	2300      	movs	r3, #0
 800b372:	460a      	mov	r2, r1
 800b374:	4910      	ldr	r1, [pc, #64]	; (800b3b8 <xTimerCreateTimerTask+0x84>)
 800b376:	4811      	ldr	r0, [pc, #68]	; (800b3bc <xTimerCreateTimerTask+0x88>)
 800b378:	f7fe ffd0 	bl	800a31c <xTaskCreateStatic>
 800b37c:	4603      	mov	r3, r0
 800b37e:	4a10      	ldr	r2, [pc, #64]	; (800b3c0 <xTimerCreateTimerTask+0x8c>)
 800b380:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b382:	4b0f      	ldr	r3, [pc, #60]	; (800b3c0 <xTimerCreateTimerTask+0x8c>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d001      	beq.n	800b38e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b38a:	2301      	movs	r3, #1
 800b38c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d10a      	bne.n	800b3aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	613b      	str	r3, [r7, #16]
}
 800b3a6:	bf00      	nop
 800b3a8:	e7fe      	b.n	800b3a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b3aa:	697b      	ldr	r3, [r7, #20]
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3718      	adds	r7, #24
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}
 800b3b4:	2000124c 	.word	0x2000124c
 800b3b8:	0800d9ac 	.word	0x0800d9ac
 800b3bc:	0800b4f9 	.word	0x0800b4f9
 800b3c0:	20001250 	.word	0x20001250

0800b3c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b08a      	sub	sp, #40	; 0x28
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	607a      	str	r2, [r7, #4]
 800b3d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d10a      	bne.n	800b3f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e0:	f383 8811 	msr	BASEPRI, r3
 800b3e4:	f3bf 8f6f 	isb	sy
 800b3e8:	f3bf 8f4f 	dsb	sy
 800b3ec:	623b      	str	r3, [r7, #32]
}
 800b3ee:	bf00      	nop
 800b3f0:	e7fe      	b.n	800b3f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b3f2:	4b1a      	ldr	r3, [pc, #104]	; (800b45c <xTimerGenericCommand+0x98>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d02a      	beq.n	800b450 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	2b05      	cmp	r3, #5
 800b40a:	dc18      	bgt.n	800b43e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b40c:	f7ff fdb4 	bl	800af78 <xTaskGetSchedulerState>
 800b410:	4603      	mov	r3, r0
 800b412:	2b02      	cmp	r3, #2
 800b414:	d109      	bne.n	800b42a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b416:	4b11      	ldr	r3, [pc, #68]	; (800b45c <xTimerGenericCommand+0x98>)
 800b418:	6818      	ldr	r0, [r3, #0]
 800b41a:	f107 0110 	add.w	r1, r7, #16
 800b41e:	2300      	movs	r3, #0
 800b420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b422:	f7fe fa6f 	bl	8009904 <xQueueGenericSend>
 800b426:	6278      	str	r0, [r7, #36]	; 0x24
 800b428:	e012      	b.n	800b450 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b42a:	4b0c      	ldr	r3, [pc, #48]	; (800b45c <xTimerGenericCommand+0x98>)
 800b42c:	6818      	ldr	r0, [r3, #0]
 800b42e:	f107 0110 	add.w	r1, r7, #16
 800b432:	2300      	movs	r3, #0
 800b434:	2200      	movs	r2, #0
 800b436:	f7fe fa65 	bl	8009904 <xQueueGenericSend>
 800b43a:	6278      	str	r0, [r7, #36]	; 0x24
 800b43c:	e008      	b.n	800b450 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b43e:	4b07      	ldr	r3, [pc, #28]	; (800b45c <xTimerGenericCommand+0x98>)
 800b440:	6818      	ldr	r0, [r3, #0]
 800b442:	f107 0110 	add.w	r1, r7, #16
 800b446:	2300      	movs	r3, #0
 800b448:	683a      	ldr	r2, [r7, #0]
 800b44a:	f7fe fb59 	bl	8009b00 <xQueueGenericSendFromISR>
 800b44e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b452:	4618      	mov	r0, r3
 800b454:	3728      	adds	r7, #40	; 0x28
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	2000124c 	.word	0x2000124c

0800b460 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b088      	sub	sp, #32
 800b464:	af02      	add	r7, sp, #8
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b46a:	4b22      	ldr	r3, [pc, #136]	; (800b4f4 <prvProcessExpiredTimer+0x94>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	68db      	ldr	r3, [r3, #12]
 800b472:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	3304      	adds	r3, #4
 800b478:	4618      	mov	r0, r3
 800b47a:	f7fe f825 	bl	80094c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b484:	f003 0304 	and.w	r3, r3, #4
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d022      	beq.n	800b4d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	699a      	ldr	r2, [r3, #24]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	18d1      	adds	r1, r2, r3
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	683a      	ldr	r2, [r7, #0]
 800b498:	6978      	ldr	r0, [r7, #20]
 800b49a:	f000 f8d1 	bl	800b640 <prvInsertTimerInActiveList>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d01f      	beq.n	800b4e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	9300      	str	r3, [sp, #0]
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	2100      	movs	r1, #0
 800b4ae:	6978      	ldr	r0, [r7, #20]
 800b4b0:	f7ff ff88 	bl	800b3c4 <xTimerGenericCommand>
 800b4b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d113      	bne.n	800b4e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c0:	f383 8811 	msr	BASEPRI, r3
 800b4c4:	f3bf 8f6f 	isb	sy
 800b4c8:	f3bf 8f4f 	dsb	sy
 800b4cc:	60fb      	str	r3, [r7, #12]
}
 800b4ce:	bf00      	nop
 800b4d0:	e7fe      	b.n	800b4d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4d8:	f023 0301 	bic.w	r3, r3, #1
 800b4dc:	b2da      	uxtb	r2, r3
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	6a1b      	ldr	r3, [r3, #32]
 800b4e8:	6978      	ldr	r0, [r7, #20]
 800b4ea:	4798      	blx	r3
}
 800b4ec:	bf00      	nop
 800b4ee:	3718      	adds	r7, #24
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	20001244 	.word	0x20001244

0800b4f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b500:	f107 0308 	add.w	r3, r7, #8
 800b504:	4618      	mov	r0, r3
 800b506:	f000 f857 	bl	800b5b8 <prvGetNextExpireTime>
 800b50a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	4619      	mov	r1, r3
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f000 f803 	bl	800b51c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b516:	f000 f8d5 	bl	800b6c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b51a:	e7f1      	b.n	800b500 <prvTimerTask+0x8>

0800b51c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b526:	f7ff f935 	bl	800a794 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b52a:	f107 0308 	add.w	r3, r7, #8
 800b52e:	4618      	mov	r0, r3
 800b530:	f000 f866 	bl	800b600 <prvSampleTimeNow>
 800b534:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d130      	bne.n	800b59e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d10a      	bne.n	800b558 <prvProcessTimerOrBlockTask+0x3c>
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	429a      	cmp	r2, r3
 800b548:	d806      	bhi.n	800b558 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b54a:	f7ff f931 	bl	800a7b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b54e:	68f9      	ldr	r1, [r7, #12]
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f7ff ff85 	bl	800b460 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b556:	e024      	b.n	800b5a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d008      	beq.n	800b570 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b55e:	4b13      	ldr	r3, [pc, #76]	; (800b5ac <prvProcessTimerOrBlockTask+0x90>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d101      	bne.n	800b56c <prvProcessTimerOrBlockTask+0x50>
 800b568:	2301      	movs	r3, #1
 800b56a:	e000      	b.n	800b56e <prvProcessTimerOrBlockTask+0x52>
 800b56c:	2300      	movs	r3, #0
 800b56e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b570:	4b0f      	ldr	r3, [pc, #60]	; (800b5b0 <prvProcessTimerOrBlockTask+0x94>)
 800b572:	6818      	ldr	r0, [r3, #0]
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	1ad3      	subs	r3, r2, r3
 800b57a:	683a      	ldr	r2, [r7, #0]
 800b57c:	4619      	mov	r1, r3
 800b57e:	f7fe fe99 	bl	800a2b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b582:	f7ff f915 	bl	800a7b0 <xTaskResumeAll>
 800b586:	4603      	mov	r3, r0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d10a      	bne.n	800b5a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b58c:	4b09      	ldr	r3, [pc, #36]	; (800b5b4 <prvProcessTimerOrBlockTask+0x98>)
 800b58e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b592:	601a      	str	r2, [r3, #0]
 800b594:	f3bf 8f4f 	dsb	sy
 800b598:	f3bf 8f6f 	isb	sy
}
 800b59c:	e001      	b.n	800b5a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b59e:	f7ff f907 	bl	800a7b0 <xTaskResumeAll>
}
 800b5a2:	bf00      	nop
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	20001248 	.word	0x20001248
 800b5b0:	2000124c 	.word	0x2000124c
 800b5b4:	e000ed04 	.word	0xe000ed04

0800b5b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b5c0:	4b0e      	ldr	r3, [pc, #56]	; (800b5fc <prvGetNextExpireTime+0x44>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d101      	bne.n	800b5ce <prvGetNextExpireTime+0x16>
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	e000      	b.n	800b5d0 <prvGetNextExpireTime+0x18>
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d105      	bne.n	800b5e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b5dc:	4b07      	ldr	r3, [pc, #28]	; (800b5fc <prvGetNextExpireTime+0x44>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	68db      	ldr	r3, [r3, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	60fb      	str	r3, [r7, #12]
 800b5e6:	e001      	b.n	800b5ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3714      	adds	r7, #20
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop
 800b5fc:	20001244 	.word	0x20001244

0800b600 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b608:	f7ff f970 	bl	800a8ec <xTaskGetTickCount>
 800b60c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b60e:	4b0b      	ldr	r3, [pc, #44]	; (800b63c <prvSampleTimeNow+0x3c>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	68fa      	ldr	r2, [r7, #12]
 800b614:	429a      	cmp	r2, r3
 800b616:	d205      	bcs.n	800b624 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b618:	f000 f936 	bl	800b888 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2201      	movs	r2, #1
 800b620:	601a      	str	r2, [r3, #0]
 800b622:	e002      	b.n	800b62a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b62a:	4a04      	ldr	r2, [pc, #16]	; (800b63c <prvSampleTimeNow+0x3c>)
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b630:	68fb      	ldr	r3, [r7, #12]
}
 800b632:	4618      	mov	r0, r3
 800b634:	3710      	adds	r7, #16
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	20001254 	.word	0x20001254

0800b640 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	60b9      	str	r1, [r7, #8]
 800b64a:	607a      	str	r2, [r7, #4]
 800b64c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b64e:	2300      	movs	r3, #0
 800b650:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	68ba      	ldr	r2, [r7, #8]
 800b656:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b65e:	68ba      	ldr	r2, [r7, #8]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	429a      	cmp	r2, r3
 800b664:	d812      	bhi.n	800b68c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	1ad2      	subs	r2, r2, r3
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	699b      	ldr	r3, [r3, #24]
 800b670:	429a      	cmp	r2, r3
 800b672:	d302      	bcc.n	800b67a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b674:	2301      	movs	r3, #1
 800b676:	617b      	str	r3, [r7, #20]
 800b678:	e01b      	b.n	800b6b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b67a:	4b10      	ldr	r3, [pc, #64]	; (800b6bc <prvInsertTimerInActiveList+0x7c>)
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	3304      	adds	r3, #4
 800b682:	4619      	mov	r1, r3
 800b684:	4610      	mov	r0, r2
 800b686:	f7fd fee6 	bl	8009456 <vListInsert>
 800b68a:	e012      	b.n	800b6b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	429a      	cmp	r2, r3
 800b692:	d206      	bcs.n	800b6a2 <prvInsertTimerInActiveList+0x62>
 800b694:	68ba      	ldr	r2, [r7, #8]
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d302      	bcc.n	800b6a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b69c:	2301      	movs	r3, #1
 800b69e:	617b      	str	r3, [r7, #20]
 800b6a0:	e007      	b.n	800b6b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b6a2:	4b07      	ldr	r3, [pc, #28]	; (800b6c0 <prvInsertTimerInActiveList+0x80>)
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	3304      	adds	r3, #4
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	4610      	mov	r0, r2
 800b6ae:	f7fd fed2 	bl	8009456 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b6b2:	697b      	ldr	r3, [r7, #20]
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3718      	adds	r7, #24
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	20001248 	.word	0x20001248
 800b6c0:	20001244 	.word	0x20001244

0800b6c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b08e      	sub	sp, #56	; 0x38
 800b6c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b6ca:	e0ca      	b.n	800b862 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	da18      	bge.n	800b704 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b6d2:	1d3b      	adds	r3, r7, #4
 800b6d4:	3304      	adds	r3, #4
 800b6d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d10a      	bne.n	800b6f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	61fb      	str	r3, [r7, #28]
}
 800b6f0:	bf00      	nop
 800b6f2:	e7fe      	b.n	800b6f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6fa:	6850      	ldr	r0, [r2, #4]
 800b6fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6fe:	6892      	ldr	r2, [r2, #8]
 800b700:	4611      	mov	r1, r2
 800b702:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2b00      	cmp	r3, #0
 800b708:	f2c0 80aa 	blt.w	800b860 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b712:	695b      	ldr	r3, [r3, #20]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d004      	beq.n	800b722 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b71a:	3304      	adds	r3, #4
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7fd fed3 	bl	80094c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b722:	463b      	mov	r3, r7
 800b724:	4618      	mov	r0, r3
 800b726:	f7ff ff6b 	bl	800b600 <prvSampleTimeNow>
 800b72a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2b09      	cmp	r3, #9
 800b730:	f200 8097 	bhi.w	800b862 <prvProcessReceivedCommands+0x19e>
 800b734:	a201      	add	r2, pc, #4	; (adr r2, 800b73c <prvProcessReceivedCommands+0x78>)
 800b736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b73a:	bf00      	nop
 800b73c:	0800b765 	.word	0x0800b765
 800b740:	0800b765 	.word	0x0800b765
 800b744:	0800b765 	.word	0x0800b765
 800b748:	0800b7d9 	.word	0x0800b7d9
 800b74c:	0800b7ed 	.word	0x0800b7ed
 800b750:	0800b837 	.word	0x0800b837
 800b754:	0800b765 	.word	0x0800b765
 800b758:	0800b765 	.word	0x0800b765
 800b75c:	0800b7d9 	.word	0x0800b7d9
 800b760:	0800b7ed 	.word	0x0800b7ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b766:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b76a:	f043 0301 	orr.w	r3, r3, #1
 800b76e:	b2da      	uxtb	r2, r3
 800b770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b776:	68ba      	ldr	r2, [r7, #8]
 800b778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77a:	699b      	ldr	r3, [r3, #24]
 800b77c:	18d1      	adds	r1, r2, r3
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b784:	f7ff ff5c 	bl	800b640 <prvInsertTimerInActiveList>
 800b788:	4603      	mov	r3, r0
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d069      	beq.n	800b862 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b790:	6a1b      	ldr	r3, [r3, #32]
 800b792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b794:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b79c:	f003 0304 	and.w	r3, r3, #4
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d05e      	beq.n	800b862 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b7a4:	68ba      	ldr	r2, [r7, #8]
 800b7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a8:	699b      	ldr	r3, [r3, #24]
 800b7aa:	441a      	add	r2, r3
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	9300      	str	r3, [sp, #0]
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	2100      	movs	r1, #0
 800b7b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7b6:	f7ff fe05 	bl	800b3c4 <xTimerGenericCommand>
 800b7ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b7bc:	6a3b      	ldr	r3, [r7, #32]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d14f      	bne.n	800b862 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c6:	f383 8811 	msr	BASEPRI, r3
 800b7ca:	f3bf 8f6f 	isb	sy
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	61bb      	str	r3, [r7, #24]
}
 800b7d4:	bf00      	nop
 800b7d6:	e7fe      	b.n	800b7d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7de:	f023 0301 	bic.w	r3, r3, #1
 800b7e2:	b2da      	uxtb	r2, r3
 800b7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b7ea:	e03a      	b.n	800b862 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7f2:	f043 0301 	orr.w	r3, r3, #1
 800b7f6:	b2da      	uxtb	r2, r3
 800b7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b7fe:	68ba      	ldr	r2, [r7, #8]
 800b800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b802:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b806:	699b      	ldr	r3, [r3, #24]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d10a      	bne.n	800b822 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b810:	f383 8811 	msr	BASEPRI, r3
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	617b      	str	r3, [r7, #20]
}
 800b81e:	bf00      	nop
 800b820:	e7fe      	b.n	800b820 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b824:	699a      	ldr	r2, [r3, #24]
 800b826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b828:	18d1      	adds	r1, r2, r3
 800b82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b82e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b830:	f7ff ff06 	bl	800b640 <prvInsertTimerInActiveList>
					break;
 800b834:	e015      	b.n	800b862 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b83c:	f003 0302 	and.w	r3, r3, #2
 800b840:	2b00      	cmp	r3, #0
 800b842:	d103      	bne.n	800b84c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b846:	f000 fbdb 	bl	800c000 <vPortFree>
 800b84a:	e00a      	b.n	800b862 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b852:	f023 0301 	bic.w	r3, r3, #1
 800b856:	b2da      	uxtb	r2, r3
 800b858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b85e:	e000      	b.n	800b862 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b860:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b862:	4b08      	ldr	r3, [pc, #32]	; (800b884 <prvProcessReceivedCommands+0x1c0>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	1d39      	adds	r1, r7, #4
 800b868:	2200      	movs	r2, #0
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fe f9e4 	bl	8009c38 <xQueueReceive>
 800b870:	4603      	mov	r3, r0
 800b872:	2b00      	cmp	r3, #0
 800b874:	f47f af2a 	bne.w	800b6cc <prvProcessReceivedCommands+0x8>
	}
}
 800b878:	bf00      	nop
 800b87a:	bf00      	nop
 800b87c:	3730      	adds	r7, #48	; 0x30
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	2000124c 	.word	0x2000124c

0800b888 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b088      	sub	sp, #32
 800b88c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b88e:	e048      	b.n	800b922 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b890:	4b2d      	ldr	r3, [pc, #180]	; (800b948 <prvSwitchTimerLists+0xc0>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b89a:	4b2b      	ldr	r3, [pc, #172]	; (800b948 <prvSwitchTimerLists+0xc0>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	68db      	ldr	r3, [r3, #12]
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	3304      	adds	r3, #4
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7fd fe0d 	bl	80094c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	6a1b      	ldr	r3, [r3, #32]
 800b8b2:	68f8      	ldr	r0, [r7, #12]
 800b8b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8bc:	f003 0304 	and.w	r3, r3, #4
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d02e      	beq.n	800b922 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	699b      	ldr	r3, [r3, #24]
 800b8c8:	693a      	ldr	r2, [r7, #16]
 800b8ca:	4413      	add	r3, r2
 800b8cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b8ce:	68ba      	ldr	r2, [r7, #8]
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d90e      	bls.n	800b8f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	68ba      	ldr	r2, [r7, #8]
 800b8da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	68fa      	ldr	r2, [r7, #12]
 800b8e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b8e2:	4b19      	ldr	r3, [pc, #100]	; (800b948 <prvSwitchTimerLists+0xc0>)
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	3304      	adds	r3, #4
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	4610      	mov	r0, r2
 800b8ee:	f7fd fdb2 	bl	8009456 <vListInsert>
 800b8f2:	e016      	b.n	800b922 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	693a      	ldr	r2, [r7, #16]
 800b8fc:	2100      	movs	r1, #0
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	f7ff fd60 	bl	800b3c4 <xTimerGenericCommand>
 800b904:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d10a      	bne.n	800b922 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b910:	f383 8811 	msr	BASEPRI, r3
 800b914:	f3bf 8f6f 	isb	sy
 800b918:	f3bf 8f4f 	dsb	sy
 800b91c:	603b      	str	r3, [r7, #0]
}
 800b91e:	bf00      	nop
 800b920:	e7fe      	b.n	800b920 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b922:	4b09      	ldr	r3, [pc, #36]	; (800b948 <prvSwitchTimerLists+0xc0>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d1b1      	bne.n	800b890 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b92c:	4b06      	ldr	r3, [pc, #24]	; (800b948 <prvSwitchTimerLists+0xc0>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b932:	4b06      	ldr	r3, [pc, #24]	; (800b94c <prvSwitchTimerLists+0xc4>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a04      	ldr	r2, [pc, #16]	; (800b948 <prvSwitchTimerLists+0xc0>)
 800b938:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b93a:	4a04      	ldr	r2, [pc, #16]	; (800b94c <prvSwitchTimerLists+0xc4>)
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	6013      	str	r3, [r2, #0]
}
 800b940:	bf00      	nop
 800b942:	3718      	adds	r7, #24
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	20001244 	.word	0x20001244
 800b94c:	20001248 	.word	0x20001248

0800b950 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b956:	f000 f965 	bl	800bc24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b95a:	4b15      	ldr	r3, [pc, #84]	; (800b9b0 <prvCheckForValidListAndQueue+0x60>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d120      	bne.n	800b9a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b962:	4814      	ldr	r0, [pc, #80]	; (800b9b4 <prvCheckForValidListAndQueue+0x64>)
 800b964:	f7fd fd26 	bl	80093b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b968:	4813      	ldr	r0, [pc, #76]	; (800b9b8 <prvCheckForValidListAndQueue+0x68>)
 800b96a:	f7fd fd23 	bl	80093b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b96e:	4b13      	ldr	r3, [pc, #76]	; (800b9bc <prvCheckForValidListAndQueue+0x6c>)
 800b970:	4a10      	ldr	r2, [pc, #64]	; (800b9b4 <prvCheckForValidListAndQueue+0x64>)
 800b972:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b974:	4b12      	ldr	r3, [pc, #72]	; (800b9c0 <prvCheckForValidListAndQueue+0x70>)
 800b976:	4a10      	ldr	r2, [pc, #64]	; (800b9b8 <prvCheckForValidListAndQueue+0x68>)
 800b978:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b97a:	2300      	movs	r3, #0
 800b97c:	9300      	str	r3, [sp, #0]
 800b97e:	4b11      	ldr	r3, [pc, #68]	; (800b9c4 <prvCheckForValidListAndQueue+0x74>)
 800b980:	4a11      	ldr	r2, [pc, #68]	; (800b9c8 <prvCheckForValidListAndQueue+0x78>)
 800b982:	2110      	movs	r1, #16
 800b984:	200a      	movs	r0, #10
 800b986:	f7fd fe31 	bl	80095ec <xQueueGenericCreateStatic>
 800b98a:	4603      	mov	r3, r0
 800b98c:	4a08      	ldr	r2, [pc, #32]	; (800b9b0 <prvCheckForValidListAndQueue+0x60>)
 800b98e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b990:	4b07      	ldr	r3, [pc, #28]	; (800b9b0 <prvCheckForValidListAndQueue+0x60>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d005      	beq.n	800b9a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b998:	4b05      	ldr	r3, [pc, #20]	; (800b9b0 <prvCheckForValidListAndQueue+0x60>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	490b      	ldr	r1, [pc, #44]	; (800b9cc <prvCheckForValidListAndQueue+0x7c>)
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7fe fc5e 	bl	800a260 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9a4:	f000 f96e 	bl	800bc84 <vPortExitCritical>
}
 800b9a8:	bf00      	nop
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	2000124c 	.word	0x2000124c
 800b9b4:	2000121c 	.word	0x2000121c
 800b9b8:	20001230 	.word	0x20001230
 800b9bc:	20001244 	.word	0x20001244
 800b9c0:	20001248 	.word	0x20001248
 800b9c4:	200012f8 	.word	0x200012f8
 800b9c8:	20001258 	.word	0x20001258
 800b9cc:	0800d9b4 	.word	0x0800d9b4

0800b9d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	3b04      	subs	r3, #4
 800b9e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b9e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	3b04      	subs	r3, #4
 800b9ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	f023 0201 	bic.w	r2, r3, #1
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	3b04      	subs	r3, #4
 800b9fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ba00:	4a0c      	ldr	r2, [pc, #48]	; (800ba34 <pxPortInitialiseStack+0x64>)
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	3b14      	subs	r3, #20
 800ba0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	3b04      	subs	r3, #4
 800ba16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f06f 0202 	mvn.w	r2, #2
 800ba1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	3b20      	subs	r3, #32
 800ba24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ba26:	68fb      	ldr	r3, [r7, #12]
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3714      	adds	r7, #20
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr
 800ba34:	0800ba39 	.word	0x0800ba39

0800ba38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b085      	sub	sp, #20
 800ba3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba42:	4b12      	ldr	r3, [pc, #72]	; (800ba8c <prvTaskExitError+0x54>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba4a:	d00a      	beq.n	800ba62 <prvTaskExitError+0x2a>
	__asm volatile
 800ba4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba50:	f383 8811 	msr	BASEPRI, r3
 800ba54:	f3bf 8f6f 	isb	sy
 800ba58:	f3bf 8f4f 	dsb	sy
 800ba5c:	60fb      	str	r3, [r7, #12]
}
 800ba5e:	bf00      	nop
 800ba60:	e7fe      	b.n	800ba60 <prvTaskExitError+0x28>
	__asm volatile
 800ba62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba66:	f383 8811 	msr	BASEPRI, r3
 800ba6a:	f3bf 8f6f 	isb	sy
 800ba6e:	f3bf 8f4f 	dsb	sy
 800ba72:	60bb      	str	r3, [r7, #8]
}
 800ba74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba76:	bf00      	nop
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d0fc      	beq.n	800ba78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ba7e:	bf00      	nop
 800ba80:	bf00      	nop
 800ba82:	3714      	adds	r7, #20
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr
 800ba8c:	20000094 	.word	0x20000094

0800ba90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ba90:	4b07      	ldr	r3, [pc, #28]	; (800bab0 <pxCurrentTCBConst2>)
 800ba92:	6819      	ldr	r1, [r3, #0]
 800ba94:	6808      	ldr	r0, [r1, #0]
 800ba96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba9a:	f380 8809 	msr	PSP, r0
 800ba9e:	f3bf 8f6f 	isb	sy
 800baa2:	f04f 0000 	mov.w	r0, #0
 800baa6:	f380 8811 	msr	BASEPRI, r0
 800baaa:	4770      	bx	lr
 800baac:	f3af 8000 	nop.w

0800bab0 <pxCurrentTCBConst2>:
 800bab0:	20000d1c 	.word	0x20000d1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bab4:	bf00      	nop
 800bab6:	bf00      	nop

0800bab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bab8:	4808      	ldr	r0, [pc, #32]	; (800badc <prvPortStartFirstTask+0x24>)
 800baba:	6800      	ldr	r0, [r0, #0]
 800babc:	6800      	ldr	r0, [r0, #0]
 800babe:	f380 8808 	msr	MSP, r0
 800bac2:	f04f 0000 	mov.w	r0, #0
 800bac6:	f380 8814 	msr	CONTROL, r0
 800baca:	b662      	cpsie	i
 800bacc:	b661      	cpsie	f
 800bace:	f3bf 8f4f 	dsb	sy
 800bad2:	f3bf 8f6f 	isb	sy
 800bad6:	df00      	svc	0
 800bad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bada:	bf00      	nop
 800badc:	e000ed08 	.word	0xe000ed08

0800bae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b086      	sub	sp, #24
 800bae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bae6:	4b46      	ldr	r3, [pc, #280]	; (800bc00 <xPortStartScheduler+0x120>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4a46      	ldr	r2, [pc, #280]	; (800bc04 <xPortStartScheduler+0x124>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d10a      	bne.n	800bb06 <xPortStartScheduler+0x26>
	__asm volatile
 800baf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf4:	f383 8811 	msr	BASEPRI, r3
 800baf8:	f3bf 8f6f 	isb	sy
 800bafc:	f3bf 8f4f 	dsb	sy
 800bb00:	613b      	str	r3, [r7, #16]
}
 800bb02:	bf00      	nop
 800bb04:	e7fe      	b.n	800bb04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bb06:	4b3e      	ldr	r3, [pc, #248]	; (800bc00 <xPortStartScheduler+0x120>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a3f      	ldr	r2, [pc, #252]	; (800bc08 <xPortStartScheduler+0x128>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d10a      	bne.n	800bb26 <xPortStartScheduler+0x46>
	__asm volatile
 800bb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb14:	f383 8811 	msr	BASEPRI, r3
 800bb18:	f3bf 8f6f 	isb	sy
 800bb1c:	f3bf 8f4f 	dsb	sy
 800bb20:	60fb      	str	r3, [r7, #12]
}
 800bb22:	bf00      	nop
 800bb24:	e7fe      	b.n	800bb24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bb26:	4b39      	ldr	r3, [pc, #228]	; (800bc0c <xPortStartScheduler+0x12c>)
 800bb28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	22ff      	movs	r2, #255	; 0xff
 800bb36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb40:	78fb      	ldrb	r3, [r7, #3]
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb48:	b2da      	uxtb	r2, r3
 800bb4a:	4b31      	ldr	r3, [pc, #196]	; (800bc10 <xPortStartScheduler+0x130>)
 800bb4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb4e:	4b31      	ldr	r3, [pc, #196]	; (800bc14 <xPortStartScheduler+0x134>)
 800bb50:	2207      	movs	r2, #7
 800bb52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb54:	e009      	b.n	800bb6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bb56:	4b2f      	ldr	r3, [pc, #188]	; (800bc14 <xPortStartScheduler+0x134>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	4a2d      	ldr	r2, [pc, #180]	; (800bc14 <xPortStartScheduler+0x134>)
 800bb5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb60:	78fb      	ldrb	r3, [r7, #3]
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	005b      	lsls	r3, r3, #1
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb6a:	78fb      	ldrb	r3, [r7, #3]
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb72:	2b80      	cmp	r3, #128	; 0x80
 800bb74:	d0ef      	beq.n	800bb56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb76:	4b27      	ldr	r3, [pc, #156]	; (800bc14 <xPortStartScheduler+0x134>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f1c3 0307 	rsb	r3, r3, #7
 800bb7e:	2b04      	cmp	r3, #4
 800bb80:	d00a      	beq.n	800bb98 <xPortStartScheduler+0xb8>
	__asm volatile
 800bb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb86:	f383 8811 	msr	BASEPRI, r3
 800bb8a:	f3bf 8f6f 	isb	sy
 800bb8e:	f3bf 8f4f 	dsb	sy
 800bb92:	60bb      	str	r3, [r7, #8]
}
 800bb94:	bf00      	nop
 800bb96:	e7fe      	b.n	800bb96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb98:	4b1e      	ldr	r3, [pc, #120]	; (800bc14 <xPortStartScheduler+0x134>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	021b      	lsls	r3, r3, #8
 800bb9e:	4a1d      	ldr	r2, [pc, #116]	; (800bc14 <xPortStartScheduler+0x134>)
 800bba0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bba2:	4b1c      	ldr	r3, [pc, #112]	; (800bc14 <xPortStartScheduler+0x134>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bbaa:	4a1a      	ldr	r2, [pc, #104]	; (800bc14 <xPortStartScheduler+0x134>)
 800bbac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	b2da      	uxtb	r2, r3
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bbb6:	4b18      	ldr	r3, [pc, #96]	; (800bc18 <xPortStartScheduler+0x138>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4a17      	ldr	r2, [pc, #92]	; (800bc18 <xPortStartScheduler+0x138>)
 800bbbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bbc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bbc2:	4b15      	ldr	r3, [pc, #84]	; (800bc18 <xPortStartScheduler+0x138>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4a14      	ldr	r2, [pc, #80]	; (800bc18 <xPortStartScheduler+0x138>)
 800bbc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bbcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bbce:	f000 f8dd 	bl	800bd8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bbd2:	4b12      	ldr	r3, [pc, #72]	; (800bc1c <xPortStartScheduler+0x13c>)
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bbd8:	f000 f8fc 	bl	800bdd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bbdc:	4b10      	ldr	r3, [pc, #64]	; (800bc20 <xPortStartScheduler+0x140>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a0f      	ldr	r2, [pc, #60]	; (800bc20 <xPortStartScheduler+0x140>)
 800bbe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bbe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bbe8:	f7ff ff66 	bl	800bab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bbec:	f7fe ff48 	bl	800aa80 <vTaskSwitchContext>
	prvTaskExitError();
 800bbf0:	f7ff ff22 	bl	800ba38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bbf4:	2300      	movs	r3, #0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3718      	adds	r7, #24
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	e000ed00 	.word	0xe000ed00
 800bc04:	410fc271 	.word	0x410fc271
 800bc08:	410fc270 	.word	0x410fc270
 800bc0c:	e000e400 	.word	0xe000e400
 800bc10:	20001348 	.word	0x20001348
 800bc14:	2000134c 	.word	0x2000134c
 800bc18:	e000ed20 	.word	0xe000ed20
 800bc1c:	20000094 	.word	0x20000094
 800bc20:	e000ef34 	.word	0xe000ef34

0800bc24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
	__asm volatile
 800bc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2e:	f383 8811 	msr	BASEPRI, r3
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	607b      	str	r3, [r7, #4]
}
 800bc3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc3e:	4b0f      	ldr	r3, [pc, #60]	; (800bc7c <vPortEnterCritical+0x58>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	3301      	adds	r3, #1
 800bc44:	4a0d      	ldr	r2, [pc, #52]	; (800bc7c <vPortEnterCritical+0x58>)
 800bc46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc48:	4b0c      	ldr	r3, [pc, #48]	; (800bc7c <vPortEnterCritical+0x58>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d10f      	bne.n	800bc70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bc50:	4b0b      	ldr	r3, [pc, #44]	; (800bc80 <vPortEnterCritical+0x5c>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d00a      	beq.n	800bc70 <vPortEnterCritical+0x4c>
	__asm volatile
 800bc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc5e:	f383 8811 	msr	BASEPRI, r3
 800bc62:	f3bf 8f6f 	isb	sy
 800bc66:	f3bf 8f4f 	dsb	sy
 800bc6a:	603b      	str	r3, [r7, #0]
}
 800bc6c:	bf00      	nop
 800bc6e:	e7fe      	b.n	800bc6e <vPortEnterCritical+0x4a>
	}
}
 800bc70:	bf00      	nop
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr
 800bc7c:	20000094 	.word	0x20000094
 800bc80:	e000ed04 	.word	0xe000ed04

0800bc84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc8a:	4b12      	ldr	r3, [pc, #72]	; (800bcd4 <vPortExitCritical+0x50>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d10a      	bne.n	800bca8 <vPortExitCritical+0x24>
	__asm volatile
 800bc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc96:	f383 8811 	msr	BASEPRI, r3
 800bc9a:	f3bf 8f6f 	isb	sy
 800bc9e:	f3bf 8f4f 	dsb	sy
 800bca2:	607b      	str	r3, [r7, #4]
}
 800bca4:	bf00      	nop
 800bca6:	e7fe      	b.n	800bca6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bca8:	4b0a      	ldr	r3, [pc, #40]	; (800bcd4 <vPortExitCritical+0x50>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	3b01      	subs	r3, #1
 800bcae:	4a09      	ldr	r2, [pc, #36]	; (800bcd4 <vPortExitCritical+0x50>)
 800bcb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bcb2:	4b08      	ldr	r3, [pc, #32]	; (800bcd4 <vPortExitCritical+0x50>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d105      	bne.n	800bcc6 <vPortExitCritical+0x42>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	f383 8811 	msr	BASEPRI, r3
}
 800bcc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bcc6:	bf00      	nop
 800bcc8:	370c      	adds	r7, #12
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop
 800bcd4:	20000094 	.word	0x20000094
	...

0800bce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bce0:	f3ef 8009 	mrs	r0, PSP
 800bce4:	f3bf 8f6f 	isb	sy
 800bce8:	4b15      	ldr	r3, [pc, #84]	; (800bd40 <pxCurrentTCBConst>)
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	f01e 0f10 	tst.w	lr, #16
 800bcf0:	bf08      	it	eq
 800bcf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bcf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcfa:	6010      	str	r0, [r2, #0]
 800bcfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bd00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bd04:	f380 8811 	msr	BASEPRI, r0
 800bd08:	f3bf 8f4f 	dsb	sy
 800bd0c:	f3bf 8f6f 	isb	sy
 800bd10:	f7fe feb6 	bl	800aa80 <vTaskSwitchContext>
 800bd14:	f04f 0000 	mov.w	r0, #0
 800bd18:	f380 8811 	msr	BASEPRI, r0
 800bd1c:	bc09      	pop	{r0, r3}
 800bd1e:	6819      	ldr	r1, [r3, #0]
 800bd20:	6808      	ldr	r0, [r1, #0]
 800bd22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd26:	f01e 0f10 	tst.w	lr, #16
 800bd2a:	bf08      	it	eq
 800bd2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd30:	f380 8809 	msr	PSP, r0
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	4770      	bx	lr
 800bd3a:	bf00      	nop
 800bd3c:	f3af 8000 	nop.w

0800bd40 <pxCurrentTCBConst>:
 800bd40:	20000d1c 	.word	0x20000d1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd44:	bf00      	nop
 800bd46:	bf00      	nop

0800bd48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	607b      	str	r3, [r7, #4]
}
 800bd60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd62:	f7fe fdd3 	bl	800a90c <xTaskIncrementTick>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d003      	beq.n	800bd74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd6c:	4b06      	ldr	r3, [pc, #24]	; (800bd88 <xPortSysTickHandler+0x40>)
 800bd6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd72:	601a      	str	r2, [r3, #0]
 800bd74:	2300      	movs	r3, #0
 800bd76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	f383 8811 	msr	BASEPRI, r3
}
 800bd7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd80:	bf00      	nop
 800bd82:	3708      	adds	r7, #8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	e000ed04 	.word	0xe000ed04

0800bd8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd90:	4b0b      	ldr	r3, [pc, #44]	; (800bdc0 <vPortSetupTimerInterrupt+0x34>)
 800bd92:	2200      	movs	r2, #0
 800bd94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd96:	4b0b      	ldr	r3, [pc, #44]	; (800bdc4 <vPortSetupTimerInterrupt+0x38>)
 800bd98:	2200      	movs	r2, #0
 800bd9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd9c:	4b0a      	ldr	r3, [pc, #40]	; (800bdc8 <vPortSetupTimerInterrupt+0x3c>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a0a      	ldr	r2, [pc, #40]	; (800bdcc <vPortSetupTimerInterrupt+0x40>)
 800bda2:	fba2 2303 	umull	r2, r3, r2, r3
 800bda6:	099b      	lsrs	r3, r3, #6
 800bda8:	4a09      	ldr	r2, [pc, #36]	; (800bdd0 <vPortSetupTimerInterrupt+0x44>)
 800bdaa:	3b01      	subs	r3, #1
 800bdac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bdae:	4b04      	ldr	r3, [pc, #16]	; (800bdc0 <vPortSetupTimerInterrupt+0x34>)
 800bdb0:	2207      	movs	r2, #7
 800bdb2:	601a      	str	r2, [r3, #0]
}
 800bdb4:	bf00      	nop
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr
 800bdbe:	bf00      	nop
 800bdc0:	e000e010 	.word	0xe000e010
 800bdc4:	e000e018 	.word	0xe000e018
 800bdc8:	20000068 	.word	0x20000068
 800bdcc:	10624dd3 	.word	0x10624dd3
 800bdd0:	e000e014 	.word	0xe000e014

0800bdd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bdd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bde4 <vPortEnableVFP+0x10>
 800bdd8:	6801      	ldr	r1, [r0, #0]
 800bdda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bdde:	6001      	str	r1, [r0, #0]
 800bde0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bde2:	bf00      	nop
 800bde4:	e000ed88 	.word	0xe000ed88

0800bde8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bdee:	f3ef 8305 	mrs	r3, IPSR
 800bdf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2b0f      	cmp	r3, #15
 800bdf8:	d914      	bls.n	800be24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bdfa:	4a17      	ldr	r2, [pc, #92]	; (800be58 <vPortValidateInterruptPriority+0x70>)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	4413      	add	r3, r2
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800be04:	4b15      	ldr	r3, [pc, #84]	; (800be5c <vPortValidateInterruptPriority+0x74>)
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	7afa      	ldrb	r2, [r7, #11]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d20a      	bcs.n	800be24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800be0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be12:	f383 8811 	msr	BASEPRI, r3
 800be16:	f3bf 8f6f 	isb	sy
 800be1a:	f3bf 8f4f 	dsb	sy
 800be1e:	607b      	str	r3, [r7, #4]
}
 800be20:	bf00      	nop
 800be22:	e7fe      	b.n	800be22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800be24:	4b0e      	ldr	r3, [pc, #56]	; (800be60 <vPortValidateInterruptPriority+0x78>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800be2c:	4b0d      	ldr	r3, [pc, #52]	; (800be64 <vPortValidateInterruptPriority+0x7c>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	429a      	cmp	r2, r3
 800be32:	d90a      	bls.n	800be4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800be34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be38:	f383 8811 	msr	BASEPRI, r3
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	603b      	str	r3, [r7, #0]
}
 800be46:	bf00      	nop
 800be48:	e7fe      	b.n	800be48 <vPortValidateInterruptPriority+0x60>
	}
 800be4a:	bf00      	nop
 800be4c:	3714      	adds	r7, #20
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr
 800be56:	bf00      	nop
 800be58:	e000e3f0 	.word	0xe000e3f0
 800be5c:	20001348 	.word	0x20001348
 800be60:	e000ed0c 	.word	0xe000ed0c
 800be64:	2000134c 	.word	0x2000134c

0800be68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b08a      	sub	sp, #40	; 0x28
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800be70:	2300      	movs	r3, #0
 800be72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800be74:	f7fe fc8e 	bl	800a794 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800be78:	4b5b      	ldr	r3, [pc, #364]	; (800bfe8 <pvPortMalloc+0x180>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d101      	bne.n	800be84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800be80:	f000 f920 	bl	800c0c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800be84:	4b59      	ldr	r3, [pc, #356]	; (800bfec <pvPortMalloc+0x184>)
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	4013      	ands	r3, r2
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	f040 8093 	bne.w	800bfb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d01d      	beq.n	800bed4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800be98:	2208      	movs	r2, #8
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4413      	add	r3, r2
 800be9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f003 0307 	and.w	r3, r3, #7
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d014      	beq.n	800bed4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f023 0307 	bic.w	r3, r3, #7
 800beb0:	3308      	adds	r3, #8
 800beb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f003 0307 	and.w	r3, r3, #7
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d00a      	beq.n	800bed4 <pvPortMalloc+0x6c>
	__asm volatile
 800bebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec2:	f383 8811 	msr	BASEPRI, r3
 800bec6:	f3bf 8f6f 	isb	sy
 800beca:	f3bf 8f4f 	dsb	sy
 800bece:	617b      	str	r3, [r7, #20]
}
 800bed0:	bf00      	nop
 800bed2:	e7fe      	b.n	800bed2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d06e      	beq.n	800bfb8 <pvPortMalloc+0x150>
 800beda:	4b45      	ldr	r3, [pc, #276]	; (800bff0 <pvPortMalloc+0x188>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d869      	bhi.n	800bfb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bee4:	4b43      	ldr	r3, [pc, #268]	; (800bff4 <pvPortMalloc+0x18c>)
 800bee6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bee8:	4b42      	ldr	r3, [pc, #264]	; (800bff4 <pvPortMalloc+0x18c>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800beee:	e004      	b.n	800befa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800befa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d903      	bls.n	800bf0c <pvPortMalloc+0xa4>
 800bf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d1f1      	bne.n	800bef0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bf0c:	4b36      	ldr	r3, [pc, #216]	; (800bfe8 <pvPortMalloc+0x180>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d050      	beq.n	800bfb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bf16:	6a3b      	ldr	r3, [r7, #32]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	2208      	movs	r2, #8
 800bf1c:	4413      	add	r3, r2
 800bf1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	6a3b      	ldr	r3, [r7, #32]
 800bf26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2a:	685a      	ldr	r2, [r3, #4]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	1ad2      	subs	r2, r2, r3
 800bf30:	2308      	movs	r3, #8
 800bf32:	005b      	lsls	r3, r3, #1
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d91f      	bls.n	800bf78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bf38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	4413      	add	r3, r2
 800bf3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	f003 0307 	and.w	r3, r3, #7
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d00a      	beq.n	800bf60 <pvPortMalloc+0xf8>
	__asm volatile
 800bf4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4e:	f383 8811 	msr	BASEPRI, r3
 800bf52:	f3bf 8f6f 	isb	sy
 800bf56:	f3bf 8f4f 	dsb	sy
 800bf5a:	613b      	str	r3, [r7, #16]
}
 800bf5c:	bf00      	nop
 800bf5e:	e7fe      	b.n	800bf5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf62:	685a      	ldr	r2, [r3, #4]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	1ad2      	subs	r2, r2, r3
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bf72:	69b8      	ldr	r0, [r7, #24]
 800bf74:	f000 f908 	bl	800c188 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bf78:	4b1d      	ldr	r3, [pc, #116]	; (800bff0 <pvPortMalloc+0x188>)
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	4a1b      	ldr	r2, [pc, #108]	; (800bff0 <pvPortMalloc+0x188>)
 800bf84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bf86:	4b1a      	ldr	r3, [pc, #104]	; (800bff0 <pvPortMalloc+0x188>)
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	4b1b      	ldr	r3, [pc, #108]	; (800bff8 <pvPortMalloc+0x190>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d203      	bcs.n	800bf9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bf92:	4b17      	ldr	r3, [pc, #92]	; (800bff0 <pvPortMalloc+0x188>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4a18      	ldr	r2, [pc, #96]	; (800bff8 <pvPortMalloc+0x190>)
 800bf98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bf9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9c:	685a      	ldr	r2, [r3, #4]
 800bf9e:	4b13      	ldr	r3, [pc, #76]	; (800bfec <pvPortMalloc+0x184>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	431a      	orrs	r2, r3
 800bfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfaa:	2200      	movs	r2, #0
 800bfac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bfae:	4b13      	ldr	r3, [pc, #76]	; (800bffc <pvPortMalloc+0x194>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	4a11      	ldr	r2, [pc, #68]	; (800bffc <pvPortMalloc+0x194>)
 800bfb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bfb8:	f7fe fbfa 	bl	800a7b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bfbc:	69fb      	ldr	r3, [r7, #28]
 800bfbe:	f003 0307 	and.w	r3, r3, #7
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d00a      	beq.n	800bfdc <pvPortMalloc+0x174>
	__asm volatile
 800bfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfca:	f383 8811 	msr	BASEPRI, r3
 800bfce:	f3bf 8f6f 	isb	sy
 800bfd2:	f3bf 8f4f 	dsb	sy
 800bfd6:	60fb      	str	r3, [r7, #12]
}
 800bfd8:	bf00      	nop
 800bfda:	e7fe      	b.n	800bfda <pvPortMalloc+0x172>
	return pvReturn;
 800bfdc:	69fb      	ldr	r3, [r7, #28]
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3728      	adds	r7, #40	; 0x28
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	200026e0 	.word	0x200026e0
 800bfec:	200026f4 	.word	0x200026f4
 800bff0:	200026e4 	.word	0x200026e4
 800bff4:	200026d8 	.word	0x200026d8
 800bff8:	200026e8 	.word	0x200026e8
 800bffc:	200026ec 	.word	0x200026ec

0800c000 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b086      	sub	sp, #24
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d04d      	beq.n	800c0ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c012:	2308      	movs	r3, #8
 800c014:	425b      	negs	r3, r3
 800c016:	697a      	ldr	r2, [r7, #20]
 800c018:	4413      	add	r3, r2
 800c01a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	685a      	ldr	r2, [r3, #4]
 800c024:	4b24      	ldr	r3, [pc, #144]	; (800c0b8 <vPortFree+0xb8>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4013      	ands	r3, r2
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d10a      	bne.n	800c044 <vPortFree+0x44>
	__asm volatile
 800c02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c032:	f383 8811 	msr	BASEPRI, r3
 800c036:	f3bf 8f6f 	isb	sy
 800c03a:	f3bf 8f4f 	dsb	sy
 800c03e:	60fb      	str	r3, [r7, #12]
}
 800c040:	bf00      	nop
 800c042:	e7fe      	b.n	800c042 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00a      	beq.n	800c062 <vPortFree+0x62>
	__asm volatile
 800c04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c050:	f383 8811 	msr	BASEPRI, r3
 800c054:	f3bf 8f6f 	isb	sy
 800c058:	f3bf 8f4f 	dsb	sy
 800c05c:	60bb      	str	r3, [r7, #8]
}
 800c05e:	bf00      	nop
 800c060:	e7fe      	b.n	800c060 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	685a      	ldr	r2, [r3, #4]
 800c066:	4b14      	ldr	r3, [pc, #80]	; (800c0b8 <vPortFree+0xb8>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4013      	ands	r3, r2
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d01e      	beq.n	800c0ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d11a      	bne.n	800c0ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	685a      	ldr	r2, [r3, #4]
 800c07c:	4b0e      	ldr	r3, [pc, #56]	; (800c0b8 <vPortFree+0xb8>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	43db      	mvns	r3, r3
 800c082:	401a      	ands	r2, r3
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c088:	f7fe fb84 	bl	800a794 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	685a      	ldr	r2, [r3, #4]
 800c090:	4b0a      	ldr	r3, [pc, #40]	; (800c0bc <vPortFree+0xbc>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4413      	add	r3, r2
 800c096:	4a09      	ldr	r2, [pc, #36]	; (800c0bc <vPortFree+0xbc>)
 800c098:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c09a:	6938      	ldr	r0, [r7, #16]
 800c09c:	f000 f874 	bl	800c188 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c0a0:	4b07      	ldr	r3, [pc, #28]	; (800c0c0 <vPortFree+0xc0>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	4a06      	ldr	r2, [pc, #24]	; (800c0c0 <vPortFree+0xc0>)
 800c0a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c0aa:	f7fe fb81 	bl	800a7b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c0ae:	bf00      	nop
 800c0b0:	3718      	adds	r7, #24
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	200026f4 	.word	0x200026f4
 800c0bc:	200026e4 	.word	0x200026e4
 800c0c0:	200026f0 	.word	0x200026f0

0800c0c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b085      	sub	sp, #20
 800c0c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c0ca:	f241 3388 	movw	r3, #5000	; 0x1388
 800c0ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c0d0:	4b27      	ldr	r3, [pc, #156]	; (800c170 <prvHeapInit+0xac>)
 800c0d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f003 0307 	and.w	r3, r3, #7
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00c      	beq.n	800c0f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	3307      	adds	r3, #7
 800c0e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f023 0307 	bic.w	r3, r3, #7
 800c0ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c0ec:	68ba      	ldr	r2, [r7, #8]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	1ad3      	subs	r3, r2, r3
 800c0f2:	4a1f      	ldr	r2, [pc, #124]	; (800c170 <prvHeapInit+0xac>)
 800c0f4:	4413      	add	r3, r2
 800c0f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c0fc:	4a1d      	ldr	r2, [pc, #116]	; (800c174 <prvHeapInit+0xb0>)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c102:	4b1c      	ldr	r3, [pc, #112]	; (800c174 <prvHeapInit+0xb0>)
 800c104:	2200      	movs	r2, #0
 800c106:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	68ba      	ldr	r2, [r7, #8]
 800c10c:	4413      	add	r3, r2
 800c10e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c110:	2208      	movs	r2, #8
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	1a9b      	subs	r3, r3, r2
 800c116:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f023 0307 	bic.w	r3, r3, #7
 800c11e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	4a15      	ldr	r2, [pc, #84]	; (800c178 <prvHeapInit+0xb4>)
 800c124:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c126:	4b14      	ldr	r3, [pc, #80]	; (800c178 <prvHeapInit+0xb4>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	2200      	movs	r2, #0
 800c12c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c12e:	4b12      	ldr	r3, [pc, #72]	; (800c178 <prvHeapInit+0xb4>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	2200      	movs	r2, #0
 800c134:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	68fa      	ldr	r2, [r7, #12]
 800c13e:	1ad2      	subs	r2, r2, r3
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c144:	4b0c      	ldr	r3, [pc, #48]	; (800c178 <prvHeapInit+0xb4>)
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	4a0a      	ldr	r2, [pc, #40]	; (800c17c <prvHeapInit+0xb8>)
 800c152:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	4a09      	ldr	r2, [pc, #36]	; (800c180 <prvHeapInit+0xbc>)
 800c15a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c15c:	4b09      	ldr	r3, [pc, #36]	; (800c184 <prvHeapInit+0xc0>)
 800c15e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c162:	601a      	str	r2, [r3, #0]
}
 800c164:	bf00      	nop
 800c166:	3714      	adds	r7, #20
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr
 800c170:	20001350 	.word	0x20001350
 800c174:	200026d8 	.word	0x200026d8
 800c178:	200026e0 	.word	0x200026e0
 800c17c:	200026e8 	.word	0x200026e8
 800c180:	200026e4 	.word	0x200026e4
 800c184:	200026f4 	.word	0x200026f4

0800c188 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c188:	b480      	push	{r7}
 800c18a:	b085      	sub	sp, #20
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c190:	4b28      	ldr	r3, [pc, #160]	; (800c234 <prvInsertBlockIntoFreeList+0xac>)
 800c192:	60fb      	str	r3, [r7, #12]
 800c194:	e002      	b.n	800c19c <prvInsertBlockIntoFreeList+0x14>
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	60fb      	str	r3, [r7, #12]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d8f7      	bhi.n	800c196 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	685b      	ldr	r3, [r3, #4]
 800c1ae:	68ba      	ldr	r2, [r7, #8]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	687a      	ldr	r2, [r7, #4]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d108      	bne.n	800c1ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	685a      	ldr	r2, [r3, #4]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	441a      	add	r2, r3
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	68ba      	ldr	r2, [r7, #8]
 800c1d4:	441a      	add	r2, r3
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d118      	bne.n	800c210 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	4b15      	ldr	r3, [pc, #84]	; (800c238 <prvInsertBlockIntoFreeList+0xb0>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d00d      	beq.n	800c206 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	685a      	ldr	r2, [r3, #4]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	441a      	add	r2, r3
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	601a      	str	r2, [r3, #0]
 800c204:	e008      	b.n	800c218 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c206:	4b0c      	ldr	r3, [pc, #48]	; (800c238 <prvInsertBlockIntoFreeList+0xb0>)
 800c208:	681a      	ldr	r2, [r3, #0]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	601a      	str	r2, [r3, #0]
 800c20e:	e003      	b.n	800c218 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681a      	ldr	r2, [r3, #0]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d002      	beq.n	800c226 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c226:	bf00      	nop
 800c228:	3714      	adds	r7, #20
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr
 800c232:	bf00      	nop
 800c234:	200026d8 	.word	0x200026d8
 800c238:	200026e0 	.word	0x200026e0

0800c23c <atoi>:
 800c23c:	220a      	movs	r2, #10
 800c23e:	2100      	movs	r1, #0
 800c240:	f000 b9c2 	b.w	800c5c8 <strtol>

0800c244 <__errno>:
 800c244:	4b01      	ldr	r3, [pc, #4]	; (800c24c <__errno+0x8>)
 800c246:	6818      	ldr	r0, [r3, #0]
 800c248:	4770      	bx	lr
 800c24a:	bf00      	nop
 800c24c:	20000098 	.word	0x20000098

0800c250 <__libc_init_array>:
 800c250:	b570      	push	{r4, r5, r6, lr}
 800c252:	4d0d      	ldr	r5, [pc, #52]	; (800c288 <__libc_init_array+0x38>)
 800c254:	4c0d      	ldr	r4, [pc, #52]	; (800c28c <__libc_init_array+0x3c>)
 800c256:	1b64      	subs	r4, r4, r5
 800c258:	10a4      	asrs	r4, r4, #2
 800c25a:	2600      	movs	r6, #0
 800c25c:	42a6      	cmp	r6, r4
 800c25e:	d109      	bne.n	800c274 <__libc_init_array+0x24>
 800c260:	4d0b      	ldr	r5, [pc, #44]	; (800c290 <__libc_init_array+0x40>)
 800c262:	4c0c      	ldr	r4, [pc, #48]	; (800c294 <__libc_init_array+0x44>)
 800c264:	f001 f9b4 	bl	800d5d0 <_init>
 800c268:	1b64      	subs	r4, r4, r5
 800c26a:	10a4      	asrs	r4, r4, #2
 800c26c:	2600      	movs	r6, #0
 800c26e:	42a6      	cmp	r6, r4
 800c270:	d105      	bne.n	800c27e <__libc_init_array+0x2e>
 800c272:	bd70      	pop	{r4, r5, r6, pc}
 800c274:	f855 3b04 	ldr.w	r3, [r5], #4
 800c278:	4798      	blx	r3
 800c27a:	3601      	adds	r6, #1
 800c27c:	e7ee      	b.n	800c25c <__libc_init_array+0xc>
 800c27e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c282:	4798      	blx	r3
 800c284:	3601      	adds	r6, #1
 800c286:	e7f2      	b.n	800c26e <__libc_init_array+0x1e>
 800c288:	0800dd40 	.word	0x0800dd40
 800c28c:	0800dd40 	.word	0x0800dd40
 800c290:	0800dd40 	.word	0x0800dd40
 800c294:	0800dd44 	.word	0x0800dd44

0800c298 <memcpy>:
 800c298:	440a      	add	r2, r1
 800c29a:	4291      	cmp	r1, r2
 800c29c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2a0:	d100      	bne.n	800c2a4 <memcpy+0xc>
 800c2a2:	4770      	bx	lr
 800c2a4:	b510      	push	{r4, lr}
 800c2a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2ae:	4291      	cmp	r1, r2
 800c2b0:	d1f9      	bne.n	800c2a6 <memcpy+0xe>
 800c2b2:	bd10      	pop	{r4, pc}

0800c2b4 <memset>:
 800c2b4:	4402      	add	r2, r0
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d100      	bne.n	800c2be <memset+0xa>
 800c2bc:	4770      	bx	lr
 800c2be:	f803 1b01 	strb.w	r1, [r3], #1
 800c2c2:	e7f9      	b.n	800c2b8 <memset+0x4>

0800c2c4 <iprintf>:
 800c2c4:	b40f      	push	{r0, r1, r2, r3}
 800c2c6:	4b0a      	ldr	r3, [pc, #40]	; (800c2f0 <iprintf+0x2c>)
 800c2c8:	b513      	push	{r0, r1, r4, lr}
 800c2ca:	681c      	ldr	r4, [r3, #0]
 800c2cc:	b124      	cbz	r4, 800c2d8 <iprintf+0x14>
 800c2ce:	69a3      	ldr	r3, [r4, #24]
 800c2d0:	b913      	cbnz	r3, 800c2d8 <iprintf+0x14>
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f000 fb7a 	bl	800c9cc <__sinit>
 800c2d8:	ab05      	add	r3, sp, #20
 800c2da:	9a04      	ldr	r2, [sp, #16]
 800c2dc:	68a1      	ldr	r1, [r4, #8]
 800c2de:	9301      	str	r3, [sp, #4]
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	f000 fd9d 	bl	800ce20 <_vfiprintf_r>
 800c2e6:	b002      	add	sp, #8
 800c2e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2ec:	b004      	add	sp, #16
 800c2ee:	4770      	bx	lr
 800c2f0:	20000098 	.word	0x20000098

0800c2f4 <_puts_r>:
 800c2f4:	b570      	push	{r4, r5, r6, lr}
 800c2f6:	460e      	mov	r6, r1
 800c2f8:	4605      	mov	r5, r0
 800c2fa:	b118      	cbz	r0, 800c304 <_puts_r+0x10>
 800c2fc:	6983      	ldr	r3, [r0, #24]
 800c2fe:	b90b      	cbnz	r3, 800c304 <_puts_r+0x10>
 800c300:	f000 fb64 	bl	800c9cc <__sinit>
 800c304:	69ab      	ldr	r3, [r5, #24]
 800c306:	68ac      	ldr	r4, [r5, #8]
 800c308:	b913      	cbnz	r3, 800c310 <_puts_r+0x1c>
 800c30a:	4628      	mov	r0, r5
 800c30c:	f000 fb5e 	bl	800c9cc <__sinit>
 800c310:	4b2c      	ldr	r3, [pc, #176]	; (800c3c4 <_puts_r+0xd0>)
 800c312:	429c      	cmp	r4, r3
 800c314:	d120      	bne.n	800c358 <_puts_r+0x64>
 800c316:	686c      	ldr	r4, [r5, #4]
 800c318:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c31a:	07db      	lsls	r3, r3, #31
 800c31c:	d405      	bmi.n	800c32a <_puts_r+0x36>
 800c31e:	89a3      	ldrh	r3, [r4, #12]
 800c320:	0598      	lsls	r0, r3, #22
 800c322:	d402      	bmi.n	800c32a <_puts_r+0x36>
 800c324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c326:	f000 fc01 	bl	800cb2c <__retarget_lock_acquire_recursive>
 800c32a:	89a3      	ldrh	r3, [r4, #12]
 800c32c:	0719      	lsls	r1, r3, #28
 800c32e:	d51d      	bpl.n	800c36c <_puts_r+0x78>
 800c330:	6923      	ldr	r3, [r4, #16]
 800c332:	b1db      	cbz	r3, 800c36c <_puts_r+0x78>
 800c334:	3e01      	subs	r6, #1
 800c336:	68a3      	ldr	r3, [r4, #8]
 800c338:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c33c:	3b01      	subs	r3, #1
 800c33e:	60a3      	str	r3, [r4, #8]
 800c340:	bb39      	cbnz	r1, 800c392 <_puts_r+0x9e>
 800c342:	2b00      	cmp	r3, #0
 800c344:	da38      	bge.n	800c3b8 <_puts_r+0xc4>
 800c346:	4622      	mov	r2, r4
 800c348:	210a      	movs	r1, #10
 800c34a:	4628      	mov	r0, r5
 800c34c:	f000 f946 	bl	800c5dc <__swbuf_r>
 800c350:	3001      	adds	r0, #1
 800c352:	d011      	beq.n	800c378 <_puts_r+0x84>
 800c354:	250a      	movs	r5, #10
 800c356:	e011      	b.n	800c37c <_puts_r+0x88>
 800c358:	4b1b      	ldr	r3, [pc, #108]	; (800c3c8 <_puts_r+0xd4>)
 800c35a:	429c      	cmp	r4, r3
 800c35c:	d101      	bne.n	800c362 <_puts_r+0x6e>
 800c35e:	68ac      	ldr	r4, [r5, #8]
 800c360:	e7da      	b.n	800c318 <_puts_r+0x24>
 800c362:	4b1a      	ldr	r3, [pc, #104]	; (800c3cc <_puts_r+0xd8>)
 800c364:	429c      	cmp	r4, r3
 800c366:	bf08      	it	eq
 800c368:	68ec      	ldreq	r4, [r5, #12]
 800c36a:	e7d5      	b.n	800c318 <_puts_r+0x24>
 800c36c:	4621      	mov	r1, r4
 800c36e:	4628      	mov	r0, r5
 800c370:	f000 f986 	bl	800c680 <__swsetup_r>
 800c374:	2800      	cmp	r0, #0
 800c376:	d0dd      	beq.n	800c334 <_puts_r+0x40>
 800c378:	f04f 35ff 	mov.w	r5, #4294967295
 800c37c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c37e:	07da      	lsls	r2, r3, #31
 800c380:	d405      	bmi.n	800c38e <_puts_r+0x9a>
 800c382:	89a3      	ldrh	r3, [r4, #12]
 800c384:	059b      	lsls	r3, r3, #22
 800c386:	d402      	bmi.n	800c38e <_puts_r+0x9a>
 800c388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c38a:	f000 fbd0 	bl	800cb2e <__retarget_lock_release_recursive>
 800c38e:	4628      	mov	r0, r5
 800c390:	bd70      	pop	{r4, r5, r6, pc}
 800c392:	2b00      	cmp	r3, #0
 800c394:	da04      	bge.n	800c3a0 <_puts_r+0xac>
 800c396:	69a2      	ldr	r2, [r4, #24]
 800c398:	429a      	cmp	r2, r3
 800c39a:	dc06      	bgt.n	800c3aa <_puts_r+0xb6>
 800c39c:	290a      	cmp	r1, #10
 800c39e:	d004      	beq.n	800c3aa <_puts_r+0xb6>
 800c3a0:	6823      	ldr	r3, [r4, #0]
 800c3a2:	1c5a      	adds	r2, r3, #1
 800c3a4:	6022      	str	r2, [r4, #0]
 800c3a6:	7019      	strb	r1, [r3, #0]
 800c3a8:	e7c5      	b.n	800c336 <_puts_r+0x42>
 800c3aa:	4622      	mov	r2, r4
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	f000 f915 	bl	800c5dc <__swbuf_r>
 800c3b2:	3001      	adds	r0, #1
 800c3b4:	d1bf      	bne.n	800c336 <_puts_r+0x42>
 800c3b6:	e7df      	b.n	800c378 <_puts_r+0x84>
 800c3b8:	6823      	ldr	r3, [r4, #0]
 800c3ba:	250a      	movs	r5, #10
 800c3bc:	1c5a      	adds	r2, r3, #1
 800c3be:	6022      	str	r2, [r4, #0]
 800c3c0:	701d      	strb	r5, [r3, #0]
 800c3c2:	e7db      	b.n	800c37c <_puts_r+0x88>
 800c3c4:	0800dcc4 	.word	0x0800dcc4
 800c3c8:	0800dce4 	.word	0x0800dce4
 800c3cc:	0800dca4 	.word	0x0800dca4

0800c3d0 <puts>:
 800c3d0:	4b02      	ldr	r3, [pc, #8]	; (800c3dc <puts+0xc>)
 800c3d2:	4601      	mov	r1, r0
 800c3d4:	6818      	ldr	r0, [r3, #0]
 800c3d6:	f7ff bf8d 	b.w	800c2f4 <_puts_r>
 800c3da:	bf00      	nop
 800c3dc:	20000098 	.word	0x20000098

0800c3e0 <strchr>:
 800c3e0:	b2c9      	uxtb	r1, r1
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3e8:	b11a      	cbz	r2, 800c3f2 <strchr+0x12>
 800c3ea:	428a      	cmp	r2, r1
 800c3ec:	d1f9      	bne.n	800c3e2 <strchr+0x2>
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	4770      	bx	lr
 800c3f2:	2900      	cmp	r1, #0
 800c3f4:	bf18      	it	ne
 800c3f6:	2300      	movne	r3, #0
 800c3f8:	e7f9      	b.n	800c3ee <strchr+0xe>

0800c3fa <strcpy>:
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c400:	f803 2b01 	strb.w	r2, [r3], #1
 800c404:	2a00      	cmp	r2, #0
 800c406:	d1f9      	bne.n	800c3fc <strcpy+0x2>
 800c408:	4770      	bx	lr
	...

0800c40c <strtok>:
 800c40c:	4b16      	ldr	r3, [pc, #88]	; (800c468 <strtok+0x5c>)
 800c40e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c410:	681e      	ldr	r6, [r3, #0]
 800c412:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800c414:	4605      	mov	r5, r0
 800c416:	b9fc      	cbnz	r4, 800c458 <strtok+0x4c>
 800c418:	2050      	movs	r0, #80	; 0x50
 800c41a:	9101      	str	r1, [sp, #4]
 800c41c:	f000 fbee 	bl	800cbfc <malloc>
 800c420:	9901      	ldr	r1, [sp, #4]
 800c422:	65b0      	str	r0, [r6, #88]	; 0x58
 800c424:	4602      	mov	r2, r0
 800c426:	b920      	cbnz	r0, 800c432 <strtok+0x26>
 800c428:	4b10      	ldr	r3, [pc, #64]	; (800c46c <strtok+0x60>)
 800c42a:	4811      	ldr	r0, [pc, #68]	; (800c470 <strtok+0x64>)
 800c42c:	2157      	movs	r1, #87	; 0x57
 800c42e:	f000 f995 	bl	800c75c <__assert_func>
 800c432:	e9c0 4400 	strd	r4, r4, [r0]
 800c436:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c43a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c43e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c442:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c446:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c44a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c44e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c452:	6184      	str	r4, [r0, #24]
 800c454:	7704      	strb	r4, [r0, #28]
 800c456:	6244      	str	r4, [r0, #36]	; 0x24
 800c458:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800c45a:	2301      	movs	r3, #1
 800c45c:	4628      	mov	r0, r5
 800c45e:	b002      	add	sp, #8
 800c460:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c464:	f000 b806 	b.w	800c474 <__strtok_r>
 800c468:	20000098 	.word	0x20000098
 800c46c:	0800daf0 	.word	0x0800daf0
 800c470:	0800db07 	.word	0x0800db07

0800c474 <__strtok_r>:
 800c474:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c476:	b908      	cbnz	r0, 800c47c <__strtok_r+0x8>
 800c478:	6810      	ldr	r0, [r2, #0]
 800c47a:	b188      	cbz	r0, 800c4a0 <__strtok_r+0x2c>
 800c47c:	4604      	mov	r4, r0
 800c47e:	4620      	mov	r0, r4
 800c480:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c484:	460f      	mov	r7, r1
 800c486:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c48a:	b91e      	cbnz	r6, 800c494 <__strtok_r+0x20>
 800c48c:	b965      	cbnz	r5, 800c4a8 <__strtok_r+0x34>
 800c48e:	6015      	str	r5, [r2, #0]
 800c490:	4628      	mov	r0, r5
 800c492:	e005      	b.n	800c4a0 <__strtok_r+0x2c>
 800c494:	42b5      	cmp	r5, r6
 800c496:	d1f6      	bne.n	800c486 <__strtok_r+0x12>
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d1f0      	bne.n	800c47e <__strtok_r+0xa>
 800c49c:	6014      	str	r4, [r2, #0]
 800c49e:	7003      	strb	r3, [r0, #0]
 800c4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4a2:	461c      	mov	r4, r3
 800c4a4:	e00c      	b.n	800c4c0 <__strtok_r+0x4c>
 800c4a6:	b915      	cbnz	r5, 800c4ae <__strtok_r+0x3a>
 800c4a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c4ac:	460e      	mov	r6, r1
 800c4ae:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c4b2:	42ab      	cmp	r3, r5
 800c4b4:	d1f7      	bne.n	800c4a6 <__strtok_r+0x32>
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d0f3      	beq.n	800c4a2 <__strtok_r+0x2e>
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c4c0:	6014      	str	r4, [r2, #0]
 800c4c2:	e7ed      	b.n	800c4a0 <__strtok_r+0x2c>

0800c4c4 <_strtol_l.constprop.0>:
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4ca:	d001      	beq.n	800c4d0 <_strtol_l.constprop.0+0xc>
 800c4cc:	2b24      	cmp	r3, #36	; 0x24
 800c4ce:	d906      	bls.n	800c4de <_strtol_l.constprop.0+0x1a>
 800c4d0:	f7ff feb8 	bl	800c244 <__errno>
 800c4d4:	2316      	movs	r3, #22
 800c4d6:	6003      	str	r3, [r0, #0]
 800c4d8:	2000      	movs	r0, #0
 800c4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4de:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c5c4 <_strtol_l.constprop.0+0x100>
 800c4e2:	460d      	mov	r5, r1
 800c4e4:	462e      	mov	r6, r5
 800c4e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c4ea:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c4ee:	f017 0708 	ands.w	r7, r7, #8
 800c4f2:	d1f7      	bne.n	800c4e4 <_strtol_l.constprop.0+0x20>
 800c4f4:	2c2d      	cmp	r4, #45	; 0x2d
 800c4f6:	d132      	bne.n	800c55e <_strtol_l.constprop.0+0x9a>
 800c4f8:	782c      	ldrb	r4, [r5, #0]
 800c4fa:	2701      	movs	r7, #1
 800c4fc:	1cb5      	adds	r5, r6, #2
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d05b      	beq.n	800c5ba <_strtol_l.constprop.0+0xf6>
 800c502:	2b10      	cmp	r3, #16
 800c504:	d109      	bne.n	800c51a <_strtol_l.constprop.0+0x56>
 800c506:	2c30      	cmp	r4, #48	; 0x30
 800c508:	d107      	bne.n	800c51a <_strtol_l.constprop.0+0x56>
 800c50a:	782c      	ldrb	r4, [r5, #0]
 800c50c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c510:	2c58      	cmp	r4, #88	; 0x58
 800c512:	d14d      	bne.n	800c5b0 <_strtol_l.constprop.0+0xec>
 800c514:	786c      	ldrb	r4, [r5, #1]
 800c516:	2310      	movs	r3, #16
 800c518:	3502      	adds	r5, #2
 800c51a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c51e:	f108 38ff 	add.w	r8, r8, #4294967295
 800c522:	f04f 0c00 	mov.w	ip, #0
 800c526:	fbb8 f9f3 	udiv	r9, r8, r3
 800c52a:	4666      	mov	r6, ip
 800c52c:	fb03 8a19 	mls	sl, r3, r9, r8
 800c530:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c534:	f1be 0f09 	cmp.w	lr, #9
 800c538:	d816      	bhi.n	800c568 <_strtol_l.constprop.0+0xa4>
 800c53a:	4674      	mov	r4, lr
 800c53c:	42a3      	cmp	r3, r4
 800c53e:	dd24      	ble.n	800c58a <_strtol_l.constprop.0+0xc6>
 800c540:	f1bc 0f00 	cmp.w	ip, #0
 800c544:	db1e      	blt.n	800c584 <_strtol_l.constprop.0+0xc0>
 800c546:	45b1      	cmp	r9, r6
 800c548:	d31c      	bcc.n	800c584 <_strtol_l.constprop.0+0xc0>
 800c54a:	d101      	bne.n	800c550 <_strtol_l.constprop.0+0x8c>
 800c54c:	45a2      	cmp	sl, r4
 800c54e:	db19      	blt.n	800c584 <_strtol_l.constprop.0+0xc0>
 800c550:	fb06 4603 	mla	r6, r6, r3, r4
 800c554:	f04f 0c01 	mov.w	ip, #1
 800c558:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c55c:	e7e8      	b.n	800c530 <_strtol_l.constprop.0+0x6c>
 800c55e:	2c2b      	cmp	r4, #43	; 0x2b
 800c560:	bf04      	itt	eq
 800c562:	782c      	ldrbeq	r4, [r5, #0]
 800c564:	1cb5      	addeq	r5, r6, #2
 800c566:	e7ca      	b.n	800c4fe <_strtol_l.constprop.0+0x3a>
 800c568:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c56c:	f1be 0f19 	cmp.w	lr, #25
 800c570:	d801      	bhi.n	800c576 <_strtol_l.constprop.0+0xb2>
 800c572:	3c37      	subs	r4, #55	; 0x37
 800c574:	e7e2      	b.n	800c53c <_strtol_l.constprop.0+0x78>
 800c576:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c57a:	f1be 0f19 	cmp.w	lr, #25
 800c57e:	d804      	bhi.n	800c58a <_strtol_l.constprop.0+0xc6>
 800c580:	3c57      	subs	r4, #87	; 0x57
 800c582:	e7db      	b.n	800c53c <_strtol_l.constprop.0+0x78>
 800c584:	f04f 3cff 	mov.w	ip, #4294967295
 800c588:	e7e6      	b.n	800c558 <_strtol_l.constprop.0+0x94>
 800c58a:	f1bc 0f00 	cmp.w	ip, #0
 800c58e:	da05      	bge.n	800c59c <_strtol_l.constprop.0+0xd8>
 800c590:	2322      	movs	r3, #34	; 0x22
 800c592:	6003      	str	r3, [r0, #0]
 800c594:	4646      	mov	r6, r8
 800c596:	b942      	cbnz	r2, 800c5aa <_strtol_l.constprop.0+0xe6>
 800c598:	4630      	mov	r0, r6
 800c59a:	e79e      	b.n	800c4da <_strtol_l.constprop.0+0x16>
 800c59c:	b107      	cbz	r7, 800c5a0 <_strtol_l.constprop.0+0xdc>
 800c59e:	4276      	negs	r6, r6
 800c5a0:	2a00      	cmp	r2, #0
 800c5a2:	d0f9      	beq.n	800c598 <_strtol_l.constprop.0+0xd4>
 800c5a4:	f1bc 0f00 	cmp.w	ip, #0
 800c5a8:	d000      	beq.n	800c5ac <_strtol_l.constprop.0+0xe8>
 800c5aa:	1e69      	subs	r1, r5, #1
 800c5ac:	6011      	str	r1, [r2, #0]
 800c5ae:	e7f3      	b.n	800c598 <_strtol_l.constprop.0+0xd4>
 800c5b0:	2430      	movs	r4, #48	; 0x30
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d1b1      	bne.n	800c51a <_strtol_l.constprop.0+0x56>
 800c5b6:	2308      	movs	r3, #8
 800c5b8:	e7af      	b.n	800c51a <_strtol_l.constprop.0+0x56>
 800c5ba:	2c30      	cmp	r4, #48	; 0x30
 800c5bc:	d0a5      	beq.n	800c50a <_strtol_l.constprop.0+0x46>
 800c5be:	230a      	movs	r3, #10
 800c5c0:	e7ab      	b.n	800c51a <_strtol_l.constprop.0+0x56>
 800c5c2:	bf00      	nop
 800c5c4:	0800dba1 	.word	0x0800dba1

0800c5c8 <strtol>:
 800c5c8:	4613      	mov	r3, r2
 800c5ca:	460a      	mov	r2, r1
 800c5cc:	4601      	mov	r1, r0
 800c5ce:	4802      	ldr	r0, [pc, #8]	; (800c5d8 <strtol+0x10>)
 800c5d0:	6800      	ldr	r0, [r0, #0]
 800c5d2:	f7ff bf77 	b.w	800c4c4 <_strtol_l.constprop.0>
 800c5d6:	bf00      	nop
 800c5d8:	20000098 	.word	0x20000098

0800c5dc <__swbuf_r>:
 800c5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5de:	460e      	mov	r6, r1
 800c5e0:	4614      	mov	r4, r2
 800c5e2:	4605      	mov	r5, r0
 800c5e4:	b118      	cbz	r0, 800c5ee <__swbuf_r+0x12>
 800c5e6:	6983      	ldr	r3, [r0, #24]
 800c5e8:	b90b      	cbnz	r3, 800c5ee <__swbuf_r+0x12>
 800c5ea:	f000 f9ef 	bl	800c9cc <__sinit>
 800c5ee:	4b21      	ldr	r3, [pc, #132]	; (800c674 <__swbuf_r+0x98>)
 800c5f0:	429c      	cmp	r4, r3
 800c5f2:	d12b      	bne.n	800c64c <__swbuf_r+0x70>
 800c5f4:	686c      	ldr	r4, [r5, #4]
 800c5f6:	69a3      	ldr	r3, [r4, #24]
 800c5f8:	60a3      	str	r3, [r4, #8]
 800c5fa:	89a3      	ldrh	r3, [r4, #12]
 800c5fc:	071a      	lsls	r2, r3, #28
 800c5fe:	d52f      	bpl.n	800c660 <__swbuf_r+0x84>
 800c600:	6923      	ldr	r3, [r4, #16]
 800c602:	b36b      	cbz	r3, 800c660 <__swbuf_r+0x84>
 800c604:	6923      	ldr	r3, [r4, #16]
 800c606:	6820      	ldr	r0, [r4, #0]
 800c608:	1ac0      	subs	r0, r0, r3
 800c60a:	6963      	ldr	r3, [r4, #20]
 800c60c:	b2f6      	uxtb	r6, r6
 800c60e:	4283      	cmp	r3, r0
 800c610:	4637      	mov	r7, r6
 800c612:	dc04      	bgt.n	800c61e <__swbuf_r+0x42>
 800c614:	4621      	mov	r1, r4
 800c616:	4628      	mov	r0, r5
 800c618:	f000 f944 	bl	800c8a4 <_fflush_r>
 800c61c:	bb30      	cbnz	r0, 800c66c <__swbuf_r+0x90>
 800c61e:	68a3      	ldr	r3, [r4, #8]
 800c620:	3b01      	subs	r3, #1
 800c622:	60a3      	str	r3, [r4, #8]
 800c624:	6823      	ldr	r3, [r4, #0]
 800c626:	1c5a      	adds	r2, r3, #1
 800c628:	6022      	str	r2, [r4, #0]
 800c62a:	701e      	strb	r6, [r3, #0]
 800c62c:	6963      	ldr	r3, [r4, #20]
 800c62e:	3001      	adds	r0, #1
 800c630:	4283      	cmp	r3, r0
 800c632:	d004      	beq.n	800c63e <__swbuf_r+0x62>
 800c634:	89a3      	ldrh	r3, [r4, #12]
 800c636:	07db      	lsls	r3, r3, #31
 800c638:	d506      	bpl.n	800c648 <__swbuf_r+0x6c>
 800c63a:	2e0a      	cmp	r6, #10
 800c63c:	d104      	bne.n	800c648 <__swbuf_r+0x6c>
 800c63e:	4621      	mov	r1, r4
 800c640:	4628      	mov	r0, r5
 800c642:	f000 f92f 	bl	800c8a4 <_fflush_r>
 800c646:	b988      	cbnz	r0, 800c66c <__swbuf_r+0x90>
 800c648:	4638      	mov	r0, r7
 800c64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c64c:	4b0a      	ldr	r3, [pc, #40]	; (800c678 <__swbuf_r+0x9c>)
 800c64e:	429c      	cmp	r4, r3
 800c650:	d101      	bne.n	800c656 <__swbuf_r+0x7a>
 800c652:	68ac      	ldr	r4, [r5, #8]
 800c654:	e7cf      	b.n	800c5f6 <__swbuf_r+0x1a>
 800c656:	4b09      	ldr	r3, [pc, #36]	; (800c67c <__swbuf_r+0xa0>)
 800c658:	429c      	cmp	r4, r3
 800c65a:	bf08      	it	eq
 800c65c:	68ec      	ldreq	r4, [r5, #12]
 800c65e:	e7ca      	b.n	800c5f6 <__swbuf_r+0x1a>
 800c660:	4621      	mov	r1, r4
 800c662:	4628      	mov	r0, r5
 800c664:	f000 f80c 	bl	800c680 <__swsetup_r>
 800c668:	2800      	cmp	r0, #0
 800c66a:	d0cb      	beq.n	800c604 <__swbuf_r+0x28>
 800c66c:	f04f 37ff 	mov.w	r7, #4294967295
 800c670:	e7ea      	b.n	800c648 <__swbuf_r+0x6c>
 800c672:	bf00      	nop
 800c674:	0800dcc4 	.word	0x0800dcc4
 800c678:	0800dce4 	.word	0x0800dce4
 800c67c:	0800dca4 	.word	0x0800dca4

0800c680 <__swsetup_r>:
 800c680:	4b32      	ldr	r3, [pc, #200]	; (800c74c <__swsetup_r+0xcc>)
 800c682:	b570      	push	{r4, r5, r6, lr}
 800c684:	681d      	ldr	r5, [r3, #0]
 800c686:	4606      	mov	r6, r0
 800c688:	460c      	mov	r4, r1
 800c68a:	b125      	cbz	r5, 800c696 <__swsetup_r+0x16>
 800c68c:	69ab      	ldr	r3, [r5, #24]
 800c68e:	b913      	cbnz	r3, 800c696 <__swsetup_r+0x16>
 800c690:	4628      	mov	r0, r5
 800c692:	f000 f99b 	bl	800c9cc <__sinit>
 800c696:	4b2e      	ldr	r3, [pc, #184]	; (800c750 <__swsetup_r+0xd0>)
 800c698:	429c      	cmp	r4, r3
 800c69a:	d10f      	bne.n	800c6bc <__swsetup_r+0x3c>
 800c69c:	686c      	ldr	r4, [r5, #4]
 800c69e:	89a3      	ldrh	r3, [r4, #12]
 800c6a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6a4:	0719      	lsls	r1, r3, #28
 800c6a6:	d42c      	bmi.n	800c702 <__swsetup_r+0x82>
 800c6a8:	06dd      	lsls	r5, r3, #27
 800c6aa:	d411      	bmi.n	800c6d0 <__swsetup_r+0x50>
 800c6ac:	2309      	movs	r3, #9
 800c6ae:	6033      	str	r3, [r6, #0]
 800c6b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c6b4:	81a3      	strh	r3, [r4, #12]
 800c6b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ba:	e03e      	b.n	800c73a <__swsetup_r+0xba>
 800c6bc:	4b25      	ldr	r3, [pc, #148]	; (800c754 <__swsetup_r+0xd4>)
 800c6be:	429c      	cmp	r4, r3
 800c6c0:	d101      	bne.n	800c6c6 <__swsetup_r+0x46>
 800c6c2:	68ac      	ldr	r4, [r5, #8]
 800c6c4:	e7eb      	b.n	800c69e <__swsetup_r+0x1e>
 800c6c6:	4b24      	ldr	r3, [pc, #144]	; (800c758 <__swsetup_r+0xd8>)
 800c6c8:	429c      	cmp	r4, r3
 800c6ca:	bf08      	it	eq
 800c6cc:	68ec      	ldreq	r4, [r5, #12]
 800c6ce:	e7e6      	b.n	800c69e <__swsetup_r+0x1e>
 800c6d0:	0758      	lsls	r0, r3, #29
 800c6d2:	d512      	bpl.n	800c6fa <__swsetup_r+0x7a>
 800c6d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6d6:	b141      	cbz	r1, 800c6ea <__swsetup_r+0x6a>
 800c6d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6dc:	4299      	cmp	r1, r3
 800c6de:	d002      	beq.n	800c6e6 <__swsetup_r+0x66>
 800c6e0:	4630      	mov	r0, r6
 800c6e2:	f000 fa93 	bl	800cc0c <_free_r>
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	6363      	str	r3, [r4, #52]	; 0x34
 800c6ea:	89a3      	ldrh	r3, [r4, #12]
 800c6ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c6f0:	81a3      	strh	r3, [r4, #12]
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	6063      	str	r3, [r4, #4]
 800c6f6:	6923      	ldr	r3, [r4, #16]
 800c6f8:	6023      	str	r3, [r4, #0]
 800c6fa:	89a3      	ldrh	r3, [r4, #12]
 800c6fc:	f043 0308 	orr.w	r3, r3, #8
 800c700:	81a3      	strh	r3, [r4, #12]
 800c702:	6923      	ldr	r3, [r4, #16]
 800c704:	b94b      	cbnz	r3, 800c71a <__swsetup_r+0x9a>
 800c706:	89a3      	ldrh	r3, [r4, #12]
 800c708:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c70c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c710:	d003      	beq.n	800c71a <__swsetup_r+0x9a>
 800c712:	4621      	mov	r1, r4
 800c714:	4630      	mov	r0, r6
 800c716:	f000 fa31 	bl	800cb7c <__smakebuf_r>
 800c71a:	89a0      	ldrh	r0, [r4, #12]
 800c71c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c720:	f010 0301 	ands.w	r3, r0, #1
 800c724:	d00a      	beq.n	800c73c <__swsetup_r+0xbc>
 800c726:	2300      	movs	r3, #0
 800c728:	60a3      	str	r3, [r4, #8]
 800c72a:	6963      	ldr	r3, [r4, #20]
 800c72c:	425b      	negs	r3, r3
 800c72e:	61a3      	str	r3, [r4, #24]
 800c730:	6923      	ldr	r3, [r4, #16]
 800c732:	b943      	cbnz	r3, 800c746 <__swsetup_r+0xc6>
 800c734:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c738:	d1ba      	bne.n	800c6b0 <__swsetup_r+0x30>
 800c73a:	bd70      	pop	{r4, r5, r6, pc}
 800c73c:	0781      	lsls	r1, r0, #30
 800c73e:	bf58      	it	pl
 800c740:	6963      	ldrpl	r3, [r4, #20]
 800c742:	60a3      	str	r3, [r4, #8]
 800c744:	e7f4      	b.n	800c730 <__swsetup_r+0xb0>
 800c746:	2000      	movs	r0, #0
 800c748:	e7f7      	b.n	800c73a <__swsetup_r+0xba>
 800c74a:	bf00      	nop
 800c74c:	20000098 	.word	0x20000098
 800c750:	0800dcc4 	.word	0x0800dcc4
 800c754:	0800dce4 	.word	0x0800dce4
 800c758:	0800dca4 	.word	0x0800dca4

0800c75c <__assert_func>:
 800c75c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c75e:	4614      	mov	r4, r2
 800c760:	461a      	mov	r2, r3
 800c762:	4b09      	ldr	r3, [pc, #36]	; (800c788 <__assert_func+0x2c>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4605      	mov	r5, r0
 800c768:	68d8      	ldr	r0, [r3, #12]
 800c76a:	b14c      	cbz	r4, 800c780 <__assert_func+0x24>
 800c76c:	4b07      	ldr	r3, [pc, #28]	; (800c78c <__assert_func+0x30>)
 800c76e:	9100      	str	r1, [sp, #0]
 800c770:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c774:	4906      	ldr	r1, [pc, #24]	; (800c790 <__assert_func+0x34>)
 800c776:	462b      	mov	r3, r5
 800c778:	f000 f9a6 	bl	800cac8 <fiprintf>
 800c77c:	f000 fe7a 	bl	800d474 <abort>
 800c780:	4b04      	ldr	r3, [pc, #16]	; (800c794 <__assert_func+0x38>)
 800c782:	461c      	mov	r4, r3
 800c784:	e7f3      	b.n	800c76e <__assert_func+0x12>
 800c786:	bf00      	nop
 800c788:	20000098 	.word	0x20000098
 800c78c:	0800db64 	.word	0x0800db64
 800c790:	0800db71 	.word	0x0800db71
 800c794:	0800db9f 	.word	0x0800db9f

0800c798 <__sflush_r>:
 800c798:	898a      	ldrh	r2, [r1, #12]
 800c79a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c79e:	4605      	mov	r5, r0
 800c7a0:	0710      	lsls	r0, r2, #28
 800c7a2:	460c      	mov	r4, r1
 800c7a4:	d458      	bmi.n	800c858 <__sflush_r+0xc0>
 800c7a6:	684b      	ldr	r3, [r1, #4]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	dc05      	bgt.n	800c7b8 <__sflush_r+0x20>
 800c7ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	dc02      	bgt.n	800c7b8 <__sflush_r+0x20>
 800c7b2:	2000      	movs	r0, #0
 800c7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7ba:	2e00      	cmp	r6, #0
 800c7bc:	d0f9      	beq.n	800c7b2 <__sflush_r+0x1a>
 800c7be:	2300      	movs	r3, #0
 800c7c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c7c4:	682f      	ldr	r7, [r5, #0]
 800c7c6:	602b      	str	r3, [r5, #0]
 800c7c8:	d032      	beq.n	800c830 <__sflush_r+0x98>
 800c7ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c7cc:	89a3      	ldrh	r3, [r4, #12]
 800c7ce:	075a      	lsls	r2, r3, #29
 800c7d0:	d505      	bpl.n	800c7de <__sflush_r+0x46>
 800c7d2:	6863      	ldr	r3, [r4, #4]
 800c7d4:	1ac0      	subs	r0, r0, r3
 800c7d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7d8:	b10b      	cbz	r3, 800c7de <__sflush_r+0x46>
 800c7da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7dc:	1ac0      	subs	r0, r0, r3
 800c7de:	2300      	movs	r3, #0
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7e4:	6a21      	ldr	r1, [r4, #32]
 800c7e6:	4628      	mov	r0, r5
 800c7e8:	47b0      	blx	r6
 800c7ea:	1c43      	adds	r3, r0, #1
 800c7ec:	89a3      	ldrh	r3, [r4, #12]
 800c7ee:	d106      	bne.n	800c7fe <__sflush_r+0x66>
 800c7f0:	6829      	ldr	r1, [r5, #0]
 800c7f2:	291d      	cmp	r1, #29
 800c7f4:	d82c      	bhi.n	800c850 <__sflush_r+0xb8>
 800c7f6:	4a2a      	ldr	r2, [pc, #168]	; (800c8a0 <__sflush_r+0x108>)
 800c7f8:	40ca      	lsrs	r2, r1
 800c7fa:	07d6      	lsls	r6, r2, #31
 800c7fc:	d528      	bpl.n	800c850 <__sflush_r+0xb8>
 800c7fe:	2200      	movs	r2, #0
 800c800:	6062      	str	r2, [r4, #4]
 800c802:	04d9      	lsls	r1, r3, #19
 800c804:	6922      	ldr	r2, [r4, #16]
 800c806:	6022      	str	r2, [r4, #0]
 800c808:	d504      	bpl.n	800c814 <__sflush_r+0x7c>
 800c80a:	1c42      	adds	r2, r0, #1
 800c80c:	d101      	bne.n	800c812 <__sflush_r+0x7a>
 800c80e:	682b      	ldr	r3, [r5, #0]
 800c810:	b903      	cbnz	r3, 800c814 <__sflush_r+0x7c>
 800c812:	6560      	str	r0, [r4, #84]	; 0x54
 800c814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c816:	602f      	str	r7, [r5, #0]
 800c818:	2900      	cmp	r1, #0
 800c81a:	d0ca      	beq.n	800c7b2 <__sflush_r+0x1a>
 800c81c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c820:	4299      	cmp	r1, r3
 800c822:	d002      	beq.n	800c82a <__sflush_r+0x92>
 800c824:	4628      	mov	r0, r5
 800c826:	f000 f9f1 	bl	800cc0c <_free_r>
 800c82a:	2000      	movs	r0, #0
 800c82c:	6360      	str	r0, [r4, #52]	; 0x34
 800c82e:	e7c1      	b.n	800c7b4 <__sflush_r+0x1c>
 800c830:	6a21      	ldr	r1, [r4, #32]
 800c832:	2301      	movs	r3, #1
 800c834:	4628      	mov	r0, r5
 800c836:	47b0      	blx	r6
 800c838:	1c41      	adds	r1, r0, #1
 800c83a:	d1c7      	bne.n	800c7cc <__sflush_r+0x34>
 800c83c:	682b      	ldr	r3, [r5, #0]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d0c4      	beq.n	800c7cc <__sflush_r+0x34>
 800c842:	2b1d      	cmp	r3, #29
 800c844:	d001      	beq.n	800c84a <__sflush_r+0xb2>
 800c846:	2b16      	cmp	r3, #22
 800c848:	d101      	bne.n	800c84e <__sflush_r+0xb6>
 800c84a:	602f      	str	r7, [r5, #0]
 800c84c:	e7b1      	b.n	800c7b2 <__sflush_r+0x1a>
 800c84e:	89a3      	ldrh	r3, [r4, #12]
 800c850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c854:	81a3      	strh	r3, [r4, #12]
 800c856:	e7ad      	b.n	800c7b4 <__sflush_r+0x1c>
 800c858:	690f      	ldr	r7, [r1, #16]
 800c85a:	2f00      	cmp	r7, #0
 800c85c:	d0a9      	beq.n	800c7b2 <__sflush_r+0x1a>
 800c85e:	0793      	lsls	r3, r2, #30
 800c860:	680e      	ldr	r6, [r1, #0]
 800c862:	bf08      	it	eq
 800c864:	694b      	ldreq	r3, [r1, #20]
 800c866:	600f      	str	r7, [r1, #0]
 800c868:	bf18      	it	ne
 800c86a:	2300      	movne	r3, #0
 800c86c:	eba6 0807 	sub.w	r8, r6, r7
 800c870:	608b      	str	r3, [r1, #8]
 800c872:	f1b8 0f00 	cmp.w	r8, #0
 800c876:	dd9c      	ble.n	800c7b2 <__sflush_r+0x1a>
 800c878:	6a21      	ldr	r1, [r4, #32]
 800c87a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c87c:	4643      	mov	r3, r8
 800c87e:	463a      	mov	r2, r7
 800c880:	4628      	mov	r0, r5
 800c882:	47b0      	blx	r6
 800c884:	2800      	cmp	r0, #0
 800c886:	dc06      	bgt.n	800c896 <__sflush_r+0xfe>
 800c888:	89a3      	ldrh	r3, [r4, #12]
 800c88a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c88e:	81a3      	strh	r3, [r4, #12]
 800c890:	f04f 30ff 	mov.w	r0, #4294967295
 800c894:	e78e      	b.n	800c7b4 <__sflush_r+0x1c>
 800c896:	4407      	add	r7, r0
 800c898:	eba8 0800 	sub.w	r8, r8, r0
 800c89c:	e7e9      	b.n	800c872 <__sflush_r+0xda>
 800c89e:	bf00      	nop
 800c8a0:	20400001 	.word	0x20400001

0800c8a4 <_fflush_r>:
 800c8a4:	b538      	push	{r3, r4, r5, lr}
 800c8a6:	690b      	ldr	r3, [r1, #16]
 800c8a8:	4605      	mov	r5, r0
 800c8aa:	460c      	mov	r4, r1
 800c8ac:	b913      	cbnz	r3, 800c8b4 <_fflush_r+0x10>
 800c8ae:	2500      	movs	r5, #0
 800c8b0:	4628      	mov	r0, r5
 800c8b2:	bd38      	pop	{r3, r4, r5, pc}
 800c8b4:	b118      	cbz	r0, 800c8be <_fflush_r+0x1a>
 800c8b6:	6983      	ldr	r3, [r0, #24]
 800c8b8:	b90b      	cbnz	r3, 800c8be <_fflush_r+0x1a>
 800c8ba:	f000 f887 	bl	800c9cc <__sinit>
 800c8be:	4b14      	ldr	r3, [pc, #80]	; (800c910 <_fflush_r+0x6c>)
 800c8c0:	429c      	cmp	r4, r3
 800c8c2:	d11b      	bne.n	800c8fc <_fflush_r+0x58>
 800c8c4:	686c      	ldr	r4, [r5, #4]
 800c8c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d0ef      	beq.n	800c8ae <_fflush_r+0xa>
 800c8ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c8d0:	07d0      	lsls	r0, r2, #31
 800c8d2:	d404      	bmi.n	800c8de <_fflush_r+0x3a>
 800c8d4:	0599      	lsls	r1, r3, #22
 800c8d6:	d402      	bmi.n	800c8de <_fflush_r+0x3a>
 800c8d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8da:	f000 f927 	bl	800cb2c <__retarget_lock_acquire_recursive>
 800c8de:	4628      	mov	r0, r5
 800c8e0:	4621      	mov	r1, r4
 800c8e2:	f7ff ff59 	bl	800c798 <__sflush_r>
 800c8e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8e8:	07da      	lsls	r2, r3, #31
 800c8ea:	4605      	mov	r5, r0
 800c8ec:	d4e0      	bmi.n	800c8b0 <_fflush_r+0xc>
 800c8ee:	89a3      	ldrh	r3, [r4, #12]
 800c8f0:	059b      	lsls	r3, r3, #22
 800c8f2:	d4dd      	bmi.n	800c8b0 <_fflush_r+0xc>
 800c8f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8f6:	f000 f91a 	bl	800cb2e <__retarget_lock_release_recursive>
 800c8fa:	e7d9      	b.n	800c8b0 <_fflush_r+0xc>
 800c8fc:	4b05      	ldr	r3, [pc, #20]	; (800c914 <_fflush_r+0x70>)
 800c8fe:	429c      	cmp	r4, r3
 800c900:	d101      	bne.n	800c906 <_fflush_r+0x62>
 800c902:	68ac      	ldr	r4, [r5, #8]
 800c904:	e7df      	b.n	800c8c6 <_fflush_r+0x22>
 800c906:	4b04      	ldr	r3, [pc, #16]	; (800c918 <_fflush_r+0x74>)
 800c908:	429c      	cmp	r4, r3
 800c90a:	bf08      	it	eq
 800c90c:	68ec      	ldreq	r4, [r5, #12]
 800c90e:	e7da      	b.n	800c8c6 <_fflush_r+0x22>
 800c910:	0800dcc4 	.word	0x0800dcc4
 800c914:	0800dce4 	.word	0x0800dce4
 800c918:	0800dca4 	.word	0x0800dca4

0800c91c <std>:
 800c91c:	2300      	movs	r3, #0
 800c91e:	b510      	push	{r4, lr}
 800c920:	4604      	mov	r4, r0
 800c922:	e9c0 3300 	strd	r3, r3, [r0]
 800c926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c92a:	6083      	str	r3, [r0, #8]
 800c92c:	8181      	strh	r1, [r0, #12]
 800c92e:	6643      	str	r3, [r0, #100]	; 0x64
 800c930:	81c2      	strh	r2, [r0, #14]
 800c932:	6183      	str	r3, [r0, #24]
 800c934:	4619      	mov	r1, r3
 800c936:	2208      	movs	r2, #8
 800c938:	305c      	adds	r0, #92	; 0x5c
 800c93a:	f7ff fcbb 	bl	800c2b4 <memset>
 800c93e:	4b05      	ldr	r3, [pc, #20]	; (800c954 <std+0x38>)
 800c940:	6263      	str	r3, [r4, #36]	; 0x24
 800c942:	4b05      	ldr	r3, [pc, #20]	; (800c958 <std+0x3c>)
 800c944:	62a3      	str	r3, [r4, #40]	; 0x28
 800c946:	4b05      	ldr	r3, [pc, #20]	; (800c95c <std+0x40>)
 800c948:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c94a:	4b05      	ldr	r3, [pc, #20]	; (800c960 <std+0x44>)
 800c94c:	6224      	str	r4, [r4, #32]
 800c94e:	6323      	str	r3, [r4, #48]	; 0x30
 800c950:	bd10      	pop	{r4, pc}
 800c952:	bf00      	nop
 800c954:	0800d3c9 	.word	0x0800d3c9
 800c958:	0800d3eb 	.word	0x0800d3eb
 800c95c:	0800d423 	.word	0x0800d423
 800c960:	0800d447 	.word	0x0800d447

0800c964 <_cleanup_r>:
 800c964:	4901      	ldr	r1, [pc, #4]	; (800c96c <_cleanup_r+0x8>)
 800c966:	f000 b8c1 	b.w	800caec <_fwalk_reent>
 800c96a:	bf00      	nop
 800c96c:	0800c8a5 	.word	0x0800c8a5

0800c970 <__sfmoreglue>:
 800c970:	b570      	push	{r4, r5, r6, lr}
 800c972:	2268      	movs	r2, #104	; 0x68
 800c974:	1e4d      	subs	r5, r1, #1
 800c976:	4355      	muls	r5, r2
 800c978:	460e      	mov	r6, r1
 800c97a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c97e:	f000 f9b1 	bl	800cce4 <_malloc_r>
 800c982:	4604      	mov	r4, r0
 800c984:	b140      	cbz	r0, 800c998 <__sfmoreglue+0x28>
 800c986:	2100      	movs	r1, #0
 800c988:	e9c0 1600 	strd	r1, r6, [r0]
 800c98c:	300c      	adds	r0, #12
 800c98e:	60a0      	str	r0, [r4, #8]
 800c990:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c994:	f7ff fc8e 	bl	800c2b4 <memset>
 800c998:	4620      	mov	r0, r4
 800c99a:	bd70      	pop	{r4, r5, r6, pc}

0800c99c <__sfp_lock_acquire>:
 800c99c:	4801      	ldr	r0, [pc, #4]	; (800c9a4 <__sfp_lock_acquire+0x8>)
 800c99e:	f000 b8c5 	b.w	800cb2c <__retarget_lock_acquire_recursive>
 800c9a2:	bf00      	nop
 800c9a4:	200026f9 	.word	0x200026f9

0800c9a8 <__sfp_lock_release>:
 800c9a8:	4801      	ldr	r0, [pc, #4]	; (800c9b0 <__sfp_lock_release+0x8>)
 800c9aa:	f000 b8c0 	b.w	800cb2e <__retarget_lock_release_recursive>
 800c9ae:	bf00      	nop
 800c9b0:	200026f9 	.word	0x200026f9

0800c9b4 <__sinit_lock_acquire>:
 800c9b4:	4801      	ldr	r0, [pc, #4]	; (800c9bc <__sinit_lock_acquire+0x8>)
 800c9b6:	f000 b8b9 	b.w	800cb2c <__retarget_lock_acquire_recursive>
 800c9ba:	bf00      	nop
 800c9bc:	200026fa 	.word	0x200026fa

0800c9c0 <__sinit_lock_release>:
 800c9c0:	4801      	ldr	r0, [pc, #4]	; (800c9c8 <__sinit_lock_release+0x8>)
 800c9c2:	f000 b8b4 	b.w	800cb2e <__retarget_lock_release_recursive>
 800c9c6:	bf00      	nop
 800c9c8:	200026fa 	.word	0x200026fa

0800c9cc <__sinit>:
 800c9cc:	b510      	push	{r4, lr}
 800c9ce:	4604      	mov	r4, r0
 800c9d0:	f7ff fff0 	bl	800c9b4 <__sinit_lock_acquire>
 800c9d4:	69a3      	ldr	r3, [r4, #24]
 800c9d6:	b11b      	cbz	r3, 800c9e0 <__sinit+0x14>
 800c9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9dc:	f7ff bff0 	b.w	800c9c0 <__sinit_lock_release>
 800c9e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c9e4:	6523      	str	r3, [r4, #80]	; 0x50
 800c9e6:	4b13      	ldr	r3, [pc, #76]	; (800ca34 <__sinit+0x68>)
 800c9e8:	4a13      	ldr	r2, [pc, #76]	; (800ca38 <__sinit+0x6c>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	62a2      	str	r2, [r4, #40]	; 0x28
 800c9ee:	42a3      	cmp	r3, r4
 800c9f0:	bf04      	itt	eq
 800c9f2:	2301      	moveq	r3, #1
 800c9f4:	61a3      	streq	r3, [r4, #24]
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	f000 f820 	bl	800ca3c <__sfp>
 800c9fc:	6060      	str	r0, [r4, #4]
 800c9fe:	4620      	mov	r0, r4
 800ca00:	f000 f81c 	bl	800ca3c <__sfp>
 800ca04:	60a0      	str	r0, [r4, #8]
 800ca06:	4620      	mov	r0, r4
 800ca08:	f000 f818 	bl	800ca3c <__sfp>
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	60e0      	str	r0, [r4, #12]
 800ca10:	2104      	movs	r1, #4
 800ca12:	6860      	ldr	r0, [r4, #4]
 800ca14:	f7ff ff82 	bl	800c91c <std>
 800ca18:	68a0      	ldr	r0, [r4, #8]
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	2109      	movs	r1, #9
 800ca1e:	f7ff ff7d 	bl	800c91c <std>
 800ca22:	68e0      	ldr	r0, [r4, #12]
 800ca24:	2202      	movs	r2, #2
 800ca26:	2112      	movs	r1, #18
 800ca28:	f7ff ff78 	bl	800c91c <std>
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	61a3      	str	r3, [r4, #24]
 800ca30:	e7d2      	b.n	800c9d8 <__sinit+0xc>
 800ca32:	bf00      	nop
 800ca34:	0800daec 	.word	0x0800daec
 800ca38:	0800c965 	.word	0x0800c965

0800ca3c <__sfp>:
 800ca3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca3e:	4607      	mov	r7, r0
 800ca40:	f7ff ffac 	bl	800c99c <__sfp_lock_acquire>
 800ca44:	4b1e      	ldr	r3, [pc, #120]	; (800cac0 <__sfp+0x84>)
 800ca46:	681e      	ldr	r6, [r3, #0]
 800ca48:	69b3      	ldr	r3, [r6, #24]
 800ca4a:	b913      	cbnz	r3, 800ca52 <__sfp+0x16>
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	f7ff ffbd 	bl	800c9cc <__sinit>
 800ca52:	3648      	adds	r6, #72	; 0x48
 800ca54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ca58:	3b01      	subs	r3, #1
 800ca5a:	d503      	bpl.n	800ca64 <__sfp+0x28>
 800ca5c:	6833      	ldr	r3, [r6, #0]
 800ca5e:	b30b      	cbz	r3, 800caa4 <__sfp+0x68>
 800ca60:	6836      	ldr	r6, [r6, #0]
 800ca62:	e7f7      	b.n	800ca54 <__sfp+0x18>
 800ca64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ca68:	b9d5      	cbnz	r5, 800caa0 <__sfp+0x64>
 800ca6a:	4b16      	ldr	r3, [pc, #88]	; (800cac4 <__sfp+0x88>)
 800ca6c:	60e3      	str	r3, [r4, #12]
 800ca6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ca72:	6665      	str	r5, [r4, #100]	; 0x64
 800ca74:	f000 f859 	bl	800cb2a <__retarget_lock_init_recursive>
 800ca78:	f7ff ff96 	bl	800c9a8 <__sfp_lock_release>
 800ca7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ca80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ca84:	6025      	str	r5, [r4, #0]
 800ca86:	61a5      	str	r5, [r4, #24]
 800ca88:	2208      	movs	r2, #8
 800ca8a:	4629      	mov	r1, r5
 800ca8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ca90:	f7ff fc10 	bl	800c2b4 <memset>
 800ca94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ca98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caa0:	3468      	adds	r4, #104	; 0x68
 800caa2:	e7d9      	b.n	800ca58 <__sfp+0x1c>
 800caa4:	2104      	movs	r1, #4
 800caa6:	4638      	mov	r0, r7
 800caa8:	f7ff ff62 	bl	800c970 <__sfmoreglue>
 800caac:	4604      	mov	r4, r0
 800caae:	6030      	str	r0, [r6, #0]
 800cab0:	2800      	cmp	r0, #0
 800cab2:	d1d5      	bne.n	800ca60 <__sfp+0x24>
 800cab4:	f7ff ff78 	bl	800c9a8 <__sfp_lock_release>
 800cab8:	230c      	movs	r3, #12
 800caba:	603b      	str	r3, [r7, #0]
 800cabc:	e7ee      	b.n	800ca9c <__sfp+0x60>
 800cabe:	bf00      	nop
 800cac0:	0800daec 	.word	0x0800daec
 800cac4:	ffff0001 	.word	0xffff0001

0800cac8 <fiprintf>:
 800cac8:	b40e      	push	{r1, r2, r3}
 800caca:	b503      	push	{r0, r1, lr}
 800cacc:	4601      	mov	r1, r0
 800cace:	ab03      	add	r3, sp, #12
 800cad0:	4805      	ldr	r0, [pc, #20]	; (800cae8 <fiprintf+0x20>)
 800cad2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cad6:	6800      	ldr	r0, [r0, #0]
 800cad8:	9301      	str	r3, [sp, #4]
 800cada:	f000 f9a1 	bl	800ce20 <_vfiprintf_r>
 800cade:	b002      	add	sp, #8
 800cae0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cae4:	b003      	add	sp, #12
 800cae6:	4770      	bx	lr
 800cae8:	20000098 	.word	0x20000098

0800caec <_fwalk_reent>:
 800caec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caf0:	4606      	mov	r6, r0
 800caf2:	4688      	mov	r8, r1
 800caf4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800caf8:	2700      	movs	r7, #0
 800cafa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cafe:	f1b9 0901 	subs.w	r9, r9, #1
 800cb02:	d505      	bpl.n	800cb10 <_fwalk_reent+0x24>
 800cb04:	6824      	ldr	r4, [r4, #0]
 800cb06:	2c00      	cmp	r4, #0
 800cb08:	d1f7      	bne.n	800cafa <_fwalk_reent+0xe>
 800cb0a:	4638      	mov	r0, r7
 800cb0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb10:	89ab      	ldrh	r3, [r5, #12]
 800cb12:	2b01      	cmp	r3, #1
 800cb14:	d907      	bls.n	800cb26 <_fwalk_reent+0x3a>
 800cb16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	d003      	beq.n	800cb26 <_fwalk_reent+0x3a>
 800cb1e:	4629      	mov	r1, r5
 800cb20:	4630      	mov	r0, r6
 800cb22:	47c0      	blx	r8
 800cb24:	4307      	orrs	r7, r0
 800cb26:	3568      	adds	r5, #104	; 0x68
 800cb28:	e7e9      	b.n	800cafe <_fwalk_reent+0x12>

0800cb2a <__retarget_lock_init_recursive>:
 800cb2a:	4770      	bx	lr

0800cb2c <__retarget_lock_acquire_recursive>:
 800cb2c:	4770      	bx	lr

0800cb2e <__retarget_lock_release_recursive>:
 800cb2e:	4770      	bx	lr

0800cb30 <__swhatbuf_r>:
 800cb30:	b570      	push	{r4, r5, r6, lr}
 800cb32:	460e      	mov	r6, r1
 800cb34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb38:	2900      	cmp	r1, #0
 800cb3a:	b096      	sub	sp, #88	; 0x58
 800cb3c:	4614      	mov	r4, r2
 800cb3e:	461d      	mov	r5, r3
 800cb40:	da08      	bge.n	800cb54 <__swhatbuf_r+0x24>
 800cb42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cb46:	2200      	movs	r2, #0
 800cb48:	602a      	str	r2, [r5, #0]
 800cb4a:	061a      	lsls	r2, r3, #24
 800cb4c:	d410      	bmi.n	800cb70 <__swhatbuf_r+0x40>
 800cb4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb52:	e00e      	b.n	800cb72 <__swhatbuf_r+0x42>
 800cb54:	466a      	mov	r2, sp
 800cb56:	f000 fca5 	bl	800d4a4 <_fstat_r>
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	dbf1      	blt.n	800cb42 <__swhatbuf_r+0x12>
 800cb5e:	9a01      	ldr	r2, [sp, #4]
 800cb60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb68:	425a      	negs	r2, r3
 800cb6a:	415a      	adcs	r2, r3
 800cb6c:	602a      	str	r2, [r5, #0]
 800cb6e:	e7ee      	b.n	800cb4e <__swhatbuf_r+0x1e>
 800cb70:	2340      	movs	r3, #64	; 0x40
 800cb72:	2000      	movs	r0, #0
 800cb74:	6023      	str	r3, [r4, #0]
 800cb76:	b016      	add	sp, #88	; 0x58
 800cb78:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cb7c <__smakebuf_r>:
 800cb7c:	898b      	ldrh	r3, [r1, #12]
 800cb7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb80:	079d      	lsls	r5, r3, #30
 800cb82:	4606      	mov	r6, r0
 800cb84:	460c      	mov	r4, r1
 800cb86:	d507      	bpl.n	800cb98 <__smakebuf_r+0x1c>
 800cb88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb8c:	6023      	str	r3, [r4, #0]
 800cb8e:	6123      	str	r3, [r4, #16]
 800cb90:	2301      	movs	r3, #1
 800cb92:	6163      	str	r3, [r4, #20]
 800cb94:	b002      	add	sp, #8
 800cb96:	bd70      	pop	{r4, r5, r6, pc}
 800cb98:	ab01      	add	r3, sp, #4
 800cb9a:	466a      	mov	r2, sp
 800cb9c:	f7ff ffc8 	bl	800cb30 <__swhatbuf_r>
 800cba0:	9900      	ldr	r1, [sp, #0]
 800cba2:	4605      	mov	r5, r0
 800cba4:	4630      	mov	r0, r6
 800cba6:	f000 f89d 	bl	800cce4 <_malloc_r>
 800cbaa:	b948      	cbnz	r0, 800cbc0 <__smakebuf_r+0x44>
 800cbac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbb0:	059a      	lsls	r2, r3, #22
 800cbb2:	d4ef      	bmi.n	800cb94 <__smakebuf_r+0x18>
 800cbb4:	f023 0303 	bic.w	r3, r3, #3
 800cbb8:	f043 0302 	orr.w	r3, r3, #2
 800cbbc:	81a3      	strh	r3, [r4, #12]
 800cbbe:	e7e3      	b.n	800cb88 <__smakebuf_r+0xc>
 800cbc0:	4b0d      	ldr	r3, [pc, #52]	; (800cbf8 <__smakebuf_r+0x7c>)
 800cbc2:	62b3      	str	r3, [r6, #40]	; 0x28
 800cbc4:	89a3      	ldrh	r3, [r4, #12]
 800cbc6:	6020      	str	r0, [r4, #0]
 800cbc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbcc:	81a3      	strh	r3, [r4, #12]
 800cbce:	9b00      	ldr	r3, [sp, #0]
 800cbd0:	6163      	str	r3, [r4, #20]
 800cbd2:	9b01      	ldr	r3, [sp, #4]
 800cbd4:	6120      	str	r0, [r4, #16]
 800cbd6:	b15b      	cbz	r3, 800cbf0 <__smakebuf_r+0x74>
 800cbd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbdc:	4630      	mov	r0, r6
 800cbde:	f000 fc73 	bl	800d4c8 <_isatty_r>
 800cbe2:	b128      	cbz	r0, 800cbf0 <__smakebuf_r+0x74>
 800cbe4:	89a3      	ldrh	r3, [r4, #12]
 800cbe6:	f023 0303 	bic.w	r3, r3, #3
 800cbea:	f043 0301 	orr.w	r3, r3, #1
 800cbee:	81a3      	strh	r3, [r4, #12]
 800cbf0:	89a0      	ldrh	r0, [r4, #12]
 800cbf2:	4305      	orrs	r5, r0
 800cbf4:	81a5      	strh	r5, [r4, #12]
 800cbf6:	e7cd      	b.n	800cb94 <__smakebuf_r+0x18>
 800cbf8:	0800c965 	.word	0x0800c965

0800cbfc <malloc>:
 800cbfc:	4b02      	ldr	r3, [pc, #8]	; (800cc08 <malloc+0xc>)
 800cbfe:	4601      	mov	r1, r0
 800cc00:	6818      	ldr	r0, [r3, #0]
 800cc02:	f000 b86f 	b.w	800cce4 <_malloc_r>
 800cc06:	bf00      	nop
 800cc08:	20000098 	.word	0x20000098

0800cc0c <_free_r>:
 800cc0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc0e:	2900      	cmp	r1, #0
 800cc10:	d044      	beq.n	800cc9c <_free_r+0x90>
 800cc12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc16:	9001      	str	r0, [sp, #4]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	f1a1 0404 	sub.w	r4, r1, #4
 800cc1e:	bfb8      	it	lt
 800cc20:	18e4      	addlt	r4, r4, r3
 800cc22:	f000 fc73 	bl	800d50c <__malloc_lock>
 800cc26:	4a1e      	ldr	r2, [pc, #120]	; (800cca0 <_free_r+0x94>)
 800cc28:	9801      	ldr	r0, [sp, #4]
 800cc2a:	6813      	ldr	r3, [r2, #0]
 800cc2c:	b933      	cbnz	r3, 800cc3c <_free_r+0x30>
 800cc2e:	6063      	str	r3, [r4, #4]
 800cc30:	6014      	str	r4, [r2, #0]
 800cc32:	b003      	add	sp, #12
 800cc34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc38:	f000 bc6e 	b.w	800d518 <__malloc_unlock>
 800cc3c:	42a3      	cmp	r3, r4
 800cc3e:	d908      	bls.n	800cc52 <_free_r+0x46>
 800cc40:	6825      	ldr	r5, [r4, #0]
 800cc42:	1961      	adds	r1, r4, r5
 800cc44:	428b      	cmp	r3, r1
 800cc46:	bf01      	itttt	eq
 800cc48:	6819      	ldreq	r1, [r3, #0]
 800cc4a:	685b      	ldreq	r3, [r3, #4]
 800cc4c:	1949      	addeq	r1, r1, r5
 800cc4e:	6021      	streq	r1, [r4, #0]
 800cc50:	e7ed      	b.n	800cc2e <_free_r+0x22>
 800cc52:	461a      	mov	r2, r3
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	b10b      	cbz	r3, 800cc5c <_free_r+0x50>
 800cc58:	42a3      	cmp	r3, r4
 800cc5a:	d9fa      	bls.n	800cc52 <_free_r+0x46>
 800cc5c:	6811      	ldr	r1, [r2, #0]
 800cc5e:	1855      	adds	r5, r2, r1
 800cc60:	42a5      	cmp	r5, r4
 800cc62:	d10b      	bne.n	800cc7c <_free_r+0x70>
 800cc64:	6824      	ldr	r4, [r4, #0]
 800cc66:	4421      	add	r1, r4
 800cc68:	1854      	adds	r4, r2, r1
 800cc6a:	42a3      	cmp	r3, r4
 800cc6c:	6011      	str	r1, [r2, #0]
 800cc6e:	d1e0      	bne.n	800cc32 <_free_r+0x26>
 800cc70:	681c      	ldr	r4, [r3, #0]
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	6053      	str	r3, [r2, #4]
 800cc76:	4421      	add	r1, r4
 800cc78:	6011      	str	r1, [r2, #0]
 800cc7a:	e7da      	b.n	800cc32 <_free_r+0x26>
 800cc7c:	d902      	bls.n	800cc84 <_free_r+0x78>
 800cc7e:	230c      	movs	r3, #12
 800cc80:	6003      	str	r3, [r0, #0]
 800cc82:	e7d6      	b.n	800cc32 <_free_r+0x26>
 800cc84:	6825      	ldr	r5, [r4, #0]
 800cc86:	1961      	adds	r1, r4, r5
 800cc88:	428b      	cmp	r3, r1
 800cc8a:	bf04      	itt	eq
 800cc8c:	6819      	ldreq	r1, [r3, #0]
 800cc8e:	685b      	ldreq	r3, [r3, #4]
 800cc90:	6063      	str	r3, [r4, #4]
 800cc92:	bf04      	itt	eq
 800cc94:	1949      	addeq	r1, r1, r5
 800cc96:	6021      	streq	r1, [r4, #0]
 800cc98:	6054      	str	r4, [r2, #4]
 800cc9a:	e7ca      	b.n	800cc32 <_free_r+0x26>
 800cc9c:	b003      	add	sp, #12
 800cc9e:	bd30      	pop	{r4, r5, pc}
 800cca0:	200026fc 	.word	0x200026fc

0800cca4 <sbrk_aligned>:
 800cca4:	b570      	push	{r4, r5, r6, lr}
 800cca6:	4e0e      	ldr	r6, [pc, #56]	; (800cce0 <sbrk_aligned+0x3c>)
 800cca8:	460c      	mov	r4, r1
 800ccaa:	6831      	ldr	r1, [r6, #0]
 800ccac:	4605      	mov	r5, r0
 800ccae:	b911      	cbnz	r1, 800ccb6 <sbrk_aligned+0x12>
 800ccb0:	f000 fb7a 	bl	800d3a8 <_sbrk_r>
 800ccb4:	6030      	str	r0, [r6, #0]
 800ccb6:	4621      	mov	r1, r4
 800ccb8:	4628      	mov	r0, r5
 800ccba:	f000 fb75 	bl	800d3a8 <_sbrk_r>
 800ccbe:	1c43      	adds	r3, r0, #1
 800ccc0:	d00a      	beq.n	800ccd8 <sbrk_aligned+0x34>
 800ccc2:	1cc4      	adds	r4, r0, #3
 800ccc4:	f024 0403 	bic.w	r4, r4, #3
 800ccc8:	42a0      	cmp	r0, r4
 800ccca:	d007      	beq.n	800ccdc <sbrk_aligned+0x38>
 800cccc:	1a21      	subs	r1, r4, r0
 800ccce:	4628      	mov	r0, r5
 800ccd0:	f000 fb6a 	bl	800d3a8 <_sbrk_r>
 800ccd4:	3001      	adds	r0, #1
 800ccd6:	d101      	bne.n	800ccdc <sbrk_aligned+0x38>
 800ccd8:	f04f 34ff 	mov.w	r4, #4294967295
 800ccdc:	4620      	mov	r0, r4
 800ccde:	bd70      	pop	{r4, r5, r6, pc}
 800cce0:	20002700 	.word	0x20002700

0800cce4 <_malloc_r>:
 800cce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cce8:	1ccd      	adds	r5, r1, #3
 800ccea:	f025 0503 	bic.w	r5, r5, #3
 800ccee:	3508      	adds	r5, #8
 800ccf0:	2d0c      	cmp	r5, #12
 800ccf2:	bf38      	it	cc
 800ccf4:	250c      	movcc	r5, #12
 800ccf6:	2d00      	cmp	r5, #0
 800ccf8:	4607      	mov	r7, r0
 800ccfa:	db01      	blt.n	800cd00 <_malloc_r+0x1c>
 800ccfc:	42a9      	cmp	r1, r5
 800ccfe:	d905      	bls.n	800cd0c <_malloc_r+0x28>
 800cd00:	230c      	movs	r3, #12
 800cd02:	603b      	str	r3, [r7, #0]
 800cd04:	2600      	movs	r6, #0
 800cd06:	4630      	mov	r0, r6
 800cd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd0c:	4e2e      	ldr	r6, [pc, #184]	; (800cdc8 <_malloc_r+0xe4>)
 800cd0e:	f000 fbfd 	bl	800d50c <__malloc_lock>
 800cd12:	6833      	ldr	r3, [r6, #0]
 800cd14:	461c      	mov	r4, r3
 800cd16:	bb34      	cbnz	r4, 800cd66 <_malloc_r+0x82>
 800cd18:	4629      	mov	r1, r5
 800cd1a:	4638      	mov	r0, r7
 800cd1c:	f7ff ffc2 	bl	800cca4 <sbrk_aligned>
 800cd20:	1c43      	adds	r3, r0, #1
 800cd22:	4604      	mov	r4, r0
 800cd24:	d14d      	bne.n	800cdc2 <_malloc_r+0xde>
 800cd26:	6834      	ldr	r4, [r6, #0]
 800cd28:	4626      	mov	r6, r4
 800cd2a:	2e00      	cmp	r6, #0
 800cd2c:	d140      	bne.n	800cdb0 <_malloc_r+0xcc>
 800cd2e:	6823      	ldr	r3, [r4, #0]
 800cd30:	4631      	mov	r1, r6
 800cd32:	4638      	mov	r0, r7
 800cd34:	eb04 0803 	add.w	r8, r4, r3
 800cd38:	f000 fb36 	bl	800d3a8 <_sbrk_r>
 800cd3c:	4580      	cmp	r8, r0
 800cd3e:	d13a      	bne.n	800cdb6 <_malloc_r+0xd2>
 800cd40:	6821      	ldr	r1, [r4, #0]
 800cd42:	3503      	adds	r5, #3
 800cd44:	1a6d      	subs	r5, r5, r1
 800cd46:	f025 0503 	bic.w	r5, r5, #3
 800cd4a:	3508      	adds	r5, #8
 800cd4c:	2d0c      	cmp	r5, #12
 800cd4e:	bf38      	it	cc
 800cd50:	250c      	movcc	r5, #12
 800cd52:	4629      	mov	r1, r5
 800cd54:	4638      	mov	r0, r7
 800cd56:	f7ff ffa5 	bl	800cca4 <sbrk_aligned>
 800cd5a:	3001      	adds	r0, #1
 800cd5c:	d02b      	beq.n	800cdb6 <_malloc_r+0xd2>
 800cd5e:	6823      	ldr	r3, [r4, #0]
 800cd60:	442b      	add	r3, r5
 800cd62:	6023      	str	r3, [r4, #0]
 800cd64:	e00e      	b.n	800cd84 <_malloc_r+0xa0>
 800cd66:	6822      	ldr	r2, [r4, #0]
 800cd68:	1b52      	subs	r2, r2, r5
 800cd6a:	d41e      	bmi.n	800cdaa <_malloc_r+0xc6>
 800cd6c:	2a0b      	cmp	r2, #11
 800cd6e:	d916      	bls.n	800cd9e <_malloc_r+0xba>
 800cd70:	1961      	adds	r1, r4, r5
 800cd72:	42a3      	cmp	r3, r4
 800cd74:	6025      	str	r5, [r4, #0]
 800cd76:	bf18      	it	ne
 800cd78:	6059      	strne	r1, [r3, #4]
 800cd7a:	6863      	ldr	r3, [r4, #4]
 800cd7c:	bf08      	it	eq
 800cd7e:	6031      	streq	r1, [r6, #0]
 800cd80:	5162      	str	r2, [r4, r5]
 800cd82:	604b      	str	r3, [r1, #4]
 800cd84:	4638      	mov	r0, r7
 800cd86:	f104 060b 	add.w	r6, r4, #11
 800cd8a:	f000 fbc5 	bl	800d518 <__malloc_unlock>
 800cd8e:	f026 0607 	bic.w	r6, r6, #7
 800cd92:	1d23      	adds	r3, r4, #4
 800cd94:	1af2      	subs	r2, r6, r3
 800cd96:	d0b6      	beq.n	800cd06 <_malloc_r+0x22>
 800cd98:	1b9b      	subs	r3, r3, r6
 800cd9a:	50a3      	str	r3, [r4, r2]
 800cd9c:	e7b3      	b.n	800cd06 <_malloc_r+0x22>
 800cd9e:	6862      	ldr	r2, [r4, #4]
 800cda0:	42a3      	cmp	r3, r4
 800cda2:	bf0c      	ite	eq
 800cda4:	6032      	streq	r2, [r6, #0]
 800cda6:	605a      	strne	r2, [r3, #4]
 800cda8:	e7ec      	b.n	800cd84 <_malloc_r+0xa0>
 800cdaa:	4623      	mov	r3, r4
 800cdac:	6864      	ldr	r4, [r4, #4]
 800cdae:	e7b2      	b.n	800cd16 <_malloc_r+0x32>
 800cdb0:	4634      	mov	r4, r6
 800cdb2:	6876      	ldr	r6, [r6, #4]
 800cdb4:	e7b9      	b.n	800cd2a <_malloc_r+0x46>
 800cdb6:	230c      	movs	r3, #12
 800cdb8:	603b      	str	r3, [r7, #0]
 800cdba:	4638      	mov	r0, r7
 800cdbc:	f000 fbac 	bl	800d518 <__malloc_unlock>
 800cdc0:	e7a1      	b.n	800cd06 <_malloc_r+0x22>
 800cdc2:	6025      	str	r5, [r4, #0]
 800cdc4:	e7de      	b.n	800cd84 <_malloc_r+0xa0>
 800cdc6:	bf00      	nop
 800cdc8:	200026fc 	.word	0x200026fc

0800cdcc <__sfputc_r>:
 800cdcc:	6893      	ldr	r3, [r2, #8]
 800cdce:	3b01      	subs	r3, #1
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	b410      	push	{r4}
 800cdd4:	6093      	str	r3, [r2, #8]
 800cdd6:	da08      	bge.n	800cdea <__sfputc_r+0x1e>
 800cdd8:	6994      	ldr	r4, [r2, #24]
 800cdda:	42a3      	cmp	r3, r4
 800cddc:	db01      	blt.n	800cde2 <__sfputc_r+0x16>
 800cdde:	290a      	cmp	r1, #10
 800cde0:	d103      	bne.n	800cdea <__sfputc_r+0x1e>
 800cde2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cde6:	f7ff bbf9 	b.w	800c5dc <__swbuf_r>
 800cdea:	6813      	ldr	r3, [r2, #0]
 800cdec:	1c58      	adds	r0, r3, #1
 800cdee:	6010      	str	r0, [r2, #0]
 800cdf0:	7019      	strb	r1, [r3, #0]
 800cdf2:	4608      	mov	r0, r1
 800cdf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdf8:	4770      	bx	lr

0800cdfa <__sfputs_r>:
 800cdfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdfc:	4606      	mov	r6, r0
 800cdfe:	460f      	mov	r7, r1
 800ce00:	4614      	mov	r4, r2
 800ce02:	18d5      	adds	r5, r2, r3
 800ce04:	42ac      	cmp	r4, r5
 800ce06:	d101      	bne.n	800ce0c <__sfputs_r+0x12>
 800ce08:	2000      	movs	r0, #0
 800ce0a:	e007      	b.n	800ce1c <__sfputs_r+0x22>
 800ce0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce10:	463a      	mov	r2, r7
 800ce12:	4630      	mov	r0, r6
 800ce14:	f7ff ffda 	bl	800cdcc <__sfputc_r>
 800ce18:	1c43      	adds	r3, r0, #1
 800ce1a:	d1f3      	bne.n	800ce04 <__sfputs_r+0xa>
 800ce1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ce20 <_vfiprintf_r>:
 800ce20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce24:	460d      	mov	r5, r1
 800ce26:	b09d      	sub	sp, #116	; 0x74
 800ce28:	4614      	mov	r4, r2
 800ce2a:	4698      	mov	r8, r3
 800ce2c:	4606      	mov	r6, r0
 800ce2e:	b118      	cbz	r0, 800ce38 <_vfiprintf_r+0x18>
 800ce30:	6983      	ldr	r3, [r0, #24]
 800ce32:	b90b      	cbnz	r3, 800ce38 <_vfiprintf_r+0x18>
 800ce34:	f7ff fdca 	bl	800c9cc <__sinit>
 800ce38:	4b89      	ldr	r3, [pc, #548]	; (800d060 <_vfiprintf_r+0x240>)
 800ce3a:	429d      	cmp	r5, r3
 800ce3c:	d11b      	bne.n	800ce76 <_vfiprintf_r+0x56>
 800ce3e:	6875      	ldr	r5, [r6, #4]
 800ce40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce42:	07d9      	lsls	r1, r3, #31
 800ce44:	d405      	bmi.n	800ce52 <_vfiprintf_r+0x32>
 800ce46:	89ab      	ldrh	r3, [r5, #12]
 800ce48:	059a      	lsls	r2, r3, #22
 800ce4a:	d402      	bmi.n	800ce52 <_vfiprintf_r+0x32>
 800ce4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce4e:	f7ff fe6d 	bl	800cb2c <__retarget_lock_acquire_recursive>
 800ce52:	89ab      	ldrh	r3, [r5, #12]
 800ce54:	071b      	lsls	r3, r3, #28
 800ce56:	d501      	bpl.n	800ce5c <_vfiprintf_r+0x3c>
 800ce58:	692b      	ldr	r3, [r5, #16]
 800ce5a:	b9eb      	cbnz	r3, 800ce98 <_vfiprintf_r+0x78>
 800ce5c:	4629      	mov	r1, r5
 800ce5e:	4630      	mov	r0, r6
 800ce60:	f7ff fc0e 	bl	800c680 <__swsetup_r>
 800ce64:	b1c0      	cbz	r0, 800ce98 <_vfiprintf_r+0x78>
 800ce66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce68:	07dc      	lsls	r4, r3, #31
 800ce6a:	d50e      	bpl.n	800ce8a <_vfiprintf_r+0x6a>
 800ce6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce70:	b01d      	add	sp, #116	; 0x74
 800ce72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce76:	4b7b      	ldr	r3, [pc, #492]	; (800d064 <_vfiprintf_r+0x244>)
 800ce78:	429d      	cmp	r5, r3
 800ce7a:	d101      	bne.n	800ce80 <_vfiprintf_r+0x60>
 800ce7c:	68b5      	ldr	r5, [r6, #8]
 800ce7e:	e7df      	b.n	800ce40 <_vfiprintf_r+0x20>
 800ce80:	4b79      	ldr	r3, [pc, #484]	; (800d068 <_vfiprintf_r+0x248>)
 800ce82:	429d      	cmp	r5, r3
 800ce84:	bf08      	it	eq
 800ce86:	68f5      	ldreq	r5, [r6, #12]
 800ce88:	e7da      	b.n	800ce40 <_vfiprintf_r+0x20>
 800ce8a:	89ab      	ldrh	r3, [r5, #12]
 800ce8c:	0598      	lsls	r0, r3, #22
 800ce8e:	d4ed      	bmi.n	800ce6c <_vfiprintf_r+0x4c>
 800ce90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce92:	f7ff fe4c 	bl	800cb2e <__retarget_lock_release_recursive>
 800ce96:	e7e9      	b.n	800ce6c <_vfiprintf_r+0x4c>
 800ce98:	2300      	movs	r3, #0
 800ce9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ce9c:	2320      	movs	r3, #32
 800ce9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cea2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cea6:	2330      	movs	r3, #48	; 0x30
 800cea8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d06c <_vfiprintf_r+0x24c>
 800ceac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ceb0:	f04f 0901 	mov.w	r9, #1
 800ceb4:	4623      	mov	r3, r4
 800ceb6:	469a      	mov	sl, r3
 800ceb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cebc:	b10a      	cbz	r2, 800cec2 <_vfiprintf_r+0xa2>
 800cebe:	2a25      	cmp	r2, #37	; 0x25
 800cec0:	d1f9      	bne.n	800ceb6 <_vfiprintf_r+0x96>
 800cec2:	ebba 0b04 	subs.w	fp, sl, r4
 800cec6:	d00b      	beq.n	800cee0 <_vfiprintf_r+0xc0>
 800cec8:	465b      	mov	r3, fp
 800ceca:	4622      	mov	r2, r4
 800cecc:	4629      	mov	r1, r5
 800cece:	4630      	mov	r0, r6
 800ced0:	f7ff ff93 	bl	800cdfa <__sfputs_r>
 800ced4:	3001      	adds	r0, #1
 800ced6:	f000 80aa 	beq.w	800d02e <_vfiprintf_r+0x20e>
 800ceda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cedc:	445a      	add	r2, fp
 800cede:	9209      	str	r2, [sp, #36]	; 0x24
 800cee0:	f89a 3000 	ldrb.w	r3, [sl]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	f000 80a2 	beq.w	800d02e <_vfiprintf_r+0x20e>
 800ceea:	2300      	movs	r3, #0
 800ceec:	f04f 32ff 	mov.w	r2, #4294967295
 800cef0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cef4:	f10a 0a01 	add.w	sl, sl, #1
 800cef8:	9304      	str	r3, [sp, #16]
 800cefa:	9307      	str	r3, [sp, #28]
 800cefc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf00:	931a      	str	r3, [sp, #104]	; 0x68
 800cf02:	4654      	mov	r4, sl
 800cf04:	2205      	movs	r2, #5
 800cf06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf0a:	4858      	ldr	r0, [pc, #352]	; (800d06c <_vfiprintf_r+0x24c>)
 800cf0c:	f7f3 f978 	bl	8000200 <memchr>
 800cf10:	9a04      	ldr	r2, [sp, #16]
 800cf12:	b9d8      	cbnz	r0, 800cf4c <_vfiprintf_r+0x12c>
 800cf14:	06d1      	lsls	r1, r2, #27
 800cf16:	bf44      	itt	mi
 800cf18:	2320      	movmi	r3, #32
 800cf1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf1e:	0713      	lsls	r3, r2, #28
 800cf20:	bf44      	itt	mi
 800cf22:	232b      	movmi	r3, #43	; 0x2b
 800cf24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf28:	f89a 3000 	ldrb.w	r3, [sl]
 800cf2c:	2b2a      	cmp	r3, #42	; 0x2a
 800cf2e:	d015      	beq.n	800cf5c <_vfiprintf_r+0x13c>
 800cf30:	9a07      	ldr	r2, [sp, #28]
 800cf32:	4654      	mov	r4, sl
 800cf34:	2000      	movs	r0, #0
 800cf36:	f04f 0c0a 	mov.w	ip, #10
 800cf3a:	4621      	mov	r1, r4
 800cf3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf40:	3b30      	subs	r3, #48	; 0x30
 800cf42:	2b09      	cmp	r3, #9
 800cf44:	d94e      	bls.n	800cfe4 <_vfiprintf_r+0x1c4>
 800cf46:	b1b0      	cbz	r0, 800cf76 <_vfiprintf_r+0x156>
 800cf48:	9207      	str	r2, [sp, #28]
 800cf4a:	e014      	b.n	800cf76 <_vfiprintf_r+0x156>
 800cf4c:	eba0 0308 	sub.w	r3, r0, r8
 800cf50:	fa09 f303 	lsl.w	r3, r9, r3
 800cf54:	4313      	orrs	r3, r2
 800cf56:	9304      	str	r3, [sp, #16]
 800cf58:	46a2      	mov	sl, r4
 800cf5a:	e7d2      	b.n	800cf02 <_vfiprintf_r+0xe2>
 800cf5c:	9b03      	ldr	r3, [sp, #12]
 800cf5e:	1d19      	adds	r1, r3, #4
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	9103      	str	r1, [sp, #12]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	bfbb      	ittet	lt
 800cf68:	425b      	neglt	r3, r3
 800cf6a:	f042 0202 	orrlt.w	r2, r2, #2
 800cf6e:	9307      	strge	r3, [sp, #28]
 800cf70:	9307      	strlt	r3, [sp, #28]
 800cf72:	bfb8      	it	lt
 800cf74:	9204      	strlt	r2, [sp, #16]
 800cf76:	7823      	ldrb	r3, [r4, #0]
 800cf78:	2b2e      	cmp	r3, #46	; 0x2e
 800cf7a:	d10c      	bne.n	800cf96 <_vfiprintf_r+0x176>
 800cf7c:	7863      	ldrb	r3, [r4, #1]
 800cf7e:	2b2a      	cmp	r3, #42	; 0x2a
 800cf80:	d135      	bne.n	800cfee <_vfiprintf_r+0x1ce>
 800cf82:	9b03      	ldr	r3, [sp, #12]
 800cf84:	1d1a      	adds	r2, r3, #4
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	9203      	str	r2, [sp, #12]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	bfb8      	it	lt
 800cf8e:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf92:	3402      	adds	r4, #2
 800cf94:	9305      	str	r3, [sp, #20]
 800cf96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d07c <_vfiprintf_r+0x25c>
 800cf9a:	7821      	ldrb	r1, [r4, #0]
 800cf9c:	2203      	movs	r2, #3
 800cf9e:	4650      	mov	r0, sl
 800cfa0:	f7f3 f92e 	bl	8000200 <memchr>
 800cfa4:	b140      	cbz	r0, 800cfb8 <_vfiprintf_r+0x198>
 800cfa6:	2340      	movs	r3, #64	; 0x40
 800cfa8:	eba0 000a 	sub.w	r0, r0, sl
 800cfac:	fa03 f000 	lsl.w	r0, r3, r0
 800cfb0:	9b04      	ldr	r3, [sp, #16]
 800cfb2:	4303      	orrs	r3, r0
 800cfb4:	3401      	adds	r4, #1
 800cfb6:	9304      	str	r3, [sp, #16]
 800cfb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfbc:	482c      	ldr	r0, [pc, #176]	; (800d070 <_vfiprintf_r+0x250>)
 800cfbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfc2:	2206      	movs	r2, #6
 800cfc4:	f7f3 f91c 	bl	8000200 <memchr>
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	d03f      	beq.n	800d04c <_vfiprintf_r+0x22c>
 800cfcc:	4b29      	ldr	r3, [pc, #164]	; (800d074 <_vfiprintf_r+0x254>)
 800cfce:	bb1b      	cbnz	r3, 800d018 <_vfiprintf_r+0x1f8>
 800cfd0:	9b03      	ldr	r3, [sp, #12]
 800cfd2:	3307      	adds	r3, #7
 800cfd4:	f023 0307 	bic.w	r3, r3, #7
 800cfd8:	3308      	adds	r3, #8
 800cfda:	9303      	str	r3, [sp, #12]
 800cfdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfde:	443b      	add	r3, r7
 800cfe0:	9309      	str	r3, [sp, #36]	; 0x24
 800cfe2:	e767      	b.n	800ceb4 <_vfiprintf_r+0x94>
 800cfe4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfe8:	460c      	mov	r4, r1
 800cfea:	2001      	movs	r0, #1
 800cfec:	e7a5      	b.n	800cf3a <_vfiprintf_r+0x11a>
 800cfee:	2300      	movs	r3, #0
 800cff0:	3401      	adds	r4, #1
 800cff2:	9305      	str	r3, [sp, #20]
 800cff4:	4619      	mov	r1, r3
 800cff6:	f04f 0c0a 	mov.w	ip, #10
 800cffa:	4620      	mov	r0, r4
 800cffc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d000:	3a30      	subs	r2, #48	; 0x30
 800d002:	2a09      	cmp	r2, #9
 800d004:	d903      	bls.n	800d00e <_vfiprintf_r+0x1ee>
 800d006:	2b00      	cmp	r3, #0
 800d008:	d0c5      	beq.n	800cf96 <_vfiprintf_r+0x176>
 800d00a:	9105      	str	r1, [sp, #20]
 800d00c:	e7c3      	b.n	800cf96 <_vfiprintf_r+0x176>
 800d00e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d012:	4604      	mov	r4, r0
 800d014:	2301      	movs	r3, #1
 800d016:	e7f0      	b.n	800cffa <_vfiprintf_r+0x1da>
 800d018:	ab03      	add	r3, sp, #12
 800d01a:	9300      	str	r3, [sp, #0]
 800d01c:	462a      	mov	r2, r5
 800d01e:	4b16      	ldr	r3, [pc, #88]	; (800d078 <_vfiprintf_r+0x258>)
 800d020:	a904      	add	r1, sp, #16
 800d022:	4630      	mov	r0, r6
 800d024:	f3af 8000 	nop.w
 800d028:	4607      	mov	r7, r0
 800d02a:	1c78      	adds	r0, r7, #1
 800d02c:	d1d6      	bne.n	800cfdc <_vfiprintf_r+0x1bc>
 800d02e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d030:	07d9      	lsls	r1, r3, #31
 800d032:	d405      	bmi.n	800d040 <_vfiprintf_r+0x220>
 800d034:	89ab      	ldrh	r3, [r5, #12]
 800d036:	059a      	lsls	r2, r3, #22
 800d038:	d402      	bmi.n	800d040 <_vfiprintf_r+0x220>
 800d03a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d03c:	f7ff fd77 	bl	800cb2e <__retarget_lock_release_recursive>
 800d040:	89ab      	ldrh	r3, [r5, #12]
 800d042:	065b      	lsls	r3, r3, #25
 800d044:	f53f af12 	bmi.w	800ce6c <_vfiprintf_r+0x4c>
 800d048:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d04a:	e711      	b.n	800ce70 <_vfiprintf_r+0x50>
 800d04c:	ab03      	add	r3, sp, #12
 800d04e:	9300      	str	r3, [sp, #0]
 800d050:	462a      	mov	r2, r5
 800d052:	4b09      	ldr	r3, [pc, #36]	; (800d078 <_vfiprintf_r+0x258>)
 800d054:	a904      	add	r1, sp, #16
 800d056:	4630      	mov	r0, r6
 800d058:	f000 f880 	bl	800d15c <_printf_i>
 800d05c:	e7e4      	b.n	800d028 <_vfiprintf_r+0x208>
 800d05e:	bf00      	nop
 800d060:	0800dcc4 	.word	0x0800dcc4
 800d064:	0800dce4 	.word	0x0800dce4
 800d068:	0800dca4 	.word	0x0800dca4
 800d06c:	0800dd04 	.word	0x0800dd04
 800d070:	0800dd0e 	.word	0x0800dd0e
 800d074:	00000000 	.word	0x00000000
 800d078:	0800cdfb 	.word	0x0800cdfb
 800d07c:	0800dd0a 	.word	0x0800dd0a

0800d080 <_printf_common>:
 800d080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d084:	4616      	mov	r6, r2
 800d086:	4699      	mov	r9, r3
 800d088:	688a      	ldr	r2, [r1, #8]
 800d08a:	690b      	ldr	r3, [r1, #16]
 800d08c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d090:	4293      	cmp	r3, r2
 800d092:	bfb8      	it	lt
 800d094:	4613      	movlt	r3, r2
 800d096:	6033      	str	r3, [r6, #0]
 800d098:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d09c:	4607      	mov	r7, r0
 800d09e:	460c      	mov	r4, r1
 800d0a0:	b10a      	cbz	r2, 800d0a6 <_printf_common+0x26>
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	6033      	str	r3, [r6, #0]
 800d0a6:	6823      	ldr	r3, [r4, #0]
 800d0a8:	0699      	lsls	r1, r3, #26
 800d0aa:	bf42      	ittt	mi
 800d0ac:	6833      	ldrmi	r3, [r6, #0]
 800d0ae:	3302      	addmi	r3, #2
 800d0b0:	6033      	strmi	r3, [r6, #0]
 800d0b2:	6825      	ldr	r5, [r4, #0]
 800d0b4:	f015 0506 	ands.w	r5, r5, #6
 800d0b8:	d106      	bne.n	800d0c8 <_printf_common+0x48>
 800d0ba:	f104 0a19 	add.w	sl, r4, #25
 800d0be:	68e3      	ldr	r3, [r4, #12]
 800d0c0:	6832      	ldr	r2, [r6, #0]
 800d0c2:	1a9b      	subs	r3, r3, r2
 800d0c4:	42ab      	cmp	r3, r5
 800d0c6:	dc26      	bgt.n	800d116 <_printf_common+0x96>
 800d0c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d0cc:	1e13      	subs	r3, r2, #0
 800d0ce:	6822      	ldr	r2, [r4, #0]
 800d0d0:	bf18      	it	ne
 800d0d2:	2301      	movne	r3, #1
 800d0d4:	0692      	lsls	r2, r2, #26
 800d0d6:	d42b      	bmi.n	800d130 <_printf_common+0xb0>
 800d0d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0dc:	4649      	mov	r1, r9
 800d0de:	4638      	mov	r0, r7
 800d0e0:	47c0      	blx	r8
 800d0e2:	3001      	adds	r0, #1
 800d0e4:	d01e      	beq.n	800d124 <_printf_common+0xa4>
 800d0e6:	6823      	ldr	r3, [r4, #0]
 800d0e8:	68e5      	ldr	r5, [r4, #12]
 800d0ea:	6832      	ldr	r2, [r6, #0]
 800d0ec:	f003 0306 	and.w	r3, r3, #6
 800d0f0:	2b04      	cmp	r3, #4
 800d0f2:	bf08      	it	eq
 800d0f4:	1aad      	subeq	r5, r5, r2
 800d0f6:	68a3      	ldr	r3, [r4, #8]
 800d0f8:	6922      	ldr	r2, [r4, #16]
 800d0fa:	bf0c      	ite	eq
 800d0fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d100:	2500      	movne	r5, #0
 800d102:	4293      	cmp	r3, r2
 800d104:	bfc4      	itt	gt
 800d106:	1a9b      	subgt	r3, r3, r2
 800d108:	18ed      	addgt	r5, r5, r3
 800d10a:	2600      	movs	r6, #0
 800d10c:	341a      	adds	r4, #26
 800d10e:	42b5      	cmp	r5, r6
 800d110:	d11a      	bne.n	800d148 <_printf_common+0xc8>
 800d112:	2000      	movs	r0, #0
 800d114:	e008      	b.n	800d128 <_printf_common+0xa8>
 800d116:	2301      	movs	r3, #1
 800d118:	4652      	mov	r2, sl
 800d11a:	4649      	mov	r1, r9
 800d11c:	4638      	mov	r0, r7
 800d11e:	47c0      	blx	r8
 800d120:	3001      	adds	r0, #1
 800d122:	d103      	bne.n	800d12c <_printf_common+0xac>
 800d124:	f04f 30ff 	mov.w	r0, #4294967295
 800d128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d12c:	3501      	adds	r5, #1
 800d12e:	e7c6      	b.n	800d0be <_printf_common+0x3e>
 800d130:	18e1      	adds	r1, r4, r3
 800d132:	1c5a      	adds	r2, r3, #1
 800d134:	2030      	movs	r0, #48	; 0x30
 800d136:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d13a:	4422      	add	r2, r4
 800d13c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d140:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d144:	3302      	adds	r3, #2
 800d146:	e7c7      	b.n	800d0d8 <_printf_common+0x58>
 800d148:	2301      	movs	r3, #1
 800d14a:	4622      	mov	r2, r4
 800d14c:	4649      	mov	r1, r9
 800d14e:	4638      	mov	r0, r7
 800d150:	47c0      	blx	r8
 800d152:	3001      	adds	r0, #1
 800d154:	d0e6      	beq.n	800d124 <_printf_common+0xa4>
 800d156:	3601      	adds	r6, #1
 800d158:	e7d9      	b.n	800d10e <_printf_common+0x8e>
	...

0800d15c <_printf_i>:
 800d15c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d160:	7e0f      	ldrb	r7, [r1, #24]
 800d162:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d164:	2f78      	cmp	r7, #120	; 0x78
 800d166:	4691      	mov	r9, r2
 800d168:	4680      	mov	r8, r0
 800d16a:	460c      	mov	r4, r1
 800d16c:	469a      	mov	sl, r3
 800d16e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d172:	d807      	bhi.n	800d184 <_printf_i+0x28>
 800d174:	2f62      	cmp	r7, #98	; 0x62
 800d176:	d80a      	bhi.n	800d18e <_printf_i+0x32>
 800d178:	2f00      	cmp	r7, #0
 800d17a:	f000 80d8 	beq.w	800d32e <_printf_i+0x1d2>
 800d17e:	2f58      	cmp	r7, #88	; 0x58
 800d180:	f000 80a3 	beq.w	800d2ca <_printf_i+0x16e>
 800d184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d188:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d18c:	e03a      	b.n	800d204 <_printf_i+0xa8>
 800d18e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d192:	2b15      	cmp	r3, #21
 800d194:	d8f6      	bhi.n	800d184 <_printf_i+0x28>
 800d196:	a101      	add	r1, pc, #4	; (adr r1, 800d19c <_printf_i+0x40>)
 800d198:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d19c:	0800d1f5 	.word	0x0800d1f5
 800d1a0:	0800d209 	.word	0x0800d209
 800d1a4:	0800d185 	.word	0x0800d185
 800d1a8:	0800d185 	.word	0x0800d185
 800d1ac:	0800d185 	.word	0x0800d185
 800d1b0:	0800d185 	.word	0x0800d185
 800d1b4:	0800d209 	.word	0x0800d209
 800d1b8:	0800d185 	.word	0x0800d185
 800d1bc:	0800d185 	.word	0x0800d185
 800d1c0:	0800d185 	.word	0x0800d185
 800d1c4:	0800d185 	.word	0x0800d185
 800d1c8:	0800d315 	.word	0x0800d315
 800d1cc:	0800d239 	.word	0x0800d239
 800d1d0:	0800d2f7 	.word	0x0800d2f7
 800d1d4:	0800d185 	.word	0x0800d185
 800d1d8:	0800d185 	.word	0x0800d185
 800d1dc:	0800d337 	.word	0x0800d337
 800d1e0:	0800d185 	.word	0x0800d185
 800d1e4:	0800d239 	.word	0x0800d239
 800d1e8:	0800d185 	.word	0x0800d185
 800d1ec:	0800d185 	.word	0x0800d185
 800d1f0:	0800d2ff 	.word	0x0800d2ff
 800d1f4:	682b      	ldr	r3, [r5, #0]
 800d1f6:	1d1a      	adds	r2, r3, #4
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	602a      	str	r2, [r5, #0]
 800d1fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d200:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d204:	2301      	movs	r3, #1
 800d206:	e0a3      	b.n	800d350 <_printf_i+0x1f4>
 800d208:	6820      	ldr	r0, [r4, #0]
 800d20a:	6829      	ldr	r1, [r5, #0]
 800d20c:	0606      	lsls	r6, r0, #24
 800d20e:	f101 0304 	add.w	r3, r1, #4
 800d212:	d50a      	bpl.n	800d22a <_printf_i+0xce>
 800d214:	680e      	ldr	r6, [r1, #0]
 800d216:	602b      	str	r3, [r5, #0]
 800d218:	2e00      	cmp	r6, #0
 800d21a:	da03      	bge.n	800d224 <_printf_i+0xc8>
 800d21c:	232d      	movs	r3, #45	; 0x2d
 800d21e:	4276      	negs	r6, r6
 800d220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d224:	485e      	ldr	r0, [pc, #376]	; (800d3a0 <_printf_i+0x244>)
 800d226:	230a      	movs	r3, #10
 800d228:	e019      	b.n	800d25e <_printf_i+0x102>
 800d22a:	680e      	ldr	r6, [r1, #0]
 800d22c:	602b      	str	r3, [r5, #0]
 800d22e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d232:	bf18      	it	ne
 800d234:	b236      	sxthne	r6, r6
 800d236:	e7ef      	b.n	800d218 <_printf_i+0xbc>
 800d238:	682b      	ldr	r3, [r5, #0]
 800d23a:	6820      	ldr	r0, [r4, #0]
 800d23c:	1d19      	adds	r1, r3, #4
 800d23e:	6029      	str	r1, [r5, #0]
 800d240:	0601      	lsls	r1, r0, #24
 800d242:	d501      	bpl.n	800d248 <_printf_i+0xec>
 800d244:	681e      	ldr	r6, [r3, #0]
 800d246:	e002      	b.n	800d24e <_printf_i+0xf2>
 800d248:	0646      	lsls	r6, r0, #25
 800d24a:	d5fb      	bpl.n	800d244 <_printf_i+0xe8>
 800d24c:	881e      	ldrh	r6, [r3, #0]
 800d24e:	4854      	ldr	r0, [pc, #336]	; (800d3a0 <_printf_i+0x244>)
 800d250:	2f6f      	cmp	r7, #111	; 0x6f
 800d252:	bf0c      	ite	eq
 800d254:	2308      	moveq	r3, #8
 800d256:	230a      	movne	r3, #10
 800d258:	2100      	movs	r1, #0
 800d25a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d25e:	6865      	ldr	r5, [r4, #4]
 800d260:	60a5      	str	r5, [r4, #8]
 800d262:	2d00      	cmp	r5, #0
 800d264:	bfa2      	ittt	ge
 800d266:	6821      	ldrge	r1, [r4, #0]
 800d268:	f021 0104 	bicge.w	r1, r1, #4
 800d26c:	6021      	strge	r1, [r4, #0]
 800d26e:	b90e      	cbnz	r6, 800d274 <_printf_i+0x118>
 800d270:	2d00      	cmp	r5, #0
 800d272:	d04d      	beq.n	800d310 <_printf_i+0x1b4>
 800d274:	4615      	mov	r5, r2
 800d276:	fbb6 f1f3 	udiv	r1, r6, r3
 800d27a:	fb03 6711 	mls	r7, r3, r1, r6
 800d27e:	5dc7      	ldrb	r7, [r0, r7]
 800d280:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d284:	4637      	mov	r7, r6
 800d286:	42bb      	cmp	r3, r7
 800d288:	460e      	mov	r6, r1
 800d28a:	d9f4      	bls.n	800d276 <_printf_i+0x11a>
 800d28c:	2b08      	cmp	r3, #8
 800d28e:	d10b      	bne.n	800d2a8 <_printf_i+0x14c>
 800d290:	6823      	ldr	r3, [r4, #0]
 800d292:	07de      	lsls	r6, r3, #31
 800d294:	d508      	bpl.n	800d2a8 <_printf_i+0x14c>
 800d296:	6923      	ldr	r3, [r4, #16]
 800d298:	6861      	ldr	r1, [r4, #4]
 800d29a:	4299      	cmp	r1, r3
 800d29c:	bfde      	ittt	le
 800d29e:	2330      	movle	r3, #48	; 0x30
 800d2a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d2a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d2a8:	1b52      	subs	r2, r2, r5
 800d2aa:	6122      	str	r2, [r4, #16]
 800d2ac:	f8cd a000 	str.w	sl, [sp]
 800d2b0:	464b      	mov	r3, r9
 800d2b2:	aa03      	add	r2, sp, #12
 800d2b4:	4621      	mov	r1, r4
 800d2b6:	4640      	mov	r0, r8
 800d2b8:	f7ff fee2 	bl	800d080 <_printf_common>
 800d2bc:	3001      	adds	r0, #1
 800d2be:	d14c      	bne.n	800d35a <_printf_i+0x1fe>
 800d2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2c4:	b004      	add	sp, #16
 800d2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ca:	4835      	ldr	r0, [pc, #212]	; (800d3a0 <_printf_i+0x244>)
 800d2cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d2d0:	6829      	ldr	r1, [r5, #0]
 800d2d2:	6823      	ldr	r3, [r4, #0]
 800d2d4:	f851 6b04 	ldr.w	r6, [r1], #4
 800d2d8:	6029      	str	r1, [r5, #0]
 800d2da:	061d      	lsls	r5, r3, #24
 800d2dc:	d514      	bpl.n	800d308 <_printf_i+0x1ac>
 800d2de:	07df      	lsls	r7, r3, #31
 800d2e0:	bf44      	itt	mi
 800d2e2:	f043 0320 	orrmi.w	r3, r3, #32
 800d2e6:	6023      	strmi	r3, [r4, #0]
 800d2e8:	b91e      	cbnz	r6, 800d2f2 <_printf_i+0x196>
 800d2ea:	6823      	ldr	r3, [r4, #0]
 800d2ec:	f023 0320 	bic.w	r3, r3, #32
 800d2f0:	6023      	str	r3, [r4, #0]
 800d2f2:	2310      	movs	r3, #16
 800d2f4:	e7b0      	b.n	800d258 <_printf_i+0xfc>
 800d2f6:	6823      	ldr	r3, [r4, #0]
 800d2f8:	f043 0320 	orr.w	r3, r3, #32
 800d2fc:	6023      	str	r3, [r4, #0]
 800d2fe:	2378      	movs	r3, #120	; 0x78
 800d300:	4828      	ldr	r0, [pc, #160]	; (800d3a4 <_printf_i+0x248>)
 800d302:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d306:	e7e3      	b.n	800d2d0 <_printf_i+0x174>
 800d308:	0659      	lsls	r1, r3, #25
 800d30a:	bf48      	it	mi
 800d30c:	b2b6      	uxthmi	r6, r6
 800d30e:	e7e6      	b.n	800d2de <_printf_i+0x182>
 800d310:	4615      	mov	r5, r2
 800d312:	e7bb      	b.n	800d28c <_printf_i+0x130>
 800d314:	682b      	ldr	r3, [r5, #0]
 800d316:	6826      	ldr	r6, [r4, #0]
 800d318:	6961      	ldr	r1, [r4, #20]
 800d31a:	1d18      	adds	r0, r3, #4
 800d31c:	6028      	str	r0, [r5, #0]
 800d31e:	0635      	lsls	r5, r6, #24
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	d501      	bpl.n	800d328 <_printf_i+0x1cc>
 800d324:	6019      	str	r1, [r3, #0]
 800d326:	e002      	b.n	800d32e <_printf_i+0x1d2>
 800d328:	0670      	lsls	r0, r6, #25
 800d32a:	d5fb      	bpl.n	800d324 <_printf_i+0x1c8>
 800d32c:	8019      	strh	r1, [r3, #0]
 800d32e:	2300      	movs	r3, #0
 800d330:	6123      	str	r3, [r4, #16]
 800d332:	4615      	mov	r5, r2
 800d334:	e7ba      	b.n	800d2ac <_printf_i+0x150>
 800d336:	682b      	ldr	r3, [r5, #0]
 800d338:	1d1a      	adds	r2, r3, #4
 800d33a:	602a      	str	r2, [r5, #0]
 800d33c:	681d      	ldr	r5, [r3, #0]
 800d33e:	6862      	ldr	r2, [r4, #4]
 800d340:	2100      	movs	r1, #0
 800d342:	4628      	mov	r0, r5
 800d344:	f7f2 ff5c 	bl	8000200 <memchr>
 800d348:	b108      	cbz	r0, 800d34e <_printf_i+0x1f2>
 800d34a:	1b40      	subs	r0, r0, r5
 800d34c:	6060      	str	r0, [r4, #4]
 800d34e:	6863      	ldr	r3, [r4, #4]
 800d350:	6123      	str	r3, [r4, #16]
 800d352:	2300      	movs	r3, #0
 800d354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d358:	e7a8      	b.n	800d2ac <_printf_i+0x150>
 800d35a:	6923      	ldr	r3, [r4, #16]
 800d35c:	462a      	mov	r2, r5
 800d35e:	4649      	mov	r1, r9
 800d360:	4640      	mov	r0, r8
 800d362:	47d0      	blx	sl
 800d364:	3001      	adds	r0, #1
 800d366:	d0ab      	beq.n	800d2c0 <_printf_i+0x164>
 800d368:	6823      	ldr	r3, [r4, #0]
 800d36a:	079b      	lsls	r3, r3, #30
 800d36c:	d413      	bmi.n	800d396 <_printf_i+0x23a>
 800d36e:	68e0      	ldr	r0, [r4, #12]
 800d370:	9b03      	ldr	r3, [sp, #12]
 800d372:	4298      	cmp	r0, r3
 800d374:	bfb8      	it	lt
 800d376:	4618      	movlt	r0, r3
 800d378:	e7a4      	b.n	800d2c4 <_printf_i+0x168>
 800d37a:	2301      	movs	r3, #1
 800d37c:	4632      	mov	r2, r6
 800d37e:	4649      	mov	r1, r9
 800d380:	4640      	mov	r0, r8
 800d382:	47d0      	blx	sl
 800d384:	3001      	adds	r0, #1
 800d386:	d09b      	beq.n	800d2c0 <_printf_i+0x164>
 800d388:	3501      	adds	r5, #1
 800d38a:	68e3      	ldr	r3, [r4, #12]
 800d38c:	9903      	ldr	r1, [sp, #12]
 800d38e:	1a5b      	subs	r3, r3, r1
 800d390:	42ab      	cmp	r3, r5
 800d392:	dcf2      	bgt.n	800d37a <_printf_i+0x21e>
 800d394:	e7eb      	b.n	800d36e <_printf_i+0x212>
 800d396:	2500      	movs	r5, #0
 800d398:	f104 0619 	add.w	r6, r4, #25
 800d39c:	e7f5      	b.n	800d38a <_printf_i+0x22e>
 800d39e:	bf00      	nop
 800d3a0:	0800dd15 	.word	0x0800dd15
 800d3a4:	0800dd26 	.word	0x0800dd26

0800d3a8 <_sbrk_r>:
 800d3a8:	b538      	push	{r3, r4, r5, lr}
 800d3aa:	4d06      	ldr	r5, [pc, #24]	; (800d3c4 <_sbrk_r+0x1c>)
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	4608      	mov	r0, r1
 800d3b2:	602b      	str	r3, [r5, #0]
 800d3b4:	f7f5 fcaa 	bl	8002d0c <_sbrk>
 800d3b8:	1c43      	adds	r3, r0, #1
 800d3ba:	d102      	bne.n	800d3c2 <_sbrk_r+0x1a>
 800d3bc:	682b      	ldr	r3, [r5, #0]
 800d3be:	b103      	cbz	r3, 800d3c2 <_sbrk_r+0x1a>
 800d3c0:	6023      	str	r3, [r4, #0]
 800d3c2:	bd38      	pop	{r3, r4, r5, pc}
 800d3c4:	20002704 	.word	0x20002704

0800d3c8 <__sread>:
 800d3c8:	b510      	push	{r4, lr}
 800d3ca:	460c      	mov	r4, r1
 800d3cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3d0:	f000 f8a8 	bl	800d524 <_read_r>
 800d3d4:	2800      	cmp	r0, #0
 800d3d6:	bfab      	itete	ge
 800d3d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d3da:	89a3      	ldrhlt	r3, [r4, #12]
 800d3dc:	181b      	addge	r3, r3, r0
 800d3de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d3e2:	bfac      	ite	ge
 800d3e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d3e6:	81a3      	strhlt	r3, [r4, #12]
 800d3e8:	bd10      	pop	{r4, pc}

0800d3ea <__swrite>:
 800d3ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3ee:	461f      	mov	r7, r3
 800d3f0:	898b      	ldrh	r3, [r1, #12]
 800d3f2:	05db      	lsls	r3, r3, #23
 800d3f4:	4605      	mov	r5, r0
 800d3f6:	460c      	mov	r4, r1
 800d3f8:	4616      	mov	r6, r2
 800d3fa:	d505      	bpl.n	800d408 <__swrite+0x1e>
 800d3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d400:	2302      	movs	r3, #2
 800d402:	2200      	movs	r2, #0
 800d404:	f000 f870 	bl	800d4e8 <_lseek_r>
 800d408:	89a3      	ldrh	r3, [r4, #12]
 800d40a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d40e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d412:	81a3      	strh	r3, [r4, #12]
 800d414:	4632      	mov	r2, r6
 800d416:	463b      	mov	r3, r7
 800d418:	4628      	mov	r0, r5
 800d41a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d41e:	f000 b817 	b.w	800d450 <_write_r>

0800d422 <__sseek>:
 800d422:	b510      	push	{r4, lr}
 800d424:	460c      	mov	r4, r1
 800d426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d42a:	f000 f85d 	bl	800d4e8 <_lseek_r>
 800d42e:	1c43      	adds	r3, r0, #1
 800d430:	89a3      	ldrh	r3, [r4, #12]
 800d432:	bf15      	itete	ne
 800d434:	6560      	strne	r0, [r4, #84]	; 0x54
 800d436:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d43a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d43e:	81a3      	strheq	r3, [r4, #12]
 800d440:	bf18      	it	ne
 800d442:	81a3      	strhne	r3, [r4, #12]
 800d444:	bd10      	pop	{r4, pc}

0800d446 <__sclose>:
 800d446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d44a:	f000 b81b 	b.w	800d484 <_close_r>
	...

0800d450 <_write_r>:
 800d450:	b538      	push	{r3, r4, r5, lr}
 800d452:	4d07      	ldr	r5, [pc, #28]	; (800d470 <_write_r+0x20>)
 800d454:	4604      	mov	r4, r0
 800d456:	4608      	mov	r0, r1
 800d458:	4611      	mov	r1, r2
 800d45a:	2200      	movs	r2, #0
 800d45c:	602a      	str	r2, [r5, #0]
 800d45e:	461a      	mov	r2, r3
 800d460:	f7f4 fd82 	bl	8001f68 <_write>
 800d464:	1c43      	adds	r3, r0, #1
 800d466:	d102      	bne.n	800d46e <_write_r+0x1e>
 800d468:	682b      	ldr	r3, [r5, #0]
 800d46a:	b103      	cbz	r3, 800d46e <_write_r+0x1e>
 800d46c:	6023      	str	r3, [r4, #0]
 800d46e:	bd38      	pop	{r3, r4, r5, pc}
 800d470:	20002704 	.word	0x20002704

0800d474 <abort>:
 800d474:	b508      	push	{r3, lr}
 800d476:	2006      	movs	r0, #6
 800d478:	f000 f88e 	bl	800d598 <raise>
 800d47c:	2001      	movs	r0, #1
 800d47e:	f7f5 fbe9 	bl	8002c54 <_exit>
	...

0800d484 <_close_r>:
 800d484:	b538      	push	{r3, r4, r5, lr}
 800d486:	4d06      	ldr	r5, [pc, #24]	; (800d4a0 <_close_r+0x1c>)
 800d488:	2300      	movs	r3, #0
 800d48a:	4604      	mov	r4, r0
 800d48c:	4608      	mov	r0, r1
 800d48e:	602b      	str	r3, [r5, #0]
 800d490:	f7f5 fc07 	bl	8002ca2 <_close>
 800d494:	1c43      	adds	r3, r0, #1
 800d496:	d102      	bne.n	800d49e <_close_r+0x1a>
 800d498:	682b      	ldr	r3, [r5, #0]
 800d49a:	b103      	cbz	r3, 800d49e <_close_r+0x1a>
 800d49c:	6023      	str	r3, [r4, #0]
 800d49e:	bd38      	pop	{r3, r4, r5, pc}
 800d4a0:	20002704 	.word	0x20002704

0800d4a4 <_fstat_r>:
 800d4a4:	b538      	push	{r3, r4, r5, lr}
 800d4a6:	4d07      	ldr	r5, [pc, #28]	; (800d4c4 <_fstat_r+0x20>)
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	4604      	mov	r4, r0
 800d4ac:	4608      	mov	r0, r1
 800d4ae:	4611      	mov	r1, r2
 800d4b0:	602b      	str	r3, [r5, #0]
 800d4b2:	f7f5 fc02 	bl	8002cba <_fstat>
 800d4b6:	1c43      	adds	r3, r0, #1
 800d4b8:	d102      	bne.n	800d4c0 <_fstat_r+0x1c>
 800d4ba:	682b      	ldr	r3, [r5, #0]
 800d4bc:	b103      	cbz	r3, 800d4c0 <_fstat_r+0x1c>
 800d4be:	6023      	str	r3, [r4, #0]
 800d4c0:	bd38      	pop	{r3, r4, r5, pc}
 800d4c2:	bf00      	nop
 800d4c4:	20002704 	.word	0x20002704

0800d4c8 <_isatty_r>:
 800d4c8:	b538      	push	{r3, r4, r5, lr}
 800d4ca:	4d06      	ldr	r5, [pc, #24]	; (800d4e4 <_isatty_r+0x1c>)
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	4604      	mov	r4, r0
 800d4d0:	4608      	mov	r0, r1
 800d4d2:	602b      	str	r3, [r5, #0]
 800d4d4:	f7f5 fc01 	bl	8002cda <_isatty>
 800d4d8:	1c43      	adds	r3, r0, #1
 800d4da:	d102      	bne.n	800d4e2 <_isatty_r+0x1a>
 800d4dc:	682b      	ldr	r3, [r5, #0]
 800d4de:	b103      	cbz	r3, 800d4e2 <_isatty_r+0x1a>
 800d4e0:	6023      	str	r3, [r4, #0]
 800d4e2:	bd38      	pop	{r3, r4, r5, pc}
 800d4e4:	20002704 	.word	0x20002704

0800d4e8 <_lseek_r>:
 800d4e8:	b538      	push	{r3, r4, r5, lr}
 800d4ea:	4d07      	ldr	r5, [pc, #28]	; (800d508 <_lseek_r+0x20>)
 800d4ec:	4604      	mov	r4, r0
 800d4ee:	4608      	mov	r0, r1
 800d4f0:	4611      	mov	r1, r2
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	602a      	str	r2, [r5, #0]
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	f7f5 fbfa 	bl	8002cf0 <_lseek>
 800d4fc:	1c43      	adds	r3, r0, #1
 800d4fe:	d102      	bne.n	800d506 <_lseek_r+0x1e>
 800d500:	682b      	ldr	r3, [r5, #0]
 800d502:	b103      	cbz	r3, 800d506 <_lseek_r+0x1e>
 800d504:	6023      	str	r3, [r4, #0]
 800d506:	bd38      	pop	{r3, r4, r5, pc}
 800d508:	20002704 	.word	0x20002704

0800d50c <__malloc_lock>:
 800d50c:	4801      	ldr	r0, [pc, #4]	; (800d514 <__malloc_lock+0x8>)
 800d50e:	f7ff bb0d 	b.w	800cb2c <__retarget_lock_acquire_recursive>
 800d512:	bf00      	nop
 800d514:	200026f8 	.word	0x200026f8

0800d518 <__malloc_unlock>:
 800d518:	4801      	ldr	r0, [pc, #4]	; (800d520 <__malloc_unlock+0x8>)
 800d51a:	f7ff bb08 	b.w	800cb2e <__retarget_lock_release_recursive>
 800d51e:	bf00      	nop
 800d520:	200026f8 	.word	0x200026f8

0800d524 <_read_r>:
 800d524:	b538      	push	{r3, r4, r5, lr}
 800d526:	4d07      	ldr	r5, [pc, #28]	; (800d544 <_read_r+0x20>)
 800d528:	4604      	mov	r4, r0
 800d52a:	4608      	mov	r0, r1
 800d52c:	4611      	mov	r1, r2
 800d52e:	2200      	movs	r2, #0
 800d530:	602a      	str	r2, [r5, #0]
 800d532:	461a      	mov	r2, r3
 800d534:	f7f5 fb98 	bl	8002c68 <_read>
 800d538:	1c43      	adds	r3, r0, #1
 800d53a:	d102      	bne.n	800d542 <_read_r+0x1e>
 800d53c:	682b      	ldr	r3, [r5, #0]
 800d53e:	b103      	cbz	r3, 800d542 <_read_r+0x1e>
 800d540:	6023      	str	r3, [r4, #0]
 800d542:	bd38      	pop	{r3, r4, r5, pc}
 800d544:	20002704 	.word	0x20002704

0800d548 <_raise_r>:
 800d548:	291f      	cmp	r1, #31
 800d54a:	b538      	push	{r3, r4, r5, lr}
 800d54c:	4604      	mov	r4, r0
 800d54e:	460d      	mov	r5, r1
 800d550:	d904      	bls.n	800d55c <_raise_r+0x14>
 800d552:	2316      	movs	r3, #22
 800d554:	6003      	str	r3, [r0, #0]
 800d556:	f04f 30ff 	mov.w	r0, #4294967295
 800d55a:	bd38      	pop	{r3, r4, r5, pc}
 800d55c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d55e:	b112      	cbz	r2, 800d566 <_raise_r+0x1e>
 800d560:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d564:	b94b      	cbnz	r3, 800d57a <_raise_r+0x32>
 800d566:	4620      	mov	r0, r4
 800d568:	f000 f830 	bl	800d5cc <_getpid_r>
 800d56c:	462a      	mov	r2, r5
 800d56e:	4601      	mov	r1, r0
 800d570:	4620      	mov	r0, r4
 800d572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d576:	f000 b817 	b.w	800d5a8 <_kill_r>
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d00a      	beq.n	800d594 <_raise_r+0x4c>
 800d57e:	1c59      	adds	r1, r3, #1
 800d580:	d103      	bne.n	800d58a <_raise_r+0x42>
 800d582:	2316      	movs	r3, #22
 800d584:	6003      	str	r3, [r0, #0]
 800d586:	2001      	movs	r0, #1
 800d588:	e7e7      	b.n	800d55a <_raise_r+0x12>
 800d58a:	2400      	movs	r4, #0
 800d58c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d590:	4628      	mov	r0, r5
 800d592:	4798      	blx	r3
 800d594:	2000      	movs	r0, #0
 800d596:	e7e0      	b.n	800d55a <_raise_r+0x12>

0800d598 <raise>:
 800d598:	4b02      	ldr	r3, [pc, #8]	; (800d5a4 <raise+0xc>)
 800d59a:	4601      	mov	r1, r0
 800d59c:	6818      	ldr	r0, [r3, #0]
 800d59e:	f7ff bfd3 	b.w	800d548 <_raise_r>
 800d5a2:	bf00      	nop
 800d5a4:	20000098 	.word	0x20000098

0800d5a8 <_kill_r>:
 800d5a8:	b538      	push	{r3, r4, r5, lr}
 800d5aa:	4d07      	ldr	r5, [pc, #28]	; (800d5c8 <_kill_r+0x20>)
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	4604      	mov	r4, r0
 800d5b0:	4608      	mov	r0, r1
 800d5b2:	4611      	mov	r1, r2
 800d5b4:	602b      	str	r3, [r5, #0]
 800d5b6:	f7f5 fb3d 	bl	8002c34 <_kill>
 800d5ba:	1c43      	adds	r3, r0, #1
 800d5bc:	d102      	bne.n	800d5c4 <_kill_r+0x1c>
 800d5be:	682b      	ldr	r3, [r5, #0]
 800d5c0:	b103      	cbz	r3, 800d5c4 <_kill_r+0x1c>
 800d5c2:	6023      	str	r3, [r4, #0]
 800d5c4:	bd38      	pop	{r3, r4, r5, pc}
 800d5c6:	bf00      	nop
 800d5c8:	20002704 	.word	0x20002704

0800d5cc <_getpid_r>:
 800d5cc:	f7f5 bb2a 	b.w	8002c24 <_getpid>

0800d5d0 <_init>:
 800d5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5d2:	bf00      	nop
 800d5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5d6:	bc08      	pop	{r3}
 800d5d8:	469e      	mov	lr, r3
 800d5da:	4770      	bx	lr

0800d5dc <_fini>:
 800d5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5de:	bf00      	nop
 800d5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5e2:	bc08      	pop	{r3}
 800d5e4:	469e      	mov	lr, r3
 800d5e6:	4770      	bx	lr
